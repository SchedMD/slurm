#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of srun --jobid option with an existing allocation
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Christopher J. Morrone <morrone2@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id              "1.58"
set exit_code            0
set jobid                0

print_header $test_id

if { [test_alps] } {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
}

#
# Run an srun to grab a single node allocation, but not start any
# job steps.
#
set timeout $max_job_delay
set srun_alloc_pid [spawn $salloc -v -N1 -n1 $bin_sleep 600]
set srun_alloc_sid $spawn_id
expect {
	-re "salloc: Granted job allocation ($number)" {
		set jobid $expect_out(1,string)
	}
	timeout {
		send_user "\nFAILURE: srun failed to grab an allocation "
		send_user "in a timely manner.\n"
		slow_kill $srun_alloc_pid
		exit 1
	}
}
if {$jobid == 0} {
	send_user "\nFAILURE: srun failed to create an allocation\n"
	exit 1
}

#
# Now try to use the srun --jobid option to run in the already existing
# allocation.
#
set pattern "sdiouetj49udfj"
set got_pattern 0
set srun_launch_pid [spawn $srun --jobid $jobid echo $pattern]
expect {
	-re "error" {
		send_user "\nFAILURE: unexpected error occurred\n"
		set exit_code 1
	}
 	-re $pattern {
		set got_pattern 1
		exp_continue
	}
	timeout {
		slow_kill $srun_launch_pid
	}
	eof {
		wait
	}
}

if {$got_pattern == 0} {
	send_user "\nFAILURE: unable to srun step under existing job allocation\n"
	set exit_code 1
}

#
# Release the allocation by killing salloc (really it kills the "sleep")
#
cancel_job $jobid
set spawn_id $srun_alloc_sid
exec kill -9 $srun_alloc_pid
expect {
	timeout {
		exec kill -9 $srun_alloc_pid
	}
	eof {
		wait
	}
}

if {$got_pattern == 1} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
