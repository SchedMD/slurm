#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of Blue Gene specific job geometry support
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory
#          named test8.3.input
############################################################################
# Copyright (C) 2004 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "8.3"
set exit_code   0
set file_in     "test$test_id.input"
set job_id      0

print_header $test_id

if {[test_bluegene] == 0} {
	send_user "\nWARNING: This test is only compatible with bluegene systems\n"
	 exit $exit_code
}

#
# Delete left-over input script files
# Build input script file
#
make_bash_script $file_in "$bin_sleep 1 &"

#
# Submit a slurm job for blue gene with geometry of 2x1x1
#
set timeout $max_job_delay
set sbatch_pid [spawn $sbatch --geometry=2x1x1 --no-rotate --nodes=1k-1k --output=/dev/null --error=/dev/null $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "error" {
		send_user "\nThis error is expected, not a problem\n"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		slow_kill $sbatch_pid
		exit 1
	}
	eof {
		wait
	}
}

#
# Confirm job geometry (if accepted)
#
if {$job_id != 0} {
	if {[wait_for_job $job_id DONE] != 0} {
		send_user "\nFAILURE: error completing job $job_id\n"
		cancel_job $job_id
		exit 1
	}

	spawn $scontrol show job $job_id
	expect {
		-re "JobState=FAILED" {
			 send_user "\nJob failure may be OK\n"
		}
		-re "NodeList=bgl.($number)x($number)" {
			set node_start $expect_out(1,string)
			set node_end $expect_out(2,string)
			if {[expr $node_start + 100] != $node_end} {
				send_user "\nFAILURE: Invalid job geometry\n"
				set exit_code 1
			}
			exp_continue
		}
		eof {
			wait
		}
	}
}

################################################################
#
# Submit a slurm job for blue gene with geometry of 1x2x1
#
set jobid 0
set sbatch_pid [spawn $sbatch --geometry=1x2x1 --no-rotate --nodes=1k-1k --output=/dev/null --error=/dev/null $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "error" {
		send_user "\nThis error is expected, not a problem\n"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		slow_kill $sbatch_pid
		exit 1
	}
	eof {
		wait
	}
}

#
# Confirm job geometry (if accepted)
#
if {$job_id != 0} {
	if {[wait_for_job $job_id DONE] != 0} {
		send_user "\nFAILURE: error completing job $job_id\n"
		cancel_job $job_id
		exit 1
	}

	spawn $scontrol show job $job_id
	expect {
		-re "NodeList=bgl.($number)x($number)" {
			set node_start $expect_out(1,string)
			set node_end $expect_out(2,string)
			if {[expr $node_start + 10] != $node_end} {
				send_user "\nFAILURE: Invalid job geometry\n"
				set exit_code 1
			}
			exp_continue
		}
		eof {
			wait
		}
	}
}

################################################################
#
# Submit a slurm job for blue gene with geometry of 1x1x2
#
set jobid 0
set sbatch_pid [spawn $sbatch --geometry=1x1x2 --no-rotate --nodes=1k-1k --output=/dev/null --error=/dev/null $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "error" {
		send_user "\nThis error is expected, not a problem\n"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		slow_kill $sbatch_pid
		exit 1
	}
	eof {
		wait
	}
}

#
# Confirm job geometry (if accepted)
#
if {$job_id != 0} {
	if {[wait_for_job $job_id DONE] != 0} {
		send_user "\nFAILURE: error completing job $job_id\n"
		cancel_job $job_id
		exit 1
	}

	spawn $scontrol show job $job_id
	expect {
		-re "NodeList=bgl.($number)x($number)" {
			set node_start $expect_out(1,string)
			set node_end $expect_out(2,string)
			if {[expr $node_start + 1] != $node_end} {
				send_user "\nFAILURE: Invalid job geometry\n"
				set exit_code 1
			}
			exp_continue
		}
		eof {
			wait
		}
	}
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code

