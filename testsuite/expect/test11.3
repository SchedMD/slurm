#!/usr/bin/env expect
############################################################################
# Purpose: Test of POE functionality
#          Test of Network protocol being set correctly.
#          (-msg_api)
#
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Danny Auble <da@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "11.3"
set exit_code   0
set proto_count 0
set protos      0
print_header    $test_id

if { ![test_launch_poe] } {
	send_user "\nWARNING: This test is only compatible with launch/poe systems\n"
	exit $exit_code
}

if { [string length $partition] == 0 } {
	set partition [default_partition]
}

set timeout $max_job_delay
set env(SLURM_TIMELIMIT) 1
set protocols { "mpi" "lapi" "pami" }
foreach proto $protocols {
	#
	# execute poe with a specific node count
	#
	incr protos
	spawn $poe printenv MP_MSG_API -labelio yes -rmpool $partition -msg_api $proto
	expect {
		-re "($number): *$proto" {
			incr proto_count
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: poe not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
}

if { $proto_count != $protos || !$proto_count } {
	send_user "\nFAILURE: not all protocols worked ($proto_count != $protos)\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
