#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Validate scontrol update command for job steps.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2010 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id       "2.13"
set exit_code     0
set file_in1      "test$test_id.input1"
set file_in2      "test$test_id.input2"
set file_out      "test$test_id.output"
set job_id        0
set orig_time     0
set new_time      0

print_header $test_id

if {[test_alps]} {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
}

if {[test_launch_poe]} {
	set step_id 1
} else {
	set step_id 0
}

#
# Build input batch file
#
exec $bin_rm -f $file_in1 $file_in2 $file_out
make_bash_script $file_in1 "
  $bin_echo JOB_BEGIN
  $srun -t5 ./$file_in2
  $bin_echo JOB_FINISH
"
#
# Build step file
# The second sleep is because with some proctrack plugins, the bash shell may
# be terminated slighly later than the first sleep process
#
make_bash_script $file_in2 "
  $bin_echo STEP_BEGIN
  $bin_sleep 120
  $bin_sleep 1
  $bin_echo STEP_FINISH
"

#
# Submit a job so we have something to work with
#
set srun_pid [spawn $sbatch --output=$file_out -t3 $file_in1]
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: srun failed to initiate job\n"
	exit 1
}
#
# Wait for job _and_ step to start running
#
if {[wait_for_job $job_id "RUNNING"] != 0} {
        send_user "\nFAILURE: waiting for job to start running\n"
        exit 1
}
sleep 5

#
# Validate that step's original time limit
#
spawn  $scontrol show step $job_id.$step_id
expect {
	-re "TimeLimit=00:($number):00" {
		set orig_time $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$orig_time != 5} {
        send_user "\nFAILURE: Failed to set step initial time limit\n"
	set exit_code 1
}

#
# Change that step's time limit
#
spawn $scontrol update StepId=$job_id TimeLimit=1
expect {
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Validate that step's new time limit
#
spawn  $scontrol show step $job_id.$step_id
expect {
	-re "TimeLimit=00:($number):00" {
		set orig_time $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$orig_time != 1} {
        send_user "\nFAILURE: Failed to update step time limit\n"
	set exit_code 1
}

#
# Wait for step to exit and check output file
# Look for message generated before and after srun (job step) time limit
#
sleep 60
if {[wait_for_job $job_id "DONE"] != 0} {
        send_user "\nFAILURE: waiting for job to terminate\n"
        exit 1
}
if {[wait_for_file $file_out] != 0} {
	send_user "\nFAILURE: job output file not found\n"
	exit 1
}

spawn $bin_cat $file_out
expect {
	-re "STEP_FINISH" {
		send_user "\nFAILURE: step time limit not enforced\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in1 $file_in2 $file_out
	send_user "\nSUCCESS\n"
}
exit $exit_code

