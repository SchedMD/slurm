#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          strigger --clear and --get (with filtering)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "19.6"
set exit_code        0
set file_in          "test$test_id.input"
set file_in_fini     "test$test_id.fini_input"
set file_in_time     "test$test_id.time_input"
set file_in_up       "test$test_id.up_input"
set file_in_down     "test$test_id.down_input"
set file_in_reconfig "test$test_id.reconfig_input"

print_header $test_id

#
# get my uid and clear any vestigial triggers
#
set uid [stop_root_user]
exec $strigger --clear --quiet --user=$uid

#
# Build input script files and submit a job
#
set cwd "[$bin_pwd]"
make_bash_script $file_in          "sleep 60"
make_bash_script $file_in_fini     "sleep 1"
make_bash_script $file_in_time     "sleep 1"
make_bash_script $file_in_up       "sleep 1"
make_bash_script $file_in_down     "sleep 1"
make_bash_script $file_in_reconfig "sleep 1"

set job_id 0
spawn $sbatch --output=/dev/null -t1 $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

#
# Now add a couple of triggers for that job
#
set disabled 0
set matches  0
set strigger_pid [spawn $strigger --set -v --time --jobid=$job_id --offset=-30 --program=$cwd/$file_in_time]
expect {
	-re "permission denied" {
		set disabled 1
		exp_continue
	}
	-re "trigger set" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$disabled == 1} {
	send_user "\nWARNING: Current configuration prevents setting triggers\n"
	send_user "         Need to run as SlurmUser or make SlurmUser=root\n"
	cancel_job $job_id
	exec $bin_rm -f $file_in $file_in_fini $file_in_time $file_in_up $file_in_down $file_in_reconfig
	exit $exit_code
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger creation failure\n"
	set exit_code 1
}

set matches 0
set strigger_pid [spawn $strigger --set -v --fini --jobid=$job_id --program=$cwd/$file_in_fini]
expect {
	-re "trigger set" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger creation failure\n"
	set exit_code 1
}

set matches 0
set strigger_pid [spawn $strigger --set -v --time --jobid=$job_id --offset=-40 --program=$cwd/$file_in_time]
expect {
	-re "trigger set" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger creation failure\n"
	set exit_code 1
}

#
# Now add some node up/down and reconfig triggers
#
set matches 0
set strigger_pid [spawn $strigger --set -v --up --program=$cwd/$file_in_up]
expect {
	-re "trigger set" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger creation failure\n"
	set exit_code 1
}

set matches 0
set strigger_pid [spawn $strigger --set -v --down --program=$cwd/$file_in_down]
expect {
	-re "trigger set" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger creation failure\n"
	set exit_code 1
}
set matches 0
set strigger_pid [spawn $strigger --set -v --reconfig --program=$cwd/$file_in_reconfig]
expect {
	-re "trigger set" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger creation failure\n"
	set exit_code 1
}

#
# Look for these triggers
#
set job_matches 0
set strigger_pid [spawn $strigger --get -v --user=$uid]
expect {
	-re "$job_id" {
		incr job_matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_matches != 3} {
	send_user "\nFAILURE: trigger get failure ($job_matches != 3)\n"
	set exit_code 1
}

#
# Delete the triggers for this job
#
set matches 0
set strigger_pid [spawn $strigger --clear -v --jobid=$job_id]
expect {
	-re "triggers for job $job_id cleared" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger clear failure\n"
	set exit_code 1
}

#
# Check that no triggers remains for this job
#
set job_matches  0
set node_matches 0
set trigger_id   0
set strigger_pid [spawn $strigger --get -v --user=$uid]
expect {
	-re "job * $job_id " {
		incr job_matches
		exp_continue
	}
	-re "($number) *node *. *($alpha)" {
		incr node_matches
		set trigger_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_matches != 0} {
	send_user "\nFAILURE: trigger get failure, job triggers not cleared\n"
	set exit_code 1
}
if {$node_matches != 3} {
	send_user "\nFAILURE: trigger get failure, node triggers cleared\n"
	set exit_code 1
}

#
# Delete specific trigger id
#
set matches 0
set strigger_pid [spawn $strigger --clear -v --id=$trigger_id]
expect {
	-re "trigger $trigger_id cleared" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger clear failure\n"
	set exit_code 1
}

#
# Check for cleared trigger
#
set node_matches 0
set strigger_pid [spawn $strigger --get -v --user=$uid]
expect {
	-re "($number) *node *. *($alpha)" {
		incr node_matches
		if {$trigger_id == $expect_out(1,string)} {
			send_user "\nFAILURE: failed to clear specific trigger\n"
			set exit_code 1
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$node_matches != 2} {
	send_user "\nFAILURE: trigger get failure, node triggers cleared\n"
	set exit_code 1
}

#
# Clear all triggers for this user
set matches 0
set strigger_pid [spawn $strigger --clear -v --user=$uid]
expect {
	-re "triggers for user $uid cleared" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger clear failure\n"
	set exit_code
}

#
# Check for any remaining triggers
#
set node_matches 0
set strigger_pid [spawn $strigger --get -v --user=$uid]
expect {
	-re "node" {
		incr node_matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$node_matches != 0} {
	send_user "\nFAILURE: trigger get failure, node triggers remain\n"
	set exit_code 1
}

cancel_job $job_id
if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_in_fini $file_in_time $file_in_up $file_in_down $file_in_reconfig
	send_user "\nSUCCESS\n"
}
exit $exit_code

