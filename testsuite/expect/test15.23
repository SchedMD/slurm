#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Verify environment variables controlling salloc are processed:
#          SALLOC_DEBUG and SALLOC_TIMELIMIT
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "15.23"
set exit_code        0
set job_id           0

print_header $test_id

#
# Set target environment variables
#
global env
set env(SALLOC_DEBUG)         2
set env(SALLOC_TIMELIMIT)     2

#
# Spawn a job via salloc using these environment variables
#
set matches 0
set timeout $max_job_delay
set salloc_pid [spawn $salloc -N1 $bin_bash]
expect {
	-re "debug:  Entering _msg_thr_internal" {
		incr matches
		exp_continue
	}
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re $prompt {
		#send_user "Job initiated\n"
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$job_id == 0} {
	send_user "\nFAILURE: did not get job_id\n"
	exit 1
}

set timeout 5
send "$scontrol show job $job_id\r"
expect {
	-re "TimeLimit=($number):($number):" {
		set time_limit [expr $expect_out(1,string) * 60 + $expect_out(2,string)]
		if {$time_limit == 2} {
			incr matches
		} else {
			send_user "FAILURE: TimeLimit not set\n"
			set exit_code 1
		}
		exp_continue
	}
	-re $prompt {
		send "exit\r"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$matches != 2} {
	send_user "\nFAILURE: processed $matches of 2 environment variables\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
