#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of job dependencies (--dependency option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2004-2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "15.14"
set file_in1    "test$test_id.input1"
set file_in2    "test$test_id.input2"
set file_out2   "test$test_id.output2"
set exit_code   0
set job_id1     0
set job_id2     0

print_header $test_id

#
# Build input script files
#
exec $bin_rm -f $file_in1 $file_in2 $file_out2
make_bash_script $file_in1 "$bin_sleep 10"

#
# Spawn a batch job that just sleeps for a while
#
set timeout $max_job_delay
set sbatch_pid [spawn $sbatch --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
	-re "Submitted batch job ($number)" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		slow_kill $sbatch_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

#
# Submit a dependent job
#
make_bash_script $file_in2 "$scontrol show job $job_id1"
set match_state 0
set sbatch_pid [spawn $sbatch --output=$file_out2 --dependency=afterany:$job_id1 $file_in2]
expect {
	-re "Submitted batch job ($number)" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		slow_kill $sbatch_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id2 == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

#
# Confirm dependency info within second job
#
set match_jobid 0
spawn $scontrol show job $job_id2
expect {
	-re "Dependency=afterany:($number)" {
		set match_jobid $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$match_jobid != $job_id1} {
	send_user "\nFAILURE: Dependency information not processed\n"
	set exit_code 1
}


#
# Confirm that first job is complete before second job starts
#
if {[wait_for_file $file_out2] != 0} {
	send_user "\nFAILURE: file $file_out2 is missing\n"
        set exit_code 1
} else {
	set match_job_state 0
	spawn $bin_cat $file_out2
	expect {
		-re "JobState=COMPLETED|COMPLETING" {
			set match_job_state 1
			exp_continue
		}
		eof {
			wait
		}
	}
	if {$match_job_state == 0} {
		send_user "\nFAILURE: Dependent job not completed\n"
		set exit_code 1
	}
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in1 $file_in2 $file_out2
	send_user "\nSUCCESS\n"
}
exit $exit_code
