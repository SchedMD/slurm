#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          strigger --set (node options)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id      "19.3"
set exit_code    0
set file_in      "test$test_id.input"
set file_out     "test$test_id.output"

print_header $test_id

#
# get my uid and clear any vestigial triggers
#
set uid -1
spawn $bin_id -u
expect {
	-re "($number)" {
		set uid $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
if {$uid == -1} {
	send_user "\nCan't get my uid\n"
	exit 1
} elseif {$uid == 0} {
	send_user "\nWARNING: Can't run this test as user root\n"
	exit 0
}
exec $strigger --clear --quiet --user=$uid

#
# Build input script file
#
set cwd "[$bin_pwd]"
exec $bin_rm -f $file_in $file_out
make_bash_script $file_in "$bin_echo DOWN >$cwd/$file_out"

set disabled 0
set matches  0
set strigger_pid [spawn $strigger --set -v --down --program=$cwd/$file_in]
expect {
	-re "permission denied" {
		set disabled 1
		exp_continue
	}
	-re "trigger set" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$disabled == 1} {
	send_user "\nWARNING: Current configuration prevents setting triggers\n"
	send_user "         Need to run as SlurmUser or make SlurmUser=root\n"
	exit $exit_code
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger creation failure\n"
	exit 1
}

set matches 0
set strigger_pid [spawn $strigger --set -v --block_err --program=$cwd/$file_in]
expect {
	-re "trigger set" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger creation failure\n"
	exit 1
}

set matches 0
set strigger_pid [spawn $strigger --get -v --down --user=$uid]
expect {
	-re "$file_in" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: trigger set or get failure\n"
	set exit_code 1
}

set strigger_pid [spawn $strigger --clear -v --user=$uid]
expect {
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code

