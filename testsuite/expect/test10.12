#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Confirm that smap --resolve will work on SN (--resolve option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Danny Auble <da@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "10.12"
set exit_code   0
set check       0
set non_bg      0

print_header $test_id

if { [test_bluegene] == 0 } {
	send_user "\nWARNING: This test is only compatible with bluegene systems\n"
	exit 0
}
if {[file exists $smap] == 0} {
	send_user "\nFAILURE: smap not installed\n"
	exit 1
}

set bg_type [get_bluegene_type]

if { $bg_type == "L" || $bg_type == "P" } {
	set name "000"
} else {
	set name "0000"
}

#
# Test smap resolve ablilty
# for XYZ coords to Rack Midplane
#
spawn $smap --resolve $name
expect {
	-re "Must be physically on a BlueGene" {
		set non_bg 1
		exp_continue;
	}
	-re "resolves to ($alpha_numeric_under)" {
		set check 1
		set resolve $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: smap not responding\n"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$non_bg != 0} {
	send_user "\nWARNING: This test is only valid on a BlueGene system Service Node\n"
	exit 0
}
if {$check != 1} {
	send_user "\nFAILURE: smap resolve failed for XYZ to Rack Midplane.\n"
	set exit_code 1
}

set check 0
if {$exit_code != 1} {
	#
	# Test smap resolve ablilty
	# for Rack Midplane to XYZ coords
	#
	spawn $smap --resolve $resolve
	expect {
		-re "must be on BG SN to resolve." {
			send_user "\nERROR: This test is only valid on a Blue Gene system Service Node\n"
			exit 0
		}
		-re "resolves to $name" {
			set check 1
		}
		timeout {
			send_user "\nFAILURE: smap not responding\n"
			set exit_code 1
			exp_continue
		}
		eof {
			wait
		}
	}
} else {
	send_user "\nFAILURE: smap can't resolve\n"
}

if {$check != 1} {
	send_user "\nFAILURE: smap resolve failed for Rack Midplane to XYZ.\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
