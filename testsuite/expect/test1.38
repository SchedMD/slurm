#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test srun handling of SIGINT to get task status or kill the job
#          (--quit-on-interrupt option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2007 The Regents of the University of California.
# Copyright (C) 2008 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "1.38"
set exit_code   0
set file_in     "test$test_id.input"

print_header $test_id

if { [test_xcpu] } {
	send_user "\nWARNING: This test is incompatible with XCPU systems\n"
	exit 0
} elseif {[test_alps]} {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
}

if {[test_launch_poe]} {
	set step_id 1
} else {
	set step_id 0
}

#
# Build input script file
#
make_bash_script $file_in "
  trap \"\" INT
  $bin_echo WAITING
  $bin_sleep 1000
"

#
# Get uid
#
spawn $bin_id -u
expect {
	-re "($number)" {
		set uid $expect_out(1,string)
	}
	eof {
		wait
	}
}

#
# Spawn initial program via srun and use SIGINT to status
# Note: For systems supporting proper pthreads use
#       exec $bin_kill -INT $srun_pid
#	otherwise use
#	exec $bin_pkill -INT -n -u $uid srun
#
set timeout $max_job_delay
set match_int  0
set match_term 0
set match_wait 0
set job_id  0
set srun_pid [spawn $srun -v -N1 -t1 --unbuffered ./$file_in]
expect {
	-re "launching ($number).$step_id" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "WAITING" {
		set match_wait 1
		# make sure the task gets started
		sleep 1
		exec $bin_kill -INT $srun_pid
		exp_continue
	}
	-re "srun: interrupt" {
		set match_int 1
		cancel_job $job_id
		exp_continue
	}
	-re "Force Terminated job" {
		set match_term 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {[expr $match_wait + $match_int + $match_term] != 3} {
	send_user "\nFAILURE: srun failed to properly process SIGINT, "
	send_user "($match_wait + $match_int + $match_term != 3)\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSo far, so good\n\n"
} else {
	exit $exit_code
}

#
# Spawn initial program via srun and use SIGINT to kill
# Note: For systems supporting proper pthreads, instead use
#       exec $bin_kill -INT $srun_pid
#
set match_int  0
set match_term 0
set match_wait 0
set job_id  0
set srun_pid [spawn $srun -v -N1 -t1 --unbuffered --quit-on-interrupt ./$file_in]
expect {
	-re "launching ($number).$step_id" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "WAITING" {
		set match_wait 1
		exec $bin_kill -INT $srun_pid
		exp_continue
	}
	-re "srun: interrupt" {
		set match_int 1
		exp_continue
	}
	-re "srun: task 0: running" {
		set match_int 1
		exp_continue
	}
	-re "srun: sending Ctrl-C" {
		set match_term 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
cancel_job $job_id
if {[expr $match_wait + $match_int + $match_term] != 2} {
	send_user "\nFAILURE: srun failed to properly process SIGINT, "
	send_user "($match_wait + $match_int + $match_term != 2)\n"
	set exit_code 1
} elseif {$match_int != 0} {
	send_user "\nFAILURE: srun failed to properly process SIGINT, "
	send_user "($match_int != 0)\n"
	set exit_code 1
}

#
# Post-processing
#
if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
