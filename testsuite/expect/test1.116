#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Extended MPI functionality tests via srun.
############################################################################
# Portions Copyright (C) 2019  SchedMD LLC.
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set exit_code          0
set file_in            "test$test_id.input"
set file_out           "test$test_id.output"
set file_err           "test$test_id.error"
set test_prog          "test$test_id.prog"
set job_id             0

#
# Test for existence of mpi compiler
#
if {[info exists mpicc] == 0} {
	skip "mpicc not defined, can't perform mpi testing"
}
if {[file executable $mpicc] == 0} {
	skip "$mpicc does not exists"
}
if {[test_front_end]} {
	skip "This test is incompatible with front-end systems"
}

#
# Delete left-over program and rebuild it
#
exec $bin_rm -f $test_prog ${test_prog}.o
if {$use_pmi} {
	spawn $mpicc -Xlinker -rpath $slurm_dir/lib -L $slurm_dir/lib -lpmi -o $test_prog ${test_prog}.c
	expect {
		eof {
			wait
		}
	}
} else {
	spawn $mpicc -o $test_prog ${test_prog}.c
	expect {
		eof {
			wait
		}
	}
}
if {![file exists $test_prog]} {
	skip "Unable to build test program"
}

# Delete left-over stdout/err files
file delete $file_out $file_err

#
# Build input script file
#
make_bash_script $file_in "
  $bin_date
  $srun -n6 -t1 ./$test_prog
  $bin_date
  $bin_echo TEST_COMPLETE
"

#
# Spawn an sbatch job that uses stdout/err and confirm their contents
# NOTE: MPI_Bcast does not work with Multiple_Slurmd configurations
#
set timeout $max_job_delay
set no_start 0
if {[test_multiple_slurmd] != 0} {
	set sbatch_pid [spawn $sbatch -N1 -n6 -O --output=$file_out --error=$file_err -t1 $file_in]
} else {
	set sbatch_pid [spawn $sbatch -N1-6 -n6 --output=$file_out --error=$file_err -t1 $file_in]
}
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "Batch job submission failed" {
		set no_start 1
		exp_continue
	}
	-re "Unable to contact" {
		fail "Slurm appears to be down"
	}
	timeout {
		log_error "srun not responding"
		slow_kill $sbatch_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$no_start != 0} {
	if {$job_id != 0} {
		cancel_job $job_id
	}
	skip "Partition too small for test"
}
if {$job_id == 0} {
	fail "Batch submit failure\n"
}

#
# Wait for job to complete
#
if {[wait_for_job $job_id "DONE"] != 0} {
	log_error "Waiting for job $job_id to complete"
	cancel_job $job_id
	set exit_code 1
}

#
# Check for desired output in stdout
#
set expected_sum [expr 6 * 6]
if {[wait_for_file $file_out] == 0} {
	set complete 0
	set matches  0
	set global_sum 0
	spawn $bin_cat $file_out
	expect {
		-re "Rank.($number). GlobalSum=($number)" {
			if {$expect_out(1,string) != 0} {
				log_error "GlobalSum from wrong rank ($expect_out(1,string) != 0)"
				set exit_code 1
			}
			incr global_sum $expect_out(2,string)
			incr matches
			exp_continue
		}
		-re "TEST_COMPLETE" {
			incr complete
			exp_continue
		}
		eof {
			wait
		}
	}
	if {$matches == 0} {
		log_error "No MPI communications occurred. The version of MPI you are using may be incompatible with the configured switch. Core files may be present from failed MPI tasks"
		set exit_code 1
	} elseif {$complete == 0} {
		log_error "Test failed to complete"
		set exit_code 1
	} elseif {$global_sum != $expected_sum} {
		log_error "Invalid global sum computed ($global_sum != $expected_sum)"
		set exit_code 1
	}
} else {
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out $file_err $test_prog ${test_prog}.o
} else {
	set matches 0
	spawn head $file_err
	expect {
		-re "Error creating CQ" {
			incr matches
			exp_continue
		}
		eof {
			wait
		}
	}
	if {$matches != 0} {
		fail "Test failed due to previous errors (\$exit_code = $exit_code). If using MVAPICH then configure \"PropagateResourceLimitsExcept=MEMLOCK. Also start slurmd with \"ulimit -l unlimited\""
	} else {
		fail "Test failed due to previous errors (\$exit_code = $exit_code). Check contents of $file_err"
	}
}
