############################################################################
# Purpose: Test of SLURM functionality
#          to be called from test3.11
#	   Make a reservation, submit a job to it, confirm that the
#          job is paired with the reservation.
#
############################################################################
# Copyright (C) 2009 Lawrence Livermore National Security
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Dave Bremer <dbremer@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################

proc inc3_11_3 {} {
	global user_name exit_code res_name
	global bin_rm file_in bin_sleep sbatch number scontrol
	global alpha_numeric_under scancel

	# TEST 3

	send_user "\n+++++ STARTING TEST 3 (Within: inc3.11.3) +++++\n"
	# Make the reservation
	set ret_code [create_res "StartTime=now+60minutes Duration=60 NodeCnt=1 User=$user_name" 0]
	if {$ret_code != 0} {
		send_user "\n\033\[31mFAILURE: Unable to create a valid reservation (Within: inc3.11.3)\033\[m\n"
		exit $ret_code
	}

	# Make the job script
	exec $bin_rm -f $file_in
	make_bash_script $file_in "$bin_sleep 10"

	# Submit the batch job
	set sbatch_pid [spawn $sbatch -N1 --reservation=$res_name $file_in]
	expect {
		-re "Submitted batch job ($number)" {
			set job_id $expect_out(1,string)
			exp_continue
		}
		timeout {
			send_user "\n\033\[31mFAILURE: sbatch not responding. (Within: inc3.11.3)\033\[m\n"
			slow_kill $sbatch_pid
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if {$job_id == 0} {
		send_user "\n\033\[31mFAILURE: batch submit failure (Within: inc3.11.3)\033\[m\n"
		exit 1
	}

	# Show the job, make sure reservation tag is right
	spawn $scontrol show job $job_id
	expect {
		-re "Reservation=($alpha_numeric_under)" {
			set tmp_res_name $expect_out(1,string)
			if {$tmp_res_name != $res_name} {
				send_user "\n\033\[31mFAILURE: problem submitting a job to a "
				send_user "reservation.  Job $job_id is running on "
				send_user "reservation $tmp_res_name, not $res_name (Within: inc3.11.3)\033\[m\n"
				set exit_code 1
				exp_continue
			}
		}
		-re "Invalid job id specified" {
			send_user "\n\033\[31mFAILURE: Job $job_id not found (Within: inc3.11.3)\033\[m\n"
			set exit_code 1
			exp_continue
		}
		timeout {
			send_user "\n\033\[31mFAILURE: scontrol not responding (Within: inc3.11.3)\033\[m\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}

	send_user "\n\033\[32mJOB is running as expected (Within: inc3.11.3)\033\[m\n"

	# Cancel the job
	spawn $scancel -v $job_id
	expect {
		-re "Invalid job_id" {
			send_user "\n\033\[31mFAILURE: Error cancelling the job submitted "
			send_user "to the reservation.  Job $job_id not found (Within: inc3.11.3)\033\[m\n"
			set exit_code 1
			exp_continue
		}
		timeout {
			send_user "\n\033\[31mFAILURE: scancel not responding Within: inc3.11.3)\033\[m\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}

	# Delete the reservation
	set ret_code [delete_res $res_name]
	if {$ret_code != 0} {
		exit $ret_code
	}
}
