#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          checks that the --array environment variables are correct, and
#          checks that the --output and --error files were created and
#          contain the correct information.
############################################################################
# Copyright (C) 2011-2014 SchedMD LLC
# Written by Nathan Yee <nyee32@schedmd.com>
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set file_script  "test$test_id.sh"
set file_out     "test$test_id-%A_%a.output"
set file_error   "test$test_id-%A_%a.error"
set job_id       0
set array_begin  0
set array_end    4
set array_id     ""
set array_in     ""
set array_var    ""
set exit_code    0

if {[get_array_config] < [expr $array_end + 1]} {
	skip "MaxArraySize is too small"
}

proc delete_file {} {

	global test_id job_id bin_rm array_end file_script

	set cnt 0
	for {set cnt 0} {$cnt<$array_end} {incr cnt} {
		exec $bin_rm -f test$test_id-$job_id\_$cnt\.output
		exec $bin_rm -f test$test_id-$job_id\_$cnt\.error

	}
	exec $bin_rm -f $file_script
}

# delete any remaining output files
delete_file

make_bash_script $file_script "
$bin_echo array_id=\$SLURM_ARRAY_JOB_ID
$bin_echo task_count=\$SLURM_ARRAY_TASK_COUNT
$bin_echo task_id=\$SLURM_ARRAY_TASK_ID
$bin_echo task_min=\$SLURM_ARRAY_TASK_MIN
$bin_echo task_max=\$SLURM_ARRAY_TASK_MAX
$bin_echo task_step=\$SLURM_ARRAY_TASK_STEP
$bin_sleep aaaa
exit 0
"

#
# Submit a job array with no output or error flags and make sure the default
# output file is created
#
set job_id 0
spawn $sbatch --array=$array_begin-[expr $array_end -1] -t1 $file_script
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		log_error "sbatch not responding"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	log_error "sbatch did not submit job"
	set exit_code 1
}

if {[wait_for_job $job_id "DONE"] != 0} {
	log_error "Waiting for job to complete"
	set exit_code 1
}

for {set cnt 0} {$cnt<$array_end} {incr cnt} {
	if {[wait_for_file slurm-$job_id\_$cnt\.out] != 0} {
		log_error "Output file was not created or not the correct format. slurm-$job_id\_$cnt\.out not found"
		set exit_code 1
	} else {
		exec $bin_rm -f slurm-$job_id\_$cnt\.out
	}
}

# submit a batch with an array from 0 to 3; array size 4
set job_id 0
spawn $sbatch --array=$array_begin-[expr $array_end -1] --output=$file_out --error=$file_error -t1 $file_script
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		log_error "sbatch not responding"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}

}
if {$job_id == 0} {
	fail "sbatch did not submit jobs"
}

if {[wait_for_job $job_id "DONE"] != 0} {
	log_error "Waiting for job to complete"
	set exit_code 1
}

# Checks that the correct error and output files were created with the correct format
for {set cnt 0} {$cnt<$array_end} {incr cnt} {
	if {[wait_for_file test$test_id-$job_id\_$cnt\.output] != 0} {
		log_error "Output file was not created or not the correct format. test$test_id-$job_id\_$cnt\.output not found"
		set exit_code 1
	}
	if {[wait_for_file test$test_id-$job_id\_$cnt\.error] !=0} {
		log_error "Error file was not created or not the correct format. test$test_id-$job_id\_$cnt\.error not found"
		set exit_code 1
	}
}
log_debug "Checking environment variables"
# Checks that the array job ids are correct
set max_inx [expr $array_end - 1]
for {set index 0} {$index < $array_end} {incr index} {
	set env_cnt 0
	spawn $bin_cat test$test_id-$job_id\_$index\.output
	expect {
		-re "array_id=$job_id" {
			incr env_cnt
			exp_continue
		}
		-re "task_count=$array_end" {
			incr env_cnt
			exp_continue
		}
		-re "task_id=$index" {
			incr env_cnt
			exp_continue
		}
		-re "task_min=0" {
			incr env_cnt
			exp_continue
		}
		-re "task_max=$max_inx" {
			incr env_cnt
			exp_continue
		}
		-re "task_step=1" {
			incr env_cnt
			exp_continue
		}
		eof {
			wait
		}
	}
	if {$env_cnt != 6} {
		log_error "Missing environment variables in file test$test_id-$job_id\_$index\.output ($env_cnt != 6)"
		set exit_code 1
	}
}

# checks the contents of of the error file
for {set index 0} {$index < $array_end} {incr index} {
	set err_match 0
	spawn $bin_cat test$test_id-$job_id\_$index\.error
	expect {
		-re "$sleep_error_message" {
			log_debug "Do not worry this error is expected"
			incr err_match
		}
		eof {
			wait
		}
	}
	if {$err_match != 1} {
		log_error "Bad contents in the error file test$test_id-$job_id\_$index\.error"
		set exit_code 1
	}
}

if {$exit_code == 0} {
	delete_file
} else {
	fail "Test failed due to previous errors"
}
