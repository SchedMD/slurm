#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Verify that user environment variables are propagated to the job.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "1.28"
set file_in          "test$test_id.input"
set test_env_name    "TEST_ENV_$test_id"
set test_env_val     123
set exit_code        0
set matches          0

print_header $test_id

make_bash_script $file_in "env | grep TEST; exit 0"

#
# Spawn a job via srun to print environment variables
#
set timeout $max_job_delay
set srun_pid [spawn $srun -N1 --export=$test_env_name=$test_env_val -t1 ./$file_in]
expect {
	-re "$test_env_name=($number)" {
		if {$expect_out(1,string) == $test_env_val} {
			incr matches
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: Environment variables not propagated ($matches != 1)\n"
	exit 1
}

#
# Spawn a job via srun to print environment variables
#
global env
set env($test_env_name) $test_env_val
set matches 0
set srun_pid [spawn $srun -N1 -t1 ./$file_in]
expect {
	-re "$test_env_name=($number)" {
		if {$expect_out(1,string) == $test_env_val} {
			incr matches
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: Environment variables not propagated ($matches != 1)\n"
	exit 1
}

if {[test_launch_poe]} {
	send_user "\nWARNING: Remaining tests incompatible with POE\n"
	if {$exit_code == 0} {
		exec $bin_rm -f $file_in
		send_user "\nSUCCESS\n"
	}
	exit $exit_code
}

#
# Spawn a job via srun to print environment variables with --export=ALL
#
set matches 0
set srun_pid [spawn $srun -N1 -t1 --export=ALL ./$file_in]
expect {
	-re "$test_env_name=($number)" {
		if {$expect_out(1,string) == $test_env_val} {
			incr matches
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: Environment variables not propagated ($matches != 1)\n"
	exit 1
}

#
# Spawn a job via srun to print environment variables with --export=NONE
#
set matches 0
set srun_pid [spawn $srun -N1 -t1 --export=NONE ./$file_in]
expect {
	-re "$test_env_name=($number)" {
		if {$expect_out(1,string) == $test_env_val} {
			incr matches
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 0} {
	send_user "\nFAILURE: Environment variables were propagated ($matches != 0)\n"
	exit 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
