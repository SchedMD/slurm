#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Check sinfo node information filtering (--state and --nodes
#          options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id      "4.5"
set exit_code    0
set matches      0
set name_string  "\[a-zA-Z0-9\]\[^ ]*"
set node_state   ""
set node_name    ""
set mismatches   0

print_header $test_id

#
# Check the sinfo long format looking for filtering options
#

spawn $sinfo --Node --long --exact
expect {
	-re "($end_of_line)($name_string) *($number_with_suffix) *($name_string) *($alpha)" {
		if (![string compare $node_name ""]) {
			set node_name $expect_out(2,string)
		}
		if (![string compare $node_state ""]) {
			set node_state $expect_out(5,string)
		}
		exp_continue
	}
	-re "Unable to contact" {
		send_user "\nFAILURE: slurm appears to be down\n"
		exit 1
	}
	timeout {
		send_user "\nFAILURE: sinfo not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Use sinfo state filter
#

spawn $sinfo --Node --long --exact --state=$node_state
expect {
	-re "($end_of_line)($name_string) *($number_with_suffix) *($name_string) *($alpha)" {
		if ([string compare $expect_out(5,string) $node_state]) {
			incr mismatches
		}
		exp_continue
	}
	-re "error:" {
		send_user "\nFAILURE: Unexpected error from sinfo\n"
		set exit_code 1
	}
	-re "Unable to contact" {
		send_user "\nFAILURE: slurm appears to be down\n"
		exit 1
	}
	timeout {
		send_user "\nFAILURE: sinfo not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Use sinfo node name filter
#

spawn $sinfo --Node --long --exact --nodes=$node_name
expect {
	-re "($end_of_line)($name_string) *($number_with_suffix) *($name_string) *($alpha)" {
		if ([string compare $expect_out(2,string) $node_name]) {
			incr mismatches
		}
		exp_continue
	}
	-re "error:" {
		send_user "\nFAILURE: Unexpected error from sinfo\n"
		set exit_code 1
	}
	-re "Unable to contact" {
		send_user "\nFAILURE: slurm appears to be down\n"
		exit 1
	}
	timeout {
		send_user "\nFAILURE: sinfo not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$mismatches != 0} {
	send_user "\nFAILURE: sinfo node filtering error\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
