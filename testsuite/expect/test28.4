#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Validates that scontrol update will update job using
#          the jobid and jobid with array index
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2011-2013 SchedMD LLC
# Written by Nathan Yee <nyee32@schedmd.com>
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id       "28.4"
set exit_code     0
set array_size    4
set file_script   "test$test_id.sh"
set job_id        0
set array_in      2

print_header $test_id

if {[get_array_config] < [expr $array_size + 1]} {
	send_user "\nWARNING: MaxArraySize is too small\n"
	exit 0
}

proc check_update { job job_time } {

	global scontrol number exit_code

	set new_job_id 0
	set time_match 0
	spawn $scontrol show job $job
	expect {
		-re "JobId=($number) ArrayJobId" {
			set new_job_id $expect_out(1,string)
			exp_continue
		}	
		-re "TimeLimit=00:($number):00" {
			if {$expect_out(1,string) == $job_time } {
				incr time_match
			}
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol is not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if {$new_job_id == 0} {
		send_user "\nFAILURE: failed to get new job id\n"
		set exit_code 1
	}
	if {$time_match != 1} {
		send_user "\nFAILURE: job $job was never updated\n"
		set exit_code 1
	}
	return $new_job_id
}

proc update_job { job job_time } {

	global scontrol exit_code

	spawn $scontrol update jobid=$job TimeLimit=$job_time
	expect {
		timeout {
			send_user "FAILURE: scontrol is not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
}

#####################Test starts here######################
# Submit a job array with 4 elements
make_bash_script $file_script "sleep 10"

spawn $sbatch -N1 --array=0-[expr $array_size -1] --begin=midnight --output=/dev/null -t1 $file_script
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "error" {
		send_user "\nFAILURE: sbatch did not submit jobs\n"
		set exit_code 1
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: sbatch did not submit jobs\n"
	exit 1
}

# Update a specific job using job array syntax
update_job ${job_id}_$array_in 2
set new_job_id [check_update ${job_id}_$array_in 2]

# Update a specific job using job ID syntax
update_job $new_job_id 4
set new_job_id [check_update ${job_id}_2 4]

# Make sure other tasks remain unchanged
check_update ${job_id}_1 1

if {[cancel_job $job_id] != 0} {
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_script
	send_user "\nSUCCESS\n"
}
exit $exit_code
