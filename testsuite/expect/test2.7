#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Validate scontrol pidinfo command.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set exit_code   0
set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set file_err    "test$test_id.error"
set job_id      0
set scontrol_id 0

# Delete left-over stdout/err files
file delete $file_out $file_err

#
# Build input script file
#
make_bash_script $file_in "$scontrol pidinfo \$\$"

#
# Spawn a srun batch job that uses stdout/err and confirm their contents
#
set srun_pid [spawn $sbatch --output=$file_out --error=$file_err -t1 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		log_error "srun not responding"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$job_id == 0} {
	exec $bin_rm -f $file_in
	fail "Batch submit failure"
}

#
# Wait for job to complete
#
if {[wait_for_job $job_id "DONE"] != 0} {
	exec $bin_rm -f $file_in
	fail "Waiting for job to complete"
}

#
# Verify job_id in output file
#
set rem_time 999
if {[wait_for_file $file_out] == 0} {
	spawn $bin_cat $file_out
	expect {
		-re "JobId=($number)" {
			set scontrol_id $expect_out(1,string)
			exp_continue
		}
		-re "Job remaining time is ($number)" {
			set rem_time $expect_out(1,string)
			exp_continue
		}
		eof {
			wait
		}
	}
}
if {$rem_time > 60} {
	log_error "Job remaining time is wrong $rem_time"
	set exit_code 1
}
if {$rem_time < 55} {
	log_error "Job remaining time seems too small"
	set exit_code 1
}

#
# Check for errors in log
#
if {[wait_for_file $file_err] == 0} {
	spawn $bin_cat $file_err
	expect {
		-re "error" {
			log_error "Some error encountered"
			set exit_code 1
		}
		eof {
			wait
		}
	}
}

if {$job_id != $scontrol_id} {
	fail "scontrol pidinfo error"
}
if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out $file_err
} else {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}
