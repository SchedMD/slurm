#!/usr/bin/env expect
############################################################################
# Purpose: Stress test multiple simultaneous commands via multiple threads
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id      "9.7"
set exit_code    0
set file_script  "./test$test_id.bash"
set iterations   5
set sleep_time   1
set task_cnt     10

print_header $test_id

#
# A single slurmd can't handle a large task count without
# running out of memory and pthreads
#
if {[test_front_end] != 0} {
	set task_cnt 2
}

#
# Initiate $task_cnt parallel tasks
#
for {set inx 0} {$inx < $task_cnt} {incr inx} {
	spawn $bin_bash $file_script $sinfo $srun $squeue $sleep_time $iterations [test_bluegene]
	set task_id($inx) $spawn_id
}

#
# Test output for successful completion message
#
set success_cnt 0
set timeout [expr $max_job_delay * $iterations * $task_cnt]
for {set inx 0} {$inx < $task_cnt} {incr inx} {
	set spawn_id $task_id($inx)
	expect {
		"########## EXIT_CODE 0 ##########" {
			incr success_cnt
		}
		timeout {
			send_user "\nFAILURE: Timeout on task $inx\n"
		}
		eof {
			wait
			send_user "\nFAILURE: EOF on task $inx\n"
		}
	}
}

if {$success_cnt != $task_cnt} {
	send_user "\nFAILURE: Only $success_cnt of $task_cnt tests passed\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
