#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Confirm that a job executes with the proper task distribution
#          (--nodes and --distribution options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2007 The Regents of the University of California.
# Copyright (C) 2008-2010 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "1.80"
set exit_code   0

print_header $test_id

if { [test_front_end] } {
	send_user "\nWARNING: This test is incompatible with front end systems\n"
	exit 0
} elseif {[test_serial]} {
	send_user "\nWARNING: This test is incompatible with serial system\n"
	exit 0
}

if {[test_launch_poe]} {
	set use_envvar MP_I_UPMD_HOSTNAME
} else {
	set use_envvar SLURM_NODEID
}

#
# Submit a two node job with block distribution
#
# Task layout depends upon how many tasks/CPUs are allocated per node
# One task on node zero,    layout: 0 0 0 1
# Two tasks on node zero,   layout: 0 0 1 1	<< Optimal
# Three tasks on node zero, layout: 0 1 1 1
#
set expected_layout1 [list 0 0 0 1]
set expected_layout2 [list 0 0 1 1]
set expected_layout3 [list 0 1 1 1]
set tested_layout [list -1 -1 -1 -1]
set timeout $max_job_delay
set srun_pid [spawn $srun -O -N2 -n4 -l --distribution=block -t1 $bin_printenv $use_envvar]
expect {
	-re "srun: error" {
		send_user "\nWARNING: can't test srun task distribution\n"
		exit 0
	}
	-re "($number): ($number)" {
		set index $expect_out(1,string)
		set value $expect_out(2,string)
		lset tested_layout $index $value
		exp_continue
	}
	-re "($number).($number):($alpha_numeric_under)" {
		set index $expect_out(1,string)
		set index2 $expect_out(2,string)
		if { $index == 0 } {
			set value 0
		} else {
			set value 1
		}
		lset tested_layout $index $value
		lset tested_layout $index2 $value
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Verify block distribution of tasks
#

send_user "Optimal task layout was: $expected_layout2\n"
send_user "Actual task layout was : $tested_layout\n"
if {[string compare $tested_layout $expected_layout1] &&
    [string compare $tested_layout $expected_layout2] &&
    [string compare $tested_layout $expected_layout3]} {
	send_user "\FAILURE: failed to distribute tasks in block fashion\n"
	set exit_code 1
}

if {[test_front_end] != 0} {
	send_user "\nWARNING: Additional testing is incompatible with front-end systems\n"
	exit $exit_code
}

#
# Submit a two node job with cyclic distribution
#
# Task layout depends upon how many tasks/CPUs are allocated per node
# One task on node zero,    layout: 0 1 1 1
# Two tasks on node zero,   layout: 0 1 0 1	<< Optimal
# Three tasks on node zero, layout: 0 1 0 0
#
set expected_layout1 [list 0 1 1 1]
set expected_layout2 [list 0 1 0 1]
set expected_layout3 [list 0 1 0 0]
set tested_layout [list -1 -1 -1 -1]
set srun_pid [spawn $srun -O -N2 -n4 -l --distribution=cyclic -t1 $bin_printenv $use_envvar]
expect {
	-re "More processors requested than permitted" {
		send_user "\nWARNING: can't test srun task distribution\n"
		exit 0
	}
	-re "Node count specification invalid" {
		send_user "\nWARNING: can't test srun task distribution\n"
		exit 0
	}
	-re "($number): ($number)" {
		set index $expect_out(1,string)
		set value $expect_out(2,string)
		lset tested_layout $index $value
		exp_continue
	}
	-re "($number).($number):($alpha_numeric_under)" {
		set index $expect_out(1,string)
		set index2 $expect_out(2,string)
		if { $index == 0 } {
			set value 0
		} else {
			set value 1
		}
		lset tested_layout $index $value
		lset tested_layout $index2 $value
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Verify cyclic distribution of tasks
#
send_user "Optimal task layout was: $expected_layout2\n"
send_user "Actual task layout was : $tested_layout\n"
if {[string compare $tested_layout $expected_layout1] &&
    [string compare $tested_layout $expected_layout2] &&
    [string compare $tested_layout $expected_layout3]} {
	send_user "\FAILURE: failed to distribute tasks in cyclic fashion\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
