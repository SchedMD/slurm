#!/usr/bin/env expect
############################################################################
# Purpose:  Test GRES APIs.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2014 SchedMD LLC
# Written by Morris Jette
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "7.17"
set exit_code   0
set test_prog   "test$test_id.prog"
set cfgdir      [pwd]

print_header $test_id

#
# Delete left-over programs and rebuild them
#
file delete $test_prog

set cmd "$bin_cc ${test_prog}.c -g -pthread -export-dynamic -o ${test_prog} -I${src_dir} -I${build_dir} ${build_dir}/src/api/libslurm.o -ldl"
send_user "$cmd\n"
eval exec $cmd

exec $bin_chmod 700 $test_prog

send_user "\n====test7.17.1====\n"
set cpu_match 0
spawn ./$test_prog "gpu:2" "$cfgdir" "/test7.17.1" 8
expect {
	-re "failure" {
		send_user "\nFAILURE: running test7.17.1\n"
		set exit_code 1
		exp_continue
	}
	-re "cpu_alloc=8" {
		set cpu_match 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$cpu_match != 1} {
	send_user "\nFAILURE: number of CPUs is incorrect\n"
	set exit_code 1
}

send_user "\n====test7.17.2====\n"
set cpu_match 0
spawn ./$test_prog "gpu:2" "$cfgdir" "/test7.17.2" 16
expect {
	-re "failure" {
		send_user "\nFAILURE: running test7.17.2\n"
		set exit_code 1
		exp_continue
	}
	-re "cpu_alloc=16" {
		set cpu_match 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$cpu_match != 1} {
	send_user "\nFAILURE: number of cpu is incorrect\n"
	set exit_code 1
}

send_user "\n====test7.17.3====\n"
set cpu_match 0
spawn ./$test_prog "gpu:2" "$cfgdir" "/test7.17.3" 16
expect {
	-re "failure" {
		send_user "\nFAILURE: running test7.17.3\n"
		set exit_code 1
		exp_continue
	}
	-re "cpu_alloc=16" {
		set cpu_match 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$cpu_match != 1} {
	send_user "\nFAILURE: number of cpu is incorrect should be 16\n"
	set exit_code 1
}

send_user "\n====test7.17.4====\n"
set cpu_match 0
spawn ./$test_prog "gpu:2" "$cfgdir" "/test7.17.4" 16
expect {
	-re "failure" {
		send_user "\nFAILURE: running test7.17.4\n"
		set exit_code 1
		exp_continue
	}
	-re "cpu_alloc=ALL" {
		set cpu_match 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$cpu_match != 1} {
	send_user "\nFAILURE: number of cpu is incorrect, should be ALL\n"
	set exit_code 1
}

#######################################
# Bad tests
#######################################

# Run a job with invalid job allocation
send_user "\n====test7.17.5====\n"
set fail_match 0
spawn ./$test_prog "craynetworks:100" "$cfgdir" "/test7.17.5" 16
expect {
	-re "failure" {
		send_user "This error is expected\n"
		set fail_match 1
		exp_continue
	}
	eof {
		wait
	}
}

if {$fail_match != 1} {
	send_user "\nFAILURE: This test should have failed but did not\n"
	set exit_code 1
}

# Run with no gres.conf file
send_user "\n====test7.17.6====\n"
set fail_match 0
spawn ./$test_prog "gpu:2" "$cfgdir" "/test7.17.6" 0
expect {
	-re "failure" {
		send_user "This error is expected\n"
		set fail_match 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$fail_match != 1} {
	send_user "\nFAILURE: This test should have failed but did not\n"
	set exit_code 1
}

# Test with invalid job allocation
send_user "\n====test7.17.7====\n"
set fail_match 0
spawn ./$test_prog "gpu:2" "$cfgdir" "/test7.17.7" 8
expect {
	-re "fatal" {
		send_user "This error is expected\n"
		set fail_match 1
		#exp_continue
	}
	eof {
		wait
	}
}
if {$fail_match != 1} {
	send_user "\nFAILURE: This test should have failed but did not\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
	file delete $test_prog
}
exit $exit_code
