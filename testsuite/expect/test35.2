#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Cray job-specific burst buffer use
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2015 SchedMD LLC.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette(at)schedmd.com>
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "35.2"
set data_in     "DATA_IN_0123456789"
set data_out    "DATA_OUT_9876543210"
set exit_code   0
set input_data  "test$test_id.data.in"
set output_data "test$test_id.data.out"
set output_use  "test$test_id.use.output"
set script_use  "test$test_id.use.bash"
set tmp_file    "test$test_id"

stop_root_user

proc find_bb_jobid { fname bb_jobid } {
	global bin_cat

	set found 0
	log_user 0
	spawn $bin_cat $fname
	expect {
		-re "JobID=$bb_jobid" {
			set found 1
			exp_continue
		}
		eof {
			wait
		}
	}
	log_user 1
	return $found
}

proc find_bb_data { file_name string_seek } {
	global bin_cat

	set found 0
	spawn $bin_cat $file_name
	expect {
		-re $string_seek {
			set found 1
			exp_continue
		}
		eof {
			wait
		}
	}
	return $found
}

print_header $test_id

set bb_types [get_bb_types]
if {[string first "cray" $bb_types] == -1} {
	send_user "\nWARNING: This test can only be run with the burst_buffer/cray plugin\n"
	exit 0
}

set cwd [$bin_pwd]
exec $bin_rm -f $input_data $output_data $output_use
exec $bin_echo $data_in >$cwd/$input_data

if {[get_bb_emulate] != 0} {
make_bash_script $script_use "#DW jobdw type=scratch capacity=1GiB access_mode=striped,private type=scratch
#DW stage_in type=file source=$cwd/$input_data destination=\$DW_JOB_STRIPED/$tmp_file
#DW stage_out type=file destination=$cwd/$output_data source=\$DW_JOB_STRIPED/$tmp_file
$bin_cat  $cwd/$input_data
$bin_echo $data_out >$cwd/$output_data
$scontrol show burst
exit 0"
} else {
make_bash_script $script_use "#DW jobdw type=scratch capacity=1GiB access_mode=striped,private type=scratch
#DW stage_in type=file source=$cwd/$input_data destination=\$DW_JOB_STRIPED/$tmp_file
#DW stage_out type=file destination=$cwd/$output_data source=\$DW_JOB_STRIPED/$tmp_file
$bin_cat  \$DW_JOB_STRIPED/$tmp_file
$bin_echo $data_out >\$DW_JOB_STRIPED/$tmp_file
$scontrol show burst
exit 0"
}

incr max_job_state_delay 300
set job_id_use 0
spawn $sbatch -N1 --output=$output_use $script_use
expect {
	-re "Submitted batch job ($number)" {
		set job_id_use $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$job_id_use == 0} {
	send_user "\nFAILURE: job did not launch\n"
	set exit_code 1
} elseif {[wait_for_job $job_id_use "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	set exit_code 1
} elseif {[wait_for_file $output_use] != 0} {
	set exit_code 1
} elseif {[find_bb_jobid $output_use $job_id_use] == 0} {
	send_user "\nFAILURE: job burst buffer not found\n"
	set exit_code 1
} elseif {[find_bb_data $output_use $data_in] == 0} {
	send_user "\nFAILURE: job burst buffer input data not found\n"
	set exit_code 1
} elseif {[find_bb_data $output_data $data_out] == 0} {
	send_user "\nFAILURE: job burst buffer output data not found\n"
	set exit_code 1
}

# Wait for purge of buffer to complete
sleep 10

set found 0
spawn $scontrol show burst
expect {
	-re "JobID=$job_id_use" {
		set found 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$found != 0} {
	send_user "\nFAILURE: job burst buffer not removed\n"
	set exit_code 1
}

if {[find_bb_data $output_data $data_out] == 0} {
	send_user "\nFAILURE: job output burst buffer data not correct\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $input_data $output_data
	exec $bin_rm -f $output_use $script_use
	send_user "\nSUCCESS\n"
}
exit $exit_code
