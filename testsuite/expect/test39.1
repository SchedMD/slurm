#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test full set of sbatch --gpu options and scontrol show job.
############################################################################
# Copyright (C) 2018 SchedMD LLC
# Written by Morris Jette
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set exit_code   0
set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set job_id      0

if {[test_cons_tres]} {
    log_debug "Valid configuration, using select/cons_tres"
} else {
    skip "This test is only compatible with select/cons_tres"
}

set nb_nodes [get_node_cnt_in_part]
if {$nb_nodes > 1} {
	set nb_nodes 2
}
set gpu_cnt [get_highest_gres_count $nb_nodes "gpu"]
if {$gpu_cnt < 0} {
	fail "Error getting GPU count"
}
if {$gpu_cnt < 1} {
	skip "This test requires 1 or more GPUs per node in the default partition"
}

set node_name [get_nodes_by_request "--gres=gpu:1 -n1 -t1"]
if { [llength $node_name] != 1 } {
	skip "This test need to be able to submit jobs with at least --gres=gpu:1"
}
set cpus_per_node     [get_node_param $node_name "CPUTot"]
set sockets_per_node  [get_node_param $node_name "Sockets"]
set cpus_per_socket   [expr $cpus_per_node / $sockets_per_node]

log_debug "GPUs per node count is $gpu_cnt"
log_debug "Sockets per node is $sockets_per_node"
log_debug "CPUs per socket is $cpus_per_socket"

if {$gpu_cnt > $cpus_per_node} {
	set gpu_cnt $cpus_per_node
}

set cpus_per_gpu 1
set gpu_bind "closest"
set gpu_freq "medium"
set tot_gpus $gpu_cnt
if {$nb_nodes > 1} {
	incr tot_gpus $gpu_cnt
}
set gpus_per_node $gpu_cnt
if {$gpus_per_node > 1 && [expr $gpus_per_node % 2] == 0 && \
    ($sockets_per_node > 1 || $cpus_per_socket > 1)} {
	set ntasks [expr $nb_nodes * 2]
} else {
	set ntasks $nb_nodes
}
set gpus_per_task [expr $tot_gpus / $ntasks]
set mem_per_gpu 10

#
# Build input script file
#
exec $bin_rm -f $file_in $file_out
make_bash_script $file_in "$scontrol show job \$SLURM_JOB_ID"

#
# Spawn a batch job with various --gpu options
#
spawn $sbatch --output=/dev/null --cpus-per-gpu=$cpus_per_gpu --gpu-bind=$gpu_bind --gpu-freq=$gpu_freq --gpus=$tot_gpus --gpus-per-node=$gpus_per_node --gpus-per-task=$gpus_per_task --mem-per-gpu=$mem_per_gpu --nodes=$nb_nodes --ntasks=$ntasks -t1 ./$file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		log_error "sbatch not responding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	fail "Batch not submitted"
}

set match 0
spawn $scontrol show job $job_id
expect {
	-re "CpusPerTres=gpu:$cpus_per_gpu" {
		incr match
		exp_continue
	}
	-re "MemPerTres=gpu:$mem_per_gpu" {
		incr match
		exp_continue
	}
	-re "TresBind=gpu:$gpu_bind" {
		incr match
		exp_continue
	}
	-re "TresFreq=gpu:$gpu_freq" {
		incr match
		exp_continue
	}
	-re "TresPerJob=gpu:$tot_gpus" {
		incr match
		exp_continue
	}
	-re "TresPerNode=gpu:$gpus_per_node" {
		incr match
		exp_continue
	}
	-re "TresPerTask=gpu:$gpus_per_task" {
		incr match
		exp_continue
	}
	timeout {
		log_error "sbatch not responding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$match != 7} {
	log_error "sbatch gpu options not fully processed ($match != 7)"
	set exit_code 1

}
cancel_job $job_id

#
# Spawn a batch job with various --gpu options
#
set job_id 0
set gpus_per_socket 1
set sockets_per_node 1
spawn $sbatch --output=/dev/null --cpus-per-gpu=$cpus_per_gpu --gpus-per-socket=$gpus_per_socket --sockets-per-node=$sockets_per_node --nodes=$nb_nodes --ntasks=$ntasks -t1 ./$file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		log_error "sbatch not responding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	exec $bin_rm -f $file_in $file_out
	fail "Batch not submitted"
}
set match 0
spawn $scontrol show job $job_id
expect {
	-re "TresPerSocket=gpu:$gpus_per_socket" {
		incr match
		exp_continue
	}
	timeout {
		log_error "sbatch not responding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$match != 1} {
	fail "sbatch gpu options not fully processed ($match != 8)"
}
cancel_job $job_id

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out
} else {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}
