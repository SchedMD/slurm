#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test sacct --helpformat option.
############################################################################
# Copyright (C) 2008-2009 TheLawrence Livermore National Security, LLC .
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Joseph Donaghy <donaghy1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set exit_code   0
set matches     0
set not_support 0

#
# Check accounting config and bail if not found.
#
if { [test_account_storage] == 0 } {
	skip "This test can't be run without a usable AccountStorageType"
}

################################################################
#
# Proc: sacct
#
# Purpose:  Pass sacct options and test
#
# Returns: Number of matches.
#
# Input: Switch options -e and --helpformat
#
################################################################

proc sacct_job { soption } {
	global sacct
	set debug       0
	set exit_code   0
	set matches     0
	set not_support 0
	log_debug "Sacct $soption"

	spawn $sacct $soption
	expect {
		-re "Slurm accounting storage is disabled" {
			set not_support 1
			exp_continue
		}
		-re "Account.*AdminComment.*AllocCPUS.*AllocGRES" {
			if {$debug} {log_debug "Match1"}
			incr matches
			exp_continue
		}
		-re "AllocNodes.*AllocTRES.*AssocID.*AveCPU" {
			if {$debug} {log_debug "Match2"}
			incr matches
			exp_continue
		}
		timeout {
			log_error "sacct not responding"
			set exit_code 1
		}
		eof {
			wait
		}
	}

	if {$not_support != 0} {
		skip "Can not test without accounting enabled"
	}
	return $matches
}

################################################################
set matches [sacct_job --helpformat]
if {$matches != 2} {
	log_error "sacct --helpformat failed ($matches of 2)"
	set exit_code 1
}

set matches [sacct_job -e]
if {$matches != 2} {
	fail "sacct -e failed ($matches of 2)"
}

if {$exit_code != 0} {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}
