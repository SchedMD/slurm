#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test priorities assigned to jobs. Uses srun --hold and --batch options.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id              "7.1"
set exit_code            0
set job_id1              0
set job_id2              0
set job_id3              0
set prio1                -1
set prio2                -1
set prio3                -1
set multi                0

print_header $test_id

if {[test_wiki_sched] == 1} {
	send_user "\nWARNING: not compatable with sched/wiki (Maui)\n"
	send_user "         or sched/wiki2 (Moab) schedulers\n"
	exit $exit_code
}

# expected outcome is different under multifactor rule
if { ![string compare [priority_type] multifactor] } {
	set multi 1
}


make_bash_script "pwd_script" { $bin_pwd }

#
# Spawn three sbatch job, one held
#
set sbatch_pid [spawn $sbatch -t1 --output=/dev/null --error=/dev/null  pwd_script]
expect {
	-re "Submitted batch job ($number)" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		slow_kill $sbatch_pid
		exit 1
	}
	eof {
		wait
	}
}
set sbatch_pid [spawn $sbatch -t1 --output=/dev/null --error=/dev/null pwd_script]
expect {
	-re "Submitted batch job ($number)" {
                set job_id2 $expect_out(1,string)
                exp_continue
        }
        timeout {
                send_user "\nFAILURE: sbatch not responding\n"
                slow_kill $sbatch_pid
                exit 1
        }
        eof {
		wait
        }
}
set sbatch_pid [spawn $sbatch -t1 --output=/dev/null --error=/dev/null --hold pwd_script]
expect {
	-re "Submitted batch job ($number)" {
                set job_id3 $expect_out(1,string)
                exp_continue
        }
        timeout {
                send_user "\nFAILURE: srun not responding\n"
		slow_kill $sbatch_pid
                exit 1
        }
        eof {
		wait
        }
}


#
# Get priority of each job
#
if {$job_id1 != 0} {
	spawn $scontrol show job $job_id1
	expect {
		-re "Priority=($number)" {
			set prio1 $expect_out(1,string)
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			cancel_job $job_id1
			set exit_code   1
		}
		eof {
			wait
		}
	}
	cancel_job $job_id1
} else {
	set exit_code   1
}
if {$job_id2 != 0} {
        spawn $scontrol show job $job_id2
        expect {
                -re "Priority=($number)" {
                        set prio2 $expect_out(1,string)
                        exp_continue
                }
                timeout {
                        send_user "\nFAILURE: scontrol not responding\n"
                        cancel_job $job_id2
                        set exit_code   1
                }
                eof {
			wait
                }
        }
        cancel_job $job_id2
} else {
        set exit_code   1
}
if {$job_id3 != 0} {
        spawn $scontrol show job $job_id3
        expect {
                -re "Priority=($number)" {
                        set prio3 $expect_out(1,string)
                        exp_continue
                }
                timeout {
                        send_user "\nFAILURE: scontrol not responding\n"
                        cancel_job $job_id3
                        set exit_code   1
                }
                eof {
			wait
                }
        }
        cancel_job $job_id3
} else {
        set exit_code   1
}

#
# Confirm reasonable values for the job priorities
#
if {$multi} {
	if {$prio1 != $prio2} {
		send_user "\FAILURE: Job priorities are not same: $prio1 != $prio2 \n"
		set exit_code 1
	}
} else {
	if {$prio1 <= $prio2} {
		send_user "\FAILURE: Job priorities are not decreasing: $prio1 <= $prio2 \n"
		set exit_code 1
	}
}
if {$prio3 != 0} {
	send_user "\FAILURE: Held job has non-zero priority: $prio3\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f pwd_script
	send_user "\nSUCCESS\n"
}
exit $exit_code
