#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Validate that aftercorr dependency is enforced.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2014 SchedMD LLC
# Written by Nathan Yee <nyee32@schedmd.com>
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id       17.44
set exit_code     0
set job_id1       0
set job_id2       0
set output        "test$test_id\_out_%a"
set output_base   "test$test_id\_out_"
set script1       "test$test_id\_sc1"
set script2       "test$test_id\_sc2"
set tasks         10

print_header $test_id

for {set task_id 1} {$task_id <= $tasks} {incr task_id} {
	set file_out_glob "${output_base}${task_id}"
	exec $bin_rm -f $file_out_glob
}

make_bash_script $script1 "sleep 5"

# Submit a job to depend on
spawn $sbatch -t1 --nice=100 --array=1-$tasks%2 -o/dev/null $script1
expect {
	-re "Submitted batch job ($number)" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch is not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if { $job_id1 == 0 } {
	send_user "\nFAILURE: sbatch did not submit job\n"
	exit 1
}

make_bash_script $script2 "$scontrol show job ${job_id1}_\$SLURM_ARRAY_TASK_ID"

# Submit a job that depends on job above
spawn $sbatch -t1 -daftercorr:$job_id1 --array=1-$tasks -o$output $script2
expect {
	-re "Submitted batch job ($number)" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch is not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if { $job_id2 == 0 } {
	send_user "\nFAILURE: sbatch did not submit job\n"
	cancel_job $job_id1
	exit 1
}

send_user "\nWaiting for output files...\n"
for {set task_id 1} {$task_id <= $tasks} {incr task_id} {
	set file_out_glob "${output_base}${task_id}"
	if {[wait_for_file $file_out_glob] != 0} {
		send_user "\nFAILURE: output file for task $task_id missing\n"
		set exit_code 1
		break
	} else {
		set match 0
		spawn cat $file_out_glob
		expect {
			-re "COMPLETED" {
				set match 1
				exp_continue
			}
			eof {
				wait
			}
		}
		if {$match == 0} {
			send_user "\nFAILURE: bad job state for task $task_id\n"
			set exit_code 1
		}
	}
	if {$exit_code == 0} {
		exec $bin_rm -f $file_out_glob
	}
}

if {$exit_code == 0} {
	exec $bin_rm -f $script1 $script2
	send_user "\nSUCCESS\n"
} else {
	cancel_job $job_id1
	cancel_job $job_id2
}
exit $exit_code
