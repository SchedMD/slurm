#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of partition specification on job submission (--partition
#          option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "15.22"
set def_part_name    ""
set exit_code        0
set file_in          "test$test_id.input"
set job_id           0
set other_part_name  ""

print_header $test_id

#
# Identify the partitions in the cluster, identifying the default
#
spawn $sinfo --summarize
expect {
	-re "($end_of_line)($alpha_numeric_under)(\[ \*\]) *up" {
		if (![string compare $expect_out(3,string) "*"]) {
			set def_part_name   $expect_out(2,string)
		} else {
			set other_part_name $expect_out(2,string)
		}
		exp_continue
	}
	-re "Unable to contact" {
		send_user "\nFAILURE: slurm appears to be down\n"
		exit 1
	}
	timeout {
		send_user "\nFAILURE: sinfo not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Submit a job explicitly to the default partition
#
set job_id  0
set timeout $max_job_delay
set salloc_pid [spawn $salloc --partition=$def_part_name -t1 $bin_sleep 1]
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
	}
	eof {
		wait
	}
}
# Confirm the job's partition
if {$job_id == 0} {
	send_user "\nFAILURE: job submit failure\n"
	set exit_code 1
} else {
	set read_part ""
	spawn $scontrol show job $job_id
	expect {
		-re "Partition=($alpha_numeric_under)" {
			set read_part $expect_out(1,string)
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if ([string compare $read_part $def_part_name]) {
		send_user "\nFAILURE: Improper partition selected\n"
		set exit_code 1
	}
	cancel_job $job_id
}

#
# Test if a non-default partition exists, terminate if none
#
if (![string compare $other_part_name ""]) {
	send_user "\nWARNING: can't test salloc partition option"
	send_user " only the default partition exists\n"
	exit $exit_code
}

#
# Submit job explicitly to a non-default partition
#
set job_id          0
set legit_failure   0
set salloc_pid [spawn $salloc --partition=$other_part_name -t1 $bin_sleep 1]
expect {
	-re "Required node not available" {
		set legit_failure 1
		exec $bin_kill -INT $salloc_pid
		exp_continue
	}
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
	}
	eof {
		wait
	}
}
# Confirm the job's partition
if {$legit_failure == 1} {
	send_user "\nWARNING: partition '$other_part_name' is not usable\n"
} elseif {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	set exit_code 1
} else {
	set read_part ""
	spawn $scontrol show job $job_id
	expect {
		-re "Partition=($alpha_numeric_under)" {
			set read_part $expect_out(1,string)
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if ([string compare $read_part $other_part_name]) {
		send_user "\nFAILURE: Improper partition selected\n"
		set exit_code 1
	}
	cancel_job $job_id
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
