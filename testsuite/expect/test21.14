#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          sacctmgr modify accounts, descriptions, limits,
#          and parents down and up the tree
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2008-2010 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Joseph Donaghy <donaghy1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals_accounting

set test_id     "21.14"
set exit_code   0
set tc1		"test$test_id-cluster-1"
set tc2		"test$test_id-cluster-2"
set ta1		"test$test_id-account.1"
set ta2		"test$test_id-account.2"
set ta3		"test$test_id-account.3"
set access_err  0

########## Account ##########
array set acct_req {}
set acct_req(cluster) $tc1,$tc2

########## Modify Accounts ##########

# Mod account 1
array set acct_mod_desc1 {}
array set acct_mod_acct_vals1 {
	description   testacct2
	organization  acttrg
}
array set acct_mod_assoc_vals1 {}

# Mod account 2
array set acct_mod_desc2 {}
array set acct_mod_acct_vals2 {}
array set acct_mod_assoc_vals2 {
	fairshare   1700
	maxcpumins  700000
	maxjobs     70
	maxnodes    700
	maxwall     00:07:00
}

# Mod account 3
array set acct_mod_desc3 {}
array set acct_mod_acct_vals3 {
	description   testacct1
	organization  accountorga1
}
array set acct_mod_assoc_vals3 {
	fairshare   -1
	maxcpumins  -1
	maxjobs     -1
	maxnodes    -1
	maxwall     -1
}

# Mod account 4
array set acct_mod_desc4 {}
set acct_mod_desc4(cluster) $tc1
array set acct_mod_acct_vals4 {}
array set acct_mod_assoc_vals4 {}
set acct_mod_assoc_vals4(parent) $ta2

# Mod account 5
array set acct_mod_desc5 {}
set acct_mod_desc5(cluster) $tc1
array set acct_mod_acct_vals5 {}
array set acct_mod_assoc_vals5 {}
set acct_mod_assoc_vals5(parent) $ta3

# Mod account 6
array set acct_mod_desc6 {}
set acct_mod_desc6(cluster) $tc1
array set acct_mod_acct_vals6 {}
array set acct_mod_assoc_vals6 {}
set acct_mod_assoc_vals6(parent) $ta2

print_header $test_id

set timeout 60

#
# Check accounting config and bail if not found.
#
if { [test_account_storage] == 0 } {
	send_user "\nWARNING: This test can't be run without a usable AccountStorageType\n"
	exit 0
}

if { [string compare [check_accounting_admin_level] "Administrator"] } {
	send_user "\nWARNING: This test can't be run without being an Accounting administrator.\nUse: sacctmgr mod user \$USER set admin=admin.\n"
	exit 0
}

#make sure we have a clean system and permission to do this work
remove_cluster "$tc1,$tc2"
if {$access_err != 0} {
	send_user "\nWARNING: not authorized to perform this test\n"
	exit $exit_code
}
remove_acct "" "$ta1,$ta2,$ta3"

#add cluster
incr exit_code [add_cluster "$tc1,$tc2" ""]
if { $exit_code } {
	remove_acct "" "$ta1,$ta2,$ta3"
	remove_cluster "$tc1,$tc2"
	exit $exit_code
}

#add accounts
incr exit_code [add_acct "$ta1,$ta2,$ta3" [array get acct_req]]
if { $exit_code } {
	remove_acct "" "$ta1,$ta2,$ta3"
	remove_cluster "$tc1,$tc2"
	exit $exit_code
}

# OK This is the real test, first test change the desc and org of the accounts
incr exit_code [mod_acct "$ta1,$ta2,$ta3" [array get acct_mod_desc1] [array get acct_mod_acct_vals1] [array get acct_mod_assoc_vals1]]
if { $exit_code } {
	remove_acct "" "$ta1,$ta2,$ta3"
	remove_cluster "$tc1,$tc2"
	exit $exit_code
}

#
# Use sacctmgr to list the test account modifications
#
set matches 0
set my_pid [spawn $sacctmgr -n -p list account account=$ta1,$ta2,$ta3 format="Account,Desc,Org"]
expect {
	-re "There was a problem" {
	        send_user "FAILURE: there was a problem with the sacctmgr command\n"
	    	incr exit_code 1
	}
	-re "($ta1|$ta2|$ta3).$acct_mod_acct_vals1(description).$acct_mod_acct_vals1(organization)." {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $my_pid
		incr exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 3} {
	send_user "\nFAILURE:  Account modification 1 incorrect with only $matches.\n"
	incr exit_code 1
}

# Next, test change the limits of the accounts
incr exit_code [mod_acct "$ta1,$ta2,$ta3" [array get acct_mod_desc2] [array get acct_mod_assoc_vals2] [array get acct_mod_acct_vals2]]
if { $exit_code } {
	remove_acct "" "$ta1,$ta2,$ta3"
	remove_cluster "$tc1,$tc2"
	exit $exit_code
}

#
# Use sacctmgr to list the test account modifications
#
set matches 0
set my_pid [spawn $sacctmgr -n -p list assoc account=$ta1,$ta2,$ta3 format="Account,Cluster,Fairshare,MaxCPUM,MaxJ,MaxN,MaxW"]
expect {
	-re "There was a problem" {
	        send_user "FAILURE: there was a problem with the sacctmgr command\n"
	    	incr exit_code 1
	}
	-re "($ta1|$ta2|$ta3).($tc1|$tc2).$acct_mod_assoc_vals2(fairshare).$acct_mod_assoc_vals2(maxcpumins).$acct_mod_assoc_vals2(maxjobs).$acct_mod_assoc_vals2(maxnodes).$acct_mod_assoc_vals2(maxwall)." {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $my_pid
		incr exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 6} {
	send_user "\nFAILURE:  Account modification 2 incorrect with only $matches.\n"
	incr exit_code 1
}

# Next, test change the desc and limits of the accounts
incr exit_code [mod_acct "$ta1,$ta3" [array get acct_mod_desc3] [array get acct_mod_acct_vals3] [array get acct_mod_assoc_vals3]]
if { $exit_code } {
	remove_acct "" "$ta1,$ta2,$ta3"
	remove_cluster "$tc1,$tc2"
	exit $exit_code
}

#
# Use sacctmgr to list the test account modifications
#
set matches 0
set my_pid [eval spawn $sacctmgr -n -p list account withassoc account=$ta1,$ta2,$ta3 format="Account,Desc,Org,Cluster,Fairshare,MaxCPUM,MaxJ,MaxN,MaxW"]
expect {
	-re "There was a problem" {
	        send_user "FAILURE: there was a problem with the sacctmgr command\n"
	    	incr exit_code 1
	}
	# Any time you use () around something you need to combine all
	# those things together since you can miss some and they be thrown away
	-re "(($ta1|$ta3).$acct_mod_acct_vals3(description).$acct_mod_acct_vals3(organization).($tc1|$tc2).1.....|$ta2.$acct_mod_acct_vals1(description).$acct_mod_acct_vals1(organization).($tc1|$tc2).$acct_mod_assoc_vals2(fairshare).$acct_mod_assoc_vals2(maxcpumins).$acct_mod_assoc_vals2(maxjobs).$acct_mod_assoc_vals2(maxnodes).$acct_mod_assoc_vals2(maxwall).)" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $my_pid
		incr exit_code 1
	}
	eof {
		wait
	}
}

if {$matches != 6} {
	send_user "\nFAILURE:  Account modification 6 incorrect with $matches.\n"
	incr exit_code 1
}

# Next, test change the parent of ta3 to be $ta2 on $tc1 sibling to be a child
incr exit_code [mod_acct $ta3 [array get acct_mod_desc4] [array get acct_mod_assoc_vals4] [array get acct_mod_acct_vals4]]
if { $exit_code } {
	remove_acct "" "$ta1,$ta2,$ta3"
	remove_cluster "$tc1,$tc2"
	exit $exit_code
}

#
# Use sacctmgr to list the test account modifications
#
set matches 0
set my_pid [eval spawn $sacctmgr -n -p list assoc account=$ta3 format="Account,ParentN,Cluster,Fairshare,MaxCPUM,MaxJ,MaxN,MaxW"]
expect {
	-re "There was a problem" {
	        send_user "FAILURE: there was a problem with the sacctmgr command\n"
	    	incr exit_code 1
	}
	-re "$ta3.$ta2.$tc1.1.$acct_mod_assoc_vals2(maxcpumins).$acct_mod_assoc_vals2(maxjobs).$acct_mod_assoc_vals2(maxnodes).$acct_mod_assoc_vals2(maxwall)." {
		incr matches
		exp_continue
	}
	-re "$ta3.root.$tc2.1....." {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $my_pid
		incr exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 2} {
	send_user "\nFAILURE:  Account modification 2 incorrect with $matches.\n"
	incr exit_code 1
}

# Next, test change the parent of $ta2 to be $ta3 on $tc1
# making the child the parent
incr exit_code [mod_acct $ta2 [array get acct_mod_desc5] [array get acct_mod_assoc_vals5] [array get acct_mod_acct_vals5]]
if { $exit_code } {
	remove_acct "" "$ta1,$ta2,$ta3"
	remove_cluster "$tc1,$tc2"
	exit $exit_code
}

#
# Use sacctmgr to list the test account modifications
#
set matches 0
set my_pid [eval spawn $sacctmgr -n -p list assoc account=$ta3,$ta2 format="Account,ParentN,Cluster,Fairshare,MaxCPUM,MaxJ,MaxN,MaxW"]
expect {
	-re "There was a problem" {
	        send_user "FAILURE: there was a problem with the sacctmgr command\n"
	    	incr exit_code 1
	}
	-re "($ta2.root.$tc2.$acct_mod_assoc_vals2(fairshare).$acct_mod_assoc_vals2(maxcpumins).$acct_mod_assoc_vals2(maxjobs).$acct_mod_assoc_vals2(maxnodes).$acct_mod_assoc_vals2(maxwall).|$ta2.$ta3.$tc1.$acct_mod_assoc_vals2(fairshare).$acct_mod_assoc_vals2(maxcpumins).$acct_mod_assoc_vals2(maxjobs).$acct_mod_assoc_vals2(maxnodes).$acct_mod_assoc_vals2(maxwall).|$ta3.root.($tc1|$tc2).1.....)" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $my_pid
		incr exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 4} {
	send_user "\nFAILURE:  Account modification 4 incorrect with $matches.\n"
	incr exit_code 1
}

# Next, test change the parent of $ta3 to be $ta2 on $tc1 again
# only this time the parent will become the child instead of it being a sibling.
incr exit_code [mod_acct $ta3 [array get acct_mod_desc6] [array get acct_mod_assoc_vals6] [array get acct_mod_acct_vals6]]
if { $exit_code } {
	remove_acct "" "$ta1,$ta2,$ta3"
	remove_cluster "$tc1,$tc2"
	exit $exit_code
}

#
# Use sacctmgr to list the test account modifications
#
set matches 0
set my_pid [eval spawn $sacctmgr -n -p list assoc account=$ta3,$ta2 format="Account,ParentN,Cluster,Fairshare,MaxCPUM,MaxJ,MaxN,MaxW"]
expect {
	-re "There was a problem" {
	        send_user "FAILURE: there was a problem with the sacctmgr command\n"
	    	incr exit_code 1
	}
	-re "($ta2.root.($tc1|$tc2).$acct_mod_assoc_vals2(fairshare).$acct_mod_assoc_vals2(maxcpumins).$acct_mod_assoc_vals2(maxjobs).$acct_mod_assoc_vals2(maxnodes).$acct_mod_assoc_vals2(maxwall).|$ta3.$ta2.$tc1.1.$acct_mod_assoc_vals2(maxcpumins).$acct_mod_assoc_vals2(maxjobs).$acct_mod_assoc_vals2(maxnodes).$acct_mod_assoc_vals2(maxwall).|$ta3.root.$tc2.1.....)" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $my_pid
		incr exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 4} {
	send_user "\nFAILURE:  Account modification 4 incorrect with $matches.\n"
	incr exit_code 1
}


# This is the end below here

incr exit_code [remove_acct "$tc1,$tc2" "$ta1,$ta2,$ta3"]
incr exit_code [remove_acct "" "$ta1,$ta2,$ta3"]
incr exit_code [remove_cluster "$tc1,$tc2"]

if {$exit_code == 0} {
	print_success $test_id
} else {
	send_user "\nFAILURE\n"
}
exit $exit_code

