#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Validates that sgather -v (verbose option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2011-2013 SchedMD LLC
# Written by Nathan Yee <nyee32@schedmd.com>
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id       "32.11"
set job_id        0
set hostname      ""
set file_in       "test${test_id}.in"
set file_out      "test${test_id}.out"
set sgather_tmp   "/tmp/test${test_id}"
set sgather_out   "test${test_id}_sgather.out"
set exit_code     0

print_header $test_id

if {[file executable $sgather] == 0} {
	send_user "\nWARINING $sgather does not exist\n"
	exit 0
}

if {[test_front_end] != 0} {
	send_user "\nWARNING: This test is incompatible with front-end systems\m"
	exit 0
}
if {[test_multiple_slurmd] != 0} {
	send_user "\nWARNING: This test is incompatible with multiple slurmd systems\n"
	exit 0
}
if {[slurmd_user_root] == 0} {
	send_user "\nWARNING: This test is incompatible with SlurmdUser != root\n"
	exit 0
}

#
# Remove any vestigial files
#
exec $bin_rm -f $file_in $file_out

# Set env PATH to slurm dir
set env(PATH) $slurm_dir/bin:$env(PATH)

make_bash_script $file_in "
env | grep SLURM_NNODES
$bin_rm -f ${sgather_out}\*
$srun $bin_cp -f $sgather $sgather_tmp
$sgather -v $sgather_tmp $sgather_out
sum $sgather ${sgather_out}\*
$bin_rm -f ${sgather_out}\*
$srun ls -l $sgather_tmp
$srun $bin_rm -f $sgather_tmp
exit 0
"

spawn $sbatch -N1-4 -o $file_out -t1 $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch is not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: batch job was not submitted\n"
	exit 1
}

wait_for_job $job_id "DONE"

set verbose   0
set number_1 -1
set number_2 -1
set file_cnt  0
set rm_cnt    0
set node_cnt 99
if {[wait_for_file $file_out] == 0} {
	spawn $bin_cat $file_out
	expect {
		-re "SLURM_NNODES=($number)" {
			set node_cnt $expect_out(1,string)
			exp_continue
		}
		-re "verbose *= 1" {
			incr verbose
			exp_continue
		}
		-re "\n($number) *($number) " {
			if {$number_1 == $expect_out(1,string) && $number_2 == $expect_out(2,string)} {
				incr file_cnt
			} else {
				set number_1 $expect_out(1,string)
				set number_2 $expect_out(2,string)
			}
			exp_continue
		}
		-re "No such file or directory" {
			send_user "\nError is expected. No worries.\n"
			incr rm_cnt
			exp_continue
		}
		eof {
			wait
		}
	}
}
if {$verbose != 1} {
	send_user "\nFAILURE: Failed to honor verbose option ($verbose != 1)\n"
	set exit_code 1
}
if {$file_cnt != $node_cnt} {
	send_user "\nFAILURE: Failed to gather files from all allocated nodes ($file_cnt != $node_cnt)\n"
	set exit_code 1
}
if {$rm_cnt != $node_cnt} {
	send_user "\nFAILURE: Failed to remove gathered files from all allocated nodes ($rm_cnt != $node_cnt)\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out
	send_user "\nSUCCESS\n"
} elseif {[test_launch_poe]} {
	send_user "\nWARNING: Sporatic failures with POE are expected. Please retest.\n"
#	POE BUG: If the application exits immediately then pmdv12 hangs until
#	slurm kills it with a timeout, thus the sleep below is required:
#	F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN TTY   TIME CMD
#	4 R  1001 17141 17137 99  80   0 - 33410 ?    ?  00:00:02 pmdv12
#	0 Z  1001 17152 17141  0  80   0 -     0 exit ?  00:00:00 test1.33.exit.b <defunct>
}
exit $exit_code
