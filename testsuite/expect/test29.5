#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          validate smd -r (--replace-node) option.
############################################################################
# Copyright (C) 2011-2014 SchedMD LLC
# Written by Nathan Yee <nyee32@schedmd.com>
# All rights reserved
############################################################################
source ./globals

set file_in     "test$test_id.script"
set node_name   ""
set job_id      0
set exit_code   0

# this test is for the nonstop --replace-node test

if {![slurmctld_plug_stack_nonstop]} {
	skip "This test is only compatible when SlurmctldPlugstack includes nonstop"
}
if {![test_super_user]} {
	skip "This test is only suitable for a super user (to restore down nodes)"
}

proc get_node {job_id} {
	global scontrol squeue re_word_str re_word_str exit_code

	set node_list ""
	spawn $squeue -j $job_id --noheader -o NodeList=%N
	expect {
		-re "NodeList=($re_word_str)" {
			set node_list $expect_out(1,string)
			exp_continue
		}
		timeout {
			log_error "squeue is not responding"
			set exit_code 1
		}
		eof {
			wait
		}
	}

	set node_name ""
	spawn $scontrol show hostnames $node_list
	expect {
		-re "($re_word_str)" {
			set node_name $expect_out(1,string)
			exp_continue
		}
		timeout {
			log_error "scontrol is not responding"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	return $node_name
}

proc reset_state {node} {

	global scontrol exit_code

	spawn $scontrol update NodeName=$node State=RESUME
	expect {
		timeout {
			log_error "scontrol is not responding"
			set exit_code 1
		}
		eof {
			wait
		}
	}
}

make_bash_script $file_in "$bin_sleep 100"

#
# Submit batch script to test
#
set job_id 0
spawn $sbatch -N2 --no-kill --output=/dev/null $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		log_error "sbatch is not responding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	log_error "sbatch did not submit job"
	set exit_code 1
}

#
# Wait for job to start
#
if {[wait_for_job $job_id "RUNNING"] != 0} {
        cancel_job $job_id
        fail "Waiting for job to start"
}
set node_name [get_node $job_id]

#
# replace a node that has not failed
#
set sub_match 0
spawn $smd -r $node_name $job_id
expect {
	-re "The specified node has not failed" {
		log_debug "This error is expected"
		set sub_match 1
		exp_continue
	}
	timeout {
		log_error "smd is not reponding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$sub_match != 1} {
	log_error "There are nodes that are drained when there should not be"
	set exit_code 1
}

#
# Drain the node so we can replace it
#
set sub_match 0
spawn $smd -d $node_name $job_id -R test
expect {
	-re "Job $job_id node $node_name is being drained" {
		set sub_match 1
		exp_continue
	}
	timeout {
		log_error "smd is not reponding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$sub_match != 1} {
	log_error "smd did not drain node"
	set exit_code 1
}

#
# replace the drained node
#
set sub_match 0
spawn $smd -r $node_name $job_id
expect {
	-re "Job $job_id got node $node_name replaced" {
		set sub_match 1
		exp_continue
	}
	timeout {
		log_error "smd is not reponding"
		set exit_code 0
	}
	eof {
		wait
	}

}
if {$sub_match != 1} {
	log_error "smd did not replace the node"
	set exit_code
}

cancel_job $job_id

reset_state $node_name

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
} else {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}
