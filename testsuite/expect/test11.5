#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Validate checkpoint operations using srun
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "11.5"
set exit_code   0
set file_in     "test$test_id.input"
set job_id      0

print_header $test_id

if {[test_alps]} {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
}

if {[test_launch_poe]} {
	set step_id 1
} else {
	set step_id 0
}

#
# Delete left-over input script
# Build input script file
#
exec $bin_rm -f $file_in
make_bash_script $file_in "
	$srun $bin_sleep 60
"

#
# Submit a job so we have something to work with
#
set sbatch_pid [spawn $sbatch --output=/dev/null --error=/dev/null -t2 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		if {$job_id == 0} {
			slow_kill $sbatch_pid
		} else {
			cancel_job $job_id
		}
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: srun submit failed\n"
	exit 1
}

#
# Wait for step to begin execution
#
if {[wait_for_step $job_id.$step_id] != 0} {
	send_user "\nFAILURE: waiting for step $job_id.$step_id to run\n"
	cancel_job $job_id
	exit 1
}

#
# Enable/disable/test ability to checkpoint
#
spawn $scontrol check disable $job_id.$step_id
expect {
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

set matches  0
spawn $scontrol check able $job_id.$step_id
expect {
	-re "No" {
		incr matches
		exp_continue
	}
	-re " Requested operation not supported on this system" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol failed to change checkpoint ability\n"
	set exit_code 1
}

spawn $scontrol check enable $job_id.$step_id
expect {
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

set matches 0
spawn $scontrol check able $job_id.$step_id
expect {
	-re "Yes" {
		incr matches
		exp_continue
	}
	-re " Requested operation not supported on this system" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol failed to change checkpoint ability\n"
	set exit_code 1
}

# Actual checkpoint on AIX only works for tasks launched using POE
if {[test_aix] == 1} {
	send_user "WARNING: Further testing is incompatible with AIX\n"
	cancel_job $job_id
	exit $exit_code
}

#
# Create a checkpoint, continue execution
#
spawn $scontrol check create $job_id.$step_id
expect {
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
set matches 0
spawn $scontrol check able $job_id.$step_id
expect {
	-re "(Yes|Began at)" {
		incr matches
		exp_continue
	}
	-re "Requested operation not supported on this system" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol checkpoint error\n"
	set exit_code 1
}

#
# Note completion of job step (undocumented option)
#
spawn $scontrol check complete $job_id.$step_id
expect {
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
set matches 0
spawn $scontrol check error $job_id.$step_id
expect {
	-re "test error message" {
		incr matches
		exp_continue
	}
	-re "Job step not running" {
		send_user "\nNot a problem if the checkpoint completed\n"
		incr matches
		exp_continue
	}
	-re "Requested operation not supported on this system" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol checkpoint error\n"
	set exit_code 1
}

#
# Finish up
#
cancel_job $job_id
if {$exit_code == 0} {
#	The checkpoint file, if any, has the same name as the job step ID
	exec $bin_rm -rf $job_id.$step_id
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code

