#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test sdiag --reset
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2012 SchedMD LLC
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "27.5"
set exit_code   0

print_header $test_id

proc sdiag_all { } {
	global sdiag number exit_code
	global jobs_submitted jobs_started

	set matches 0
	spawn $sdiag --all
	expect {
		-re "Jobs submitted: *($number)" {
			set jobs_submitted $expect_out(1,string)
			incr matches
			exp_continue
		}
		-re "Jobs started: *($number)" {
			set jobs_started $expect_out(1,string)
			incr matches
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: sdiag not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}

	if {$matches != 2} {
		send_user "\nFAILURE: sdiag --all failed ($matches)\n"
		set exit_code 1
	}
}

sdiag_all

set jobs_started   0
set jobs_submitted 0
set perm_denied    0
spawn $sdiag --reset
expect {
	-re "permission denied" {
		set perm_denied 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$perm_denied != 0} {
	send_user "\nInsufficient permission for this test\n"
	exit $exit_code
}

sdiag_all

if {$jobs_submitted != 0} {
	send_user "\nFAILURE: sdiag job submit count not cleared\n"
	set exit_code 1
}
if {$jobs_started != 0} {
	send_user "\nFAILURE: sdiag job start count not cleared\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
