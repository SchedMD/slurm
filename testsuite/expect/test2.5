#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Validate scontrol show commands for configuation, daemons,
#          nodes, frontends, and partitions.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2007 The Regents of the University of California.
# Copyright (C) 2008-2011 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "2.5"
set exit_code   0

print_header $test_id

#
# Report the slurm configuration
#
set matches     0
spawn $scontrol show config
expect {
	-re "SlurmctldPort" {
		incr matches
		exp_continue
	}
	-re "SlurmdPort" {
		incr matches
		exp_continue
	}
	-re "SLURM_CONF" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$matches != 3} {
	if {$matches == 2} {
		send_user "\nWARNING: it appears you are running with multiple slurmds.\n"
	} else {
		send_user "\nFAILURE: scontrol show config command failed\n"
		set exit_code 1
	}
}

#
# Report all slurm partitions
#
set matches     0
set part_name   ""
spawn $scontrol show partition
expect {
	-re "PartitionName=($alpha_numeric_under)" {
		set part_name $expect_out(1,string)
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches < 1} {
	send_user "\nFAILURE: scontrol show partition command failed\n"
	set exit_code 1
}

#
# Report one slurm partition
#
set matches     0
spawn $scontrol show partition $part_name
expect {
	-re "PartitionName=($alpha_numeric_under)" {
		if {[string compare $expect_out(1,string) $part_name] == 0} {
			incr matches
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol show partition command"
	send_user " with name failed\n"
	set exit_code 1
}

#
# Report all slurm front end nodes
#
set matches     0
set node_name   ""
spawn $scontrol show frontend
expect {
	-re "FrontendName=($alpha_numeric_under)" {
		set node_name $expect_out(1,string)
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches < 1} {
	send_user "\nWARNING: no front end nodes found\n"
} else {
#
#	Report one slurm front end node
#
	set matches     0
	spawn $scontrol show frontend $node_name
	expect {
		-re "FrontendName=($alpha_numeric_under)" {
			if {[string compare $expect_out(1,string) $node_name] == 0} {
				incr matches
			}
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if {$matches != 1} {
		send_user "\nFAILURE: scontrol show frontend command with name failed\n"
		set exit_code 1
	}
}

#
# Report all slurm nodes
#
set matches     0
set node_name   ""
spawn $scontrol show node
expect {
	-re "NodeName=($alpha_numeric_under)" {
		set node_name $expect_out(1,string)
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches < 1} {
	send_user "\nFAILURE: scontrol show node command failed\n"
	set exit_code 1
}

#
# Report one slurm node
#
set matches     0
spawn $scontrol show node $node_name
expect {
	-re "NodeName=($alpha_numeric_under)" {
		if {[string compare $expect_out(1,string) $node_name] == 0} {
			incr matches
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol show node command with name failed\n"
	set exit_code 1
}

#
# Report slurm daemons on this node
#
set matches     0
spawn $scontrol show daemons
expect {
	-re "slurmctld" {
		incr matches
		exp_continue
	}
	-re "slurmd" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
