#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of --overcommit option.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "17.32"
set exit_code   0
set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set job_id      0

print_header $test_id

if {[test_alps]} {
        send_user "\nWARNING: This test is incompatible with Cray systems\n"
        exit $exit_code
}

#
# Submit a slurm job that will print slurm env vars and execute 'id'
#
file delete $file_in $file_out
make_bash_script $file_in "
  env | grep SLURM | sort
  $srun $bin_id"

#
# Submit a slurm job that will execute 'id' on 1 node and over task_cnt tasks
#
if { [test_bluegene] } {
	if { [test_emulated] } {
		set task_cnt 1
	} else {
		set task_cnt 10
	}
} elseif { [test_serial] } {
	set task_cnt 1
} else {
	set task_cnt 10
}
spawn $sbatch --ntasks=$task_cnt --overcommit -N1 --output=$file_out -t1 $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "Batch job submission failed" {
		send_user "\nNo worries, error not unexpected\n"
		set no_run 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Wait for job to complete
#
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job to complete\n"
	cancel_job $job_id
	set exit_code 1
}

set matches     0
set tasks       0
if {[wait_for_file $file_out] == 0} {
	spawn $bin_cat $file_out
	expect {
		-re "SLURM_NPROCS=$task_cnt" {
			incr matches
			exp_continue
		}
		-re "SLURM_OVERCOMMIT=1" {
			incr matches
			exp_continue
		}
		-re "uid=" {
			incr tasks
			exp_continue
		}
		eof {
			wait
		}
	}
}
if {$matches != 2} {
	send_user "\nFAILURE: Did not set desired allocation env vars: "
	send_user "($matches != 2)\n"
	set exit_code 1
}
if {$tasks != $task_cnt} {
	send_user "\nFAILURE: Did not get proper number of tasks: "
	send_user "($tasks != $task_cnt)\n"
	set exit_code 1
}

if {$exit_code == 0} {
	file delete $file_in $file_out
	send_user "\nSUCCESS\n"
}
exit $exit_code
