#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Confirm that sbatch sets appropriate working directory (--workdir
#          option)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "17.7"
set cwd         "[$bin_pwd]"
set exit_code   0
set file_err    "test$test_id.error"
set file_in     "test$test_id.input"
set file_out    "$cwd/test$test_id.output"
set tmp_dir     "[exec $bin_printenv HOME]"

print_header $test_id

#
# Delete left-over stdin/out/err files
# Build stdin file
#
exec $bin_rm -f $file_in $file_out $tmp_dir/$file_err
if {[file exists $tmp_dir/$file_err]} {
	send_user "\nWARNING: can not delete /tmp/$file_err to run test\n"
	set random 0
	spawn $bin_date +%N
	expect {
		-re "($number)" {
			set random $expect_out(1,string)
			exp_continue
		}
		eof {
			wait
		}
	}
	set file_err $file_err.$random
}
make_bash_script $file_in "
  $bin_pwd
  $bin_cat /no/such/file
"

#
# Submit a slurm job that will execute 'pwd'
#
set job_id 0
spawn $sbatch -N1 --error=$file_err --output=$file_out --workdir=$tmp_dir -t1 $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if { $job_id == 0 } {
	send_user "\nFAILURE: failed to submit job\n"
	exit 1
}

#
# Wait for job to complete
#
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job to complete\n"
	set exit_code 1
}

set matches     0
if {[wait_for_file $file_out] == 0} {
	spawn $bin_cat $file_out
	expect {
		-re "$tmp_dir$end_of_line" {
			set matches 1
			exp_continue
		}
		-re "No such" {
			send_user "\nFAILURE: sbatch stderr in stdout file\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: sbatch failed to get expected stdout\n"
	set exit_code 1
}

if [file exists $file_err] {
	send_user "\nFAILURE: sbatch failed to create error file in working directory\n"
	set exit_code 1
}

if {$exit_code == 0} {
	wait_for_file $tmp_dir/$file_err
	exec $bin_rm -f $file_in $file_out $tmp_dir/$file_err
	send_user "\nSUCCESS\n"
}
exit $exit_code
