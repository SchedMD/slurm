#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          strigger --set --idle
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "19.7"
set exit_code        0
set file_in          "test$test_id.input"
set file_in_idle     "test$test_id.idle_input"
set file_out         "test$test_id.output"

print_header $test_id

#
# get my uid and clear any vestigial triggers
#
set uid -1
spawn $bin_id -u
expect {
	-re "($number)" {
		set uid $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
if {$uid == -1} {
	send_user "\nCan't get my uid\n"
	exit 1
} elseif {$uid == 0} {
	send_user "\nWARNING: Can't run this test as user root\n"
	exit 0
}
exec $strigger --clear --quiet --user=$uid

#
# Build input script files and submit a job
#
set cwd "[$bin_pwd]"
exec $bin_rm -f $file_out
make_bash_script $file_in          "sleep 6"
make_bash_script $file_in_idle     "echo \$1 >$cwd/$file_out"

set job_id 0
spawn $sbatch --output=/dev/null -t1 $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

#
# Now add an idle node trigger
#
set disabled 0
set matches  0
set strigger_pid [spawn $strigger --set -v --idle --offset=1 --program=$cwd/$file_in_idle]
expect {
	-re "permission denied" {
		set disabled 1
		exp_continue
	}
	-re "trigger set" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$disabled == 1} {
	send_user "\nWARNING: Current configuration prevents setting triggers\n"
	send_user "         Need to run as SlurmUser or make SlurmUser=root\n"
	cancel_job $job_id
	exit $exit_code
}
if {$matches == 0} {
	send_user "\nFAILURE: trigger creation failure\n"
	set exit_code 1
}

#
# Look for the trigger
#
set idle_matches 0
set strigger_pid [spawn $strigger --get -v --user=$uid]
expect {
	-re "idle" {
		incr idle_matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
#
# Depending upon timing of when slurmctld checks triggers, this
# might be processed immediately and not found by "strigger --get"
#
#if {$idle_matches == 0} {
#	send_user "\nFAILURE: trigger get failure\n"
#	set exit_code 1
#}

#
# Wait for trigger event (hopefully, shortly after the job completes)
#
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job to complete\n"
	set exit_code 1
}
if {[wait_for_file $file_out] == 0} {
	spawn $bin_cat $file_out
	expect {
		eof {
			wait
		}
	}
} else {
	send_user "\nFAILURE: Idle trigger program's output file missing\n"
	set exit_code 1
}

#
# Check that this trigger is purged
#
set idle_matches 0
set strigger_pid [spawn $strigger --get -v --user=$uid]
expect {
	-re "idle" {
		incr idle_matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: strigger not responding\n"
		slow_kill $strigger_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$idle_matches != 0} {
	send_user "\nFAILURE: trigger get failure, still exists\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_in_idle $file_out
	send_user "\nSUCCESS\n"
}
# clear any vestigial triggers
exec $strigger --clear --quiet --user=$uid
exit $exit_code

