#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test scancel state and name filters (--state and --name options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory
#          named test6.8.input
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "6.8"
set exit_code   0
set file_in     "test$test_id.input"
set job_id1     0
set job_id2     0

print_header $test_id

#
# Build input script file
#
make_bash_script $file_in "$srun $bin_sleep $max_job_delay"

#
# Spawn a couple of sbatch jobs
#
set sbatch_pid [spawn $sbatch --output=/dev/null --error=/dev/null --job-name=job.$test_id --hold -t1 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $sbatch_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

set sbatch_pid [spawn $sbatch --output=/dev/null --error=/dev/null --job-name=job.$test_id -t1 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $sbatch_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id2 == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	cancel_job $job_id1
	exit 1
}
exec $bin_rm -f $file_in

if {[wait_for_job $job_id2 RUNNING] != 0} {
	send_user "\nFAILURE: error waiting for job $job_id2 to run\n"
	cancel_job $job_id1
	exit 1
}

#
# Kill the jobs by state and name
#
set matches  0
spawn $scancel --name=job.$test_id --interactive --state=RUNNING
expect {
	-re "Cancel job_id=$job_id2.*\? " {
		send "y\r"
		incr matches
		exp_continue
	}
	-re "Cancel job_id=($number).*\? " {
		send "n\r"
		send_user "\nFAILURE: scancel job id mis-match ($expect_out(1,string) != $job_id2)\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scancel name or state filter failed\n"
	cancel_job $job_id1
	set exit_code 1
}

set matches  0
spawn $scancel --name=job.$test_id --interactive --state=PENDING
expect {
	-re "Cancel job_id=$job_id1.*\? " {
		send "y\r"
		incr matches
		exp_continue
	}
	-re "Cancel job_id=($number).*\? " {
		send "n\r"
		send_user "\nFAILURE: scancel job id mis-match ($expect_out(1,string) != $job_id1)\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scancel name or state filter failed\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
} else {
	send_user "\nFAILURE\n"
}
exit $exit_code
