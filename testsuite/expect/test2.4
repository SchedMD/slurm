#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Validate scontrol exit, quit, and !! commands.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# NOTE: The interaction processing is a bit strange to deal with the
# behavior of readline() in RedHat 9, that keeps printing the prompt
# for each keystroke.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "2.4"
set exit_code   0

print_header $test_id

#
# Report the slurm daemon status and explicitly exit
#
set matches     0
set ping_sent   0
set exit_sent   0
spawn $scontrol
expect {
	 -re "Slurmctld.primary/backup" {
		incr matches
		exp_continue
	}
	-re "scontrol: " {
		if {$matches == 0} {
			if {$ping_sent == 0} {
				send "ping\r"
				set ping_sent 1
			}
		} else {
			if {$exit_sent == 0} {
				send "exit\r"
				set exit_sent 1
			}
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol ping or exit command failed\n"
	set exit_code 1
}

#
# Report the slurm daemon status and explicitly quit
#
set matches     0
set ping_sent   0
set quit_sent   0
spawn $scontrol
expect {
	-re "Slurmctld.primary/backup" {
		incr matches
		 exp_continue
	}
	-re "scontrol: " {
		if {$matches == 0} {
			if {$ping_sent == 0} {
				send "ping\r"
				set ping_sent 1
			}
		} else {
			if {$quit_sent == 0} {
				send "quit\r"
				set quit_sent 1
			}
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scontrol ping or quit command failed\n"
	set exit_code 1
}

#
# Report the slurm daemon status, repeat via !! command and explicitly quit
#
set matches     0
set ping_sent   0
set excl_sent   0
set quit_sent   0
spawn $scontrol
expect {
	-re "Slurmctld.primary/backup" {
		incr matches
		exp_continue
	}
	-re "scontrol: " {
		if {$matches == 0} {
			if {$ping_sent == 0} {
				send "ping\r"
				set ping_sent 1
			}
		}
		if {$matches == 1} {
			if {$excl_sent == 0} {
				send "!!\r"
				set excl_sent 1
			}
		}
		if {$matches > 1} {
			if {$quit_sent == 0} {
				send "quit\r"
				set quit_sent 1
			}
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 2} {
	send_user "\nFAILURE: scontrol ping, !!, or quit command failed\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
