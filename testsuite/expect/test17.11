#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of oversubscribe and contiguous options, also uses --hold option.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "17.11"
set exit_code   0
set file_in     "test$test_id.input"
set force_part  0
set job_id      0

print_header $test_id

if {[test_alps]} {
        send_user "\nWARNING: This test is incompatible with Cray systems\n"
        exit $exit_code
}

set def_part [default_partition]
set oversubscribe [partition_oversubscribe $def_part]
if {[string compare $oversubscribe "FORCE"] == 0} {
	set force_part 1
}

#
# Delete left-over input script
# Build input script file
#
exec $bin_rm -f $file_in
make_bash_script $file_in "
  $bin_sleep 10
"

#
# Spawn a sbatch job with oversubscribe option only
#
spawn $sbatch --oversubscribe --hold -t1 $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

#
# Confirm oversubscribe and contiguous flag values
#
set matches 0
if {$job_id != 0} {
	spawn $scontrol show job $job_id
	expect {
		-re "OverSubscribe=YES" {
			incr matches
			exp_continue
		}
		-re "Contiguous=($number)" {
			set cont_val $expect_out(1,string)
			if {$cont_val == 0} {
				incr matches
			}
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if {[cancel_job $job_id] != 0} {
		set exit_code 1
	}
	set job_id 0
} else {
	set exit_code   1
}
if {$matches != 2} {
	send_user "\nFAILURE: Did not properly set oversubscribe and contiguous flag ($matches != 2)\n"
	set exit_code   1
}

#
# Spawn a sbatch job with contiguous option only
#
set job_id  0
spawn $sbatch --contiguous --hold -t1 $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		exit 1
	}
	eof {
		wait
	}
}

#
# Confirm oversubscribe and contiguous flag values
#
set match_oversubscribe 0
set match_cont  0
if {$job_id != 0} {
	spawn $scontrol show job $job_id
	expect {
		-re "OverSubscribe=NO" {
			set match_oversubscribe 1
			exp_continue
		}
		-re "OverSubscribe=OK" {
			set match_oversubscribe 1
			exp_continue
		}
		-re "Contiguous=($number)" {
			set cont_val $expect_out(1,string)
			if {$cont_val == 1} {
				set match_cont 1
			}
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if {[cancel_job $job_id] != 0} {
		set exit_code 1
	}
} else {
	set exit_code 1
}
if {$match_cont != 1} {
	send_user "\nFAILURE: Did not properly set contiguous flag\n"
	set exit_code 1
}
if {$force_part == 0 && $match_oversubscribe != 1} {
	send_user "\nFAILURE: Did not properly set oversubscribe flag\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
