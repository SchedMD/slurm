############################################################################
# Purpose: Test of SLURM functionality
#          to be called from test3.11
#	   If not running as root, make a reservation restricted to root,
#          submit a job, and confirm that the job is rejected.
#
############################################################################
# Copyright (C) 2009 Lawrence Livermore National Security
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Dave Bremer <dbremer@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################

proc inc3_11_4 {} {
	global user_name exit_code res_name
	global sbatch file_in number

	# TEST 4
	# If not running as root, make a reservation restricted to root, submit a job,
	# and confirm that the job is rejected.
	#
	send_user "\n+++++ STARTING TEST 4 (Within: inc3.11.4) +++++\n"

	if {$user_name == "root"} {
		return;
	}

	# Make the reservation
	set ret_code [create_res "StartTime=now+60minutes Duration=60 NodeCnt=1 User=root" 0]
	if {$ret_code != 0} {
		send_user "\n\033\[31mFAILURE: Unable to create a reservation (Within: inc3.11.4)\033\[m\n"
		set exit_code 1
	}

	# Submit the batch job
	set denied 0
	set sbatch_pid [spawn $sbatch -N1 --reservation=$res_name $file_in]
	expect {
		-re "Submitted batch job ($number)" {
			set job_id $expect_out(1,string)
			cancel_job $job_id
			send_user "\n\033\[31mFAILURE: job submit should have been denied (Within: inc3.11.4)\033\[m\n"
			set exit_code 1
			exp_continue
		}
		-re "Batch job submission failed: Access denied to requested reservation" {
			# Job was correctly denied
			set denied 1
			exp_continue
		}
		timeout {
			send_user "\n\033\[31mFAILURE: sbatch not responding (Within: inc3.11.4)\033\[m\n"
			slow_kill $sbatch_pid
			set exit_code 1
		}
		eof {
			wait
		}
	}

	if {$denied == 0} {
		send_user "\n\033\[31mFAILURE: Job $job_id should have been rejected "
		send_user "from reservation restricted to root.  Expected "
		send_user "rejection message not given. (Within: inc3.11.4)\033\[m\n"
		set exit_code 1
	} else {
		send_user "\033\[32mExpected error, no worries mate. (Within: inc3.11.4)\033\[m\n"
	}
	# Delete the reservation
	set ret_code [delete_res $res_name]
	if {$ret_code != 0} {
		exit $ret_code
	}
}
