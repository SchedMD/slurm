#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Tests #SBATCH entry functionality in a batch script
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2005-2007 The Regents of the University of California.
# Copyright (C) 2008 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Danny Auble <da@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "17.21"
set exit_code   0
set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set job_name    "TEST_NAME"
set delay       10

print_header $test_id

set enforce [test_enforce_part_limits]
if {![string compare $enforce "NO"]} {
	send_user "\nWARNING: This test is incompatible EnforcePartLimits = $enforce\n"
	exit 0
}

make_bash_script $file_in "
#SBATCH --job-name='$job_name'
$bin_sleep $delay
"

set timeout $max_job_delay
set job_id 0
spawn $sbatch -o $file_out $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}
set matches 0
spawn $scontrol show job $job_id
expect {
	-re "Name=$job_name" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
cancel_job $job_id
if {$matches != 1} {
	send_user "\nFAILURE: did not set job name from batch script\n"
	set exit_code 1
}

#
# Build input script file
#
make_bash_script $file_in "#SBATCH -N1000000k
$bin_sleep $delay
"
set match 0
set sbatch_pid [spawn $sbatch -o $file_out $file_in]
expect {
	-re "More processors requested than permitted" {
		send_user "This error was expected, no worries\n\n"
		set match 1
		exp_continue
	}
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		send_user "\nFAILURE: Test B was supposed to fail submission\n"
		set exit_code 1
		cancel_job $job_id
		exit 1
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		slow_kill $sbatch_pid
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

if { $match != 1 } {
	send_user "\nFAILURE: did not get expected output from sbatch\n"
	set exit_code 1
}

make_bash_script $file_in "
#SBATCH -N650000
$bin_sleep $delay
"

set sbatch_pid [spawn $sbatch -N1 -o $file_out $file_in]
expect {
	-re "More processors requested than permitted" {
		send_user "\nFAILURE: sbatch read from the batch file options"
		send_user "over writing the commandline options\n"
		set exit_code 1
		exp_continue
	}
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		cancel_job $job_id
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		slow_kill $sbatch_pid
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

#
# Post-processing
#
if {$exit_code == 0} {
	file delete $file_in $file_out
	send_user "\nSUCCESS\n"
}
exit $exit_code
