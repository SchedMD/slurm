#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of --signal option.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2007 The Regents of the University of California.
# Copyright (C) 2008-2009 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id      "1.53"
set exit_code    0
set file_prog    "test$test_id.prog"

print_header $test_id

if { [test_launch_poe] } {
	send_user "\nWARNING: This test is incompatable with launch/poe systems\n"
	exit $exit_code
}

#
# Delete left-over programs and rebuild them.
#
exec $bin_rm -f $file_prog
exec $bin_cc -o $file_prog $file_prog.c

#
# submit job to run 4 mins, but get signaled 2 mins before time limit
# so it should execute between 1 and 2 minutes before signal
#
set began_flag 0
set run_time   0
set timeout [expr $max_job_delay + 120]
set srun_pid [spawn $srun -t4 --signal=2@120 ./$file_prog]
expect {
	-re "Begin test" {
		set began_flag 1
		exp_continue
	}
	-re "Job ran for ($number) secs" {
		set run_time $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$began_flag == 0} {
	send_user "\nFAILURE: job never started\n"
	set exit_code 1
} elseif {$run_time < 59 || $run_time > 121} {
	send_user "\nFAILURE: problem with time limit signal\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec rm -f $file_prog
	send_user "\nSUCCESS\n"
}
exit $exit_code

