#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test sbcast security issues.
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set file_err    "test$test_id.error"

set exit_code            0
set job_id               0

if {[test_front_end] != 0} {
	skip "This test is incompatible with front-end systems"
}

stop_root_user

# Delete left-over stdout/err files
file delete $file_out $file_err

#
# Build input script file that broacasts a file
#
make_bash_script $file_in "
  $sbcast $sbcast /test1.$test_id
  $srun ls  /test1.$test_id
"

#
# Spawn an sbatch job that uses stdout/err and confirm their contents
#
set timeout $max_job_delay
set sbatch_pid [spawn $sbatch -N1 --output=$file_out --error=$file_err -t1 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		log_error "srun not responding"
		slow_kill $sbatch_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$job_id == 0} {
	fail "Batch submit failure"
}

#
# Wait for job to complete and check output file
#
if {[wait_for_job $job_id "DONE"] != 0} {
	log_error "waiting for job to complete"
	set exit_code 1
}

set matches 0
if {[wait_for_file $file_err] == 0} {
	spawn $bin_cat $file_err
	expect {
		-re "error: REQUEST_FILE_BCAST" {
			log_debug "These errors are expected, no worries"
			incr matches
			exp_continue
		}
		-re "ls.* No such file" {
			log_debug "These errors are expected, no worries"
			incr matches
			exp_continue
		}
		-re "ls.* does not exist" {
			log_debug "These errors are expected, no worries"
			incr matches
			exp_continue
		}
		-re "ls.* not found" {
			log_debug "These errors are expected, no worries"
			incr matches
			exp_continue
		}
		eof {
			wait
		}
	}
}
if {$matches != 2} {
	fail "sbcast wrote into root file system without root access ($matches)"
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out $file_err
} else {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}
