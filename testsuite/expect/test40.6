#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Decrease size of job with allocated MPS
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2019 SchedMD LLC
# Written by Morris Jette
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "40.6"
set exit_code        0
set file_in1         "test$test_id.input1"
set file_in2         "test$test_id.input2"
set file_out         "test$test_id.output"

print_header $test_id

if {[test_cons_tres]} {
        send_user "\nValid configuration, using select/cons_tres\n"
} else {
        send_user "\nWARNING: This test is only compatible with select/cons_tres\n"
        exit $exit_code
}
if {[test_front_end]} {
        send_user "\nWARNING: This test is incompatible with front-end systems\n"
        exit $exit_code
}

set constrain_devices [test_constrain_devices]
if {$constrain_devices} {
	send_user "Devices files are constrained by cgroups\n"
} else {
	send_user "Devices files are NOT constrained by cgroups\n"
}

set nb_nodes [available_nodes $partition ""]
if {$nb_nodes < 2} {
    send_user "\nWARNING: not enough nodes currently available ($nb_nodes avail, 2 needed)\n"
    exit $exit_code
}
set mps_cnt [get_mps_count $nb_nodes]
if {$mps_cnt < 0} {
	send_user "\nFAILURE: Error getting MPS count\n"
	exit 1
}
if {$mps_cnt < 100} {
	send_user "\nWARNING: This test requires 100 or more MPS per node in the default partition\n"
	exit 0
}

#
# Build input scripts
# file_in1: Determine MPS allocated, shrink and test again
# file_in2: Print the hostname and MPS info
#
exec $bin_rm -f $file_out
make_bash_script $file_in1 "
	$scontrol -dd show job \${SLURM_JOBID}
	$srun ./$file_in2
	$scontrol update JobId=\${SLURM_JOBID} NumNodes=1
	. slurm_job_\${SLURM_JOBID}_resize.sh
	$scontrol -dd show job \${SLURM_JOBID}
	$srun ./$file_in2
	$bin_rm -f slurm_job_\${SLURM_JOBID}_resize.csh
	$bin_rm -f slurm_job_\${SLURM_JOBID}_resize.sh
	exit 0"

# NOTE: We pipe stderr from slurmd and discard stdout
make_bash_script $file_in2 "
$slurmd -N \$SLURMD_NODENAME -G 2>&1 >/dev/null | grep 'Gres Name=mps' | grep 'Index='\$CUDA_VISIBLE_DEVICES
echo 'HOST:'\$SLURMD_NODENAME 'CUDA_VISIBLE_DEVICES:'\$CUDA_VISIBLE_DEVICES 'CUDA_MPS_ACTIVE_THREAD_PERCENTAGE:'\$CUDA_MPS_ACTIVE_THREAD_PERCENTAGE"

#
# Submit job to shrink: uses 10 gres/mps on two nodes
#
set job_id 0
spawn $sbatch -N1 --exclusive -J "test$test_id" -t2 --gres=mps:10 -N2 --output=$file_out $file_in1
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: job 1 not submitted\n"
	exit 1
}
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	cancel_job $job_id
	exit 1
}

#
# Parse the output files from job 1
#
send_user "\n\nParse job 1 output\n"
if {[wait_for_file $file_out] != 0} {
	send_user "\nFAILURE: no output file\n"
	exit 1
}
set match 0
set percentage -1
spawn $bin_cat $file_out
expect {
	-re "CUDA_VISIBLE_DEVICES:($number) CUDA_MPS_ACTIVE_THREAD_PERCENTAGE:($number)" {
		incr match
		set percentage $expect_out(2,string)
		exp_continue
	}
	eof {
		wait
	}
}
if {$match != 3} {
	send_user "\nFAILURE: bad CUDA information about job 1 ($match != 3)\n"
	set exit_code 1
}

#
# If devices not constrained and Count on all allocated devices is the same
# then confirm the CUDA_MPS_ACTIVE_THREAD_PERCENTAGE value above is correct
#
if {$exit_code == 0 && $constrain_devices == 0} {
	set count -1
	log_user 0
	spawn $bin_cat $file_out
	expect {
		-re "Count=($number)" {
			if {$count == -1} {
				set count $expect_out(1,string)
			} elseif {$count != $expect_out(1,string)} {
				set count -1
			}
			exp_continue
		}
		eof {
			wait
		}
	}
	log_user 1
	if {$count > 0} {
		set count [expr 10 * 100 / $count]
		if {$percentage != $count} {
			send_user "\nFAILURE: Bad CUDA_MPS_ACTIVE_THREAD_PERCENTAGE value ($percentage != $count)\n"
			set exit_code 1
		} else {
			send_user "\n CUDA_MPS_ACTIVE_THREAD_PERCENTAGE value is good\n"
		}
	}
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in1 $file_in2 $file_out
	send_user "\nSUCCESS\n"
}
exit $exit_code
