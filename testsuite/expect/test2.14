#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Validate scontrol update size of running job.
############################################################################
# Copyright (C) 2010 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set exit_code        0
set file_in          "test$test_id.input"
set file_out         "test$test_id.output"
set file_out2        "test$test_id.output2"
set job_id           0
set node_cnt         2

if {[test_front_end]} {
    skip "This test is incompatible with front-end systems"
}

set available [available_nodes]
if {$available < $node_cnt} {
    skip "Not enough nodes currently available ($available avail, $node_cnt needed)"
}

#
# Build input script file
#
exec $bin_rm -f $file_in $file_out $file_out2
make_bash_script $file_in "
	$srun -l $bin_id
	$scontrol show job \${SLURM_JOBID} >${file_out2}
	$scontrol update JobId=\${SLURM_JOBID} NumNodes=1
	. slurm_job_\${SLURM_JOBID}_resize.sh
	$scontrol show job \${SLURM_JOBID} >>${file_out2}
	$srun -l $bin_id
	echo SLURM_NNODES=\${SLURM_NNODES}
	$bin_rm -f slurm_job_\${SLURM_JOBID}_resize.csh
	$bin_rm -f slurm_job_\${SLURM_JOBID}_resize.sh"

#
# Run job to determine what nodes are available
#
spawn $sbatch -N$node_cnt -J "test$test_id" -t1 --output=$file_out $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		log_error "sbatch not responding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	fail "Job not submitted"
}
if {[wait_for_job $job_id "DONE"] != 0} {
	cancel_job $job_id
	fail "Job did not complete"
}
if {[wait_for_file $file_out] != 0} {
	fail "No output file"
}
set task_count 0
set node_count 0
spawn $bin_cat $file_out
expect {
	-re "slurm_allocation_lookup" {
		log_error "Couldn't look up the job correctly"
		set exit_code 1
	}
	-re "No such file or directory" {
		log_error "For some reason the resize script wasn't found"
		set exit_code 1
	}
	-re "($number): *uid=" {
		incr task_count
		exp_continue
	}
	-re "SLURM_NNODES=($number)" {
		set node_count $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
set task_target [expr $node_cnt + 1]
if {$task_count != $task_target} {
	log_error "Invalid task count ($task_count != $task_target)"
	set exit_code 1
}
if {$node_count != 1} {
	log_error "Invalid node count ($node_count != 1)"
	set exit_code 1
}
if {$exit_code == 0} {
	log_debug "So far, so good.."
}

if {[wait_for_file $file_out2] != 0} {
	fail "No output file2"
}
set node_count 0
spawn $bin_cat $file_out2
expect {
	-re "NumNodes=($number)" {
		incr node_count $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
if {$node_count != 3} {
	fail "Invalid node count ($node_count != 3)"
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out $file_out2
} else {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}
