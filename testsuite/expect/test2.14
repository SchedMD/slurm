#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Validate scontrol update size of running job.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2010 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "2.14"
set exit_code        0
set file_in          "test$test_id.input"
set file_out         "test$test_id.output"
set file_out2        "test$test_id.output2"
set job_id           0
set node_cnt         2

print_header $test_id

if { [test_xcpu] } {
	send_user "\nWARNING: This test is incompatible with XCPU systems\n"
	exit 0
} elseif {[test_front_end]} {
        send_user "\nWARNING: This test is incompatible with front-end systems\n"
        exit $exit_code
} elseif {[test_serial]} {
	send_user "\nWARNING: This test is incompatible with serial systems\n"
	exit $exit_code
} elseif {[test_launch_poe]} {
	send_user "\nWARNING: This test is incompatible with POE systems\n"
	exit 0
}

set available [available_nodes $partition ""]
if {$available < $node_cnt} {
    send_user "\nWARNING: not enough nodes currently available ($available avail, $node_cnt needed)\n"
    exit $exit_code
}

#
# Build input script file
#
exec $bin_rm -f $file_in $file_out $file_out2
make_bash_script $file_in "
	$srun -l $bin_id
	$scontrol show job \${SLURM_JOBID} >${file_out2}
	$scontrol update JobId=\${SLURM_JOBID} NumNodes=1
	. slurm_job_\${SLURM_JOBID}_resize.sh
	$scontrol show job \${SLURM_JOBID} >>${file_out2}
	$srun -l $bin_id
	echo SLURM_NNODES=\${SLURM_NNODES}
	$bin_rm -f slurm_job_\${SLURM_JOBID}_resize.csh
	$bin_rm -f slurm_job_\${SLURM_JOBID}_resize.sh"

#
# Run job to determine what nodes are available
#
spawn $sbatch -N$node_cnt -t1 --output=$file_out $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: job not submitted\n"
	exit 1
}
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	cancel_job $job_id
	exit 1
}
if {[wait_for_file $file_out] != 0} {
	send_user "\nFAILURE: no output file\n"
	exit 1
}
set task_count 0
set node_count 0
spawn $bin_cat $file_out
expect {
	-re "slurm_allocation_lookup_lite" {
		send_user "\nFAILURE: Couldn't look up the job correctly\n\n\n"
		set exit_code 1
	}
	-re "No such file or directory" {
		send_user "\nFAILURE: For some reason the resize script wasn't found\n\n\n"
		set exit_code 1
	}
	-re "($number): *uid=" {
		incr task_count
		exp_continue
	}
	-re "SLURM_NNODES=($number)" {
		set node_count $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
set task_target [expr $node_cnt + 1]
if {$task_count != $task_target} {
	send_user "\nFAILURE: Invalid task count ($task_count != $task_target)\n\n\n"
	set exit_code 1
}
if {$node_count != 1} {
	send_user "\nFAILURE: Invalid node count ($node_count != 1)\n\n\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSo far, so good...\n\n\n"
}

if {[wait_for_file $file_out2] != 0} {
	send_user "\nFAILURE: no output file2\n"
	exit 1
}
set node_count 0
spawn $bin_cat $file_out2
expect {
	-re "NumNodes=($number)" {
		incr node_count $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
if {$node_count != 3} {
	send_user "\nFAILURE: Invalid node count ($node_count != 3)\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out $file_out2
	send_user "\nSUCCESS\n"
}
exit $exit_code
