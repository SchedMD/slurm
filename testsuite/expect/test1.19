#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test srun stdout/err file name formatting (--output and --error
#          options with %j, %J, %n, %s and %t specifications).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "1.19"
set exit_code        0
set file_err_j       "test$test_id.j.%j.error"
set file_in          "test$test_id.input"
set file_out_J       "test$test_id.J.%J.output"
set file_out_n       "test$test_id.n.%n.output"
set file_out_s       "test$test_id.s.%s.output"
set file_out_t       "test$test_id.t.%t.output"
set file_out_u       "test$test_id.u.%u.output"
set file_err_u       "test$test_id.u.%u.error"
set user_name        ""
set job_id           0

print_header $test_id


if {[test_bluegene]} {
	# We never launch more than one task on emulated Bluegene
	set task_cnt 1
} elseif {[test_alps]} {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
} elseif {[test_launch_poe]} {
	send_user "\nWARNING: This test is incompatible with POE systems\n"
	exit $exit_code
} elseif {[test_serial]} {
	set task_cnt 1
} else {
	set task_cnt 5
}

if {[test_launch_poe]} {
	set node_name_env MP_I_UPMD_HOSTNAME
} else {
	set node_name_env SLURMD_NODENAME
}

#
# Gets current user
#
spawn $bin_id -un
expect {
	-re "($alpha_numeric_under)" {
		set user_name $expect_out(1,string)
	}
	eof {
		wait
	}
}

#
# Spawn a program that generates "task_id" (%t) in stdout file names
# and confirm they are created
#
for {set task_id 0} {$task_id < $task_cnt} {incr task_id} {
	set file_out_t_glob  "test$test_id.t.$task_id.output"
	exec $bin_rm -f $file_out_t_glob
}
set timeout $max_job_delay
set srun_pid [spawn $srun --output=$file_out_t -N1 -n$task_cnt -O -v -t1 $bin_id]
expect {
	-re "jobid ($number).*" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: job initiation failed\n"
	exit 1
}
set file_cnt 0
for {set task_id 0} {$task_id < $task_cnt} {incr task_id} {
	set file_out_t_glob  "test$test_id.t.$task_id.output"
	if {[wait_for_file $file_out_t_glob] != 0} {
		set exit_code 1
	} else {
		exec $bin_rm -f $file_out_t_glob
		incr file_cnt
	}
}
if {$file_cnt != $task_cnt} {
	send_user "\nFAILURE: file format of %t in stdout failed\n"
	set exit_code 1
}

#
# Spawn a shell via srun that includes "jobid" (%j) in stderr
# file name and confirm it is created
#
set job_id   0
set srun_exit 0
set srun_pid [spawn $srun --error=$file_err_j --output=/dev/null -N1 -n$task_cnt -O -v -t1 $bin_sleep aaa]
expect {
	-re "jobid ($number).*" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "exit code $number" {
		send_user "This error is expected, no worries\n"
		set srun_exit 1
		exp_continue;
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: job initiation failed\n"
	exit 1
}
if {$srun_exit == 0} {
	send_user "\nFAILURE: exit code failed to indicate an error\n"
	set exit_code 1
}

set file_err_j_glob  "test$test_id.j.$job_id.error"
if {[wait_for_file $file_err_j_glob] == 0} {
	exec $bin_rm -f $file_err_j_glob
} else {
	send_user "\nFAILURE: file format of %j in stderr failed\n"
	set exit_code 1
}

#
# Spawn a shell via srun that includes "job_id.step_id" (%J) in stdout
#  file name and confirm it is created
#
set job_id   0
set srun_pid [spawn $srun --output=$file_out_J -N1 -v -t1 $bin_printenv $node_name_env]
expect {
	-re "jobid ($number).*" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: job initiation failed\n"
	exit 1
}
set task_id  0
set file_out_J_glob  "test$test_id.J.$job_id.$task_id.output"
if {[wait_for_file $file_out_J_glob] != 0} {
	send_user "\nFAILURE: file format of %J in stdout failed\n"
	set exit_code 1
} else {
	exec $bin_rm -f $file_out_J_glob
}

#
# Spawn a shell via srun with the %u in stdout file name and confirm
# it is created
#
set job_id 0
set srun_pid [spawn $srun --output=$file_out_u -v sleep 10]
expect {
	-re "jobid ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun is not responding\n"
		slow_kill $srun_pid
		exit 1
	}
	eof {
		wait
	}
}

if {$job_id == 0} {
	send_user "\nFAILURE: srun did not submit job\n"
	exit 1
}

#
# Check that the correct files were created
#
set file_out_u_glob  "test$test_id.u.$user_name.output"

if {[wait_for_file $file_out_u_glob]==0} {
	exec $bin_rm -f $file_out_u_glob
} else {
	send_user "\nFAILURE: file format is not created correctly\n"
	set exit_code 1
}

#
# Spawn shell via srun with %u in the stderr file name and confirm
# it is created
#
set job_id 0
set srun_pid [spawn $srun --error=$file_err_u --output=/dev/null -v sleep aaa]
expect {
	-re "jobid ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "error" {
		send_user "\nDo not worry this error is expected\n"
		set srun_exit 1
		exp_continue;
	}
	timeout {
		send_user "\nFAILURE: srun is not responding\n"
		slow_kill $srun_pid
		exit 1
	}
	eof {
		wait
	}
}

if {$job_id == 0} {
	send_user "\nFAILURE: srun did not submit job\n"
	exit 1
}

#
# Check that the correct files where created
#
set file_err_u_glob  "test$test_id.u.$user_name.error"

if {[wait_for_file $file_err_u_glob]==0} {
	exec $bin_rm -f $file_err_u_glob
} else {
	send_user "\nFAILURE: file format is not created correctly\n"
	set exit_code 1
}

#
# Spawn a shell via srun that includes "node_id" (%n) in stdout
#  file name and confirm it is created
#
set node_id 0
set file_out_n_glob  "test$test_id.n.$node_id.output"
exec $bin_rm -f $file_out_n_glob

set job_id   0
set srun_pid [spawn $srun --output=$file_out_n -N1 -n$task_cnt -O -v -t1 $bin_printenv $node_name_env]
expect {
	-re "jobid ($number).*" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: job initiation failed\n"
	exit 1
}
set file_cnt 0
for {set node_id 0} {$node_id < 2} {incr node_id} {
	set file_out_n_glob  "test$test_id.n.$node_id.output"

	if {($node_id == 0) && ([wait_for_file $file_out_n_glob] != 0)} {
		send_user "\nFAILURE: Missing file $file_out_n_glob\n"
		set exit_code 1
	} else {
		exec $bin_sleep 1
	}
	if [file exists $file_out_n_glob] {
		exec $bin_rm -f $file_out_n_glob
		incr file_cnt
	}
}

if {$file_cnt != 1} {
	send_user "\nFAILURE: file format of %n in stdout failed\n"
	set exit_code 1
}

#
# Spawn a shell via srun that includes "step_id" (%s) in stdout
#  file name and confirm it is created. Use two step batch job.
#
exec $bin_rm -f $file_in
make_bash_script $file_in "
  $srun -n4 -O --output=$file_out_s $bin_printenv $node_name_env
  $srun -n4 -O --output=$file_out_s $bin_printenv $node_name_env
"

for {set step_id 0} {$step_id < 4} {incr step_id} {
	set file_out_s_glob  "test$test_id.s.$step_id.output"
	exec $bin_rm -f $file_out_s_glob
}

if { [test_bluegene] } {
	set node_cnt 32-2048
	set task_cnt 32
} elseif { [test_serial] } {
	set node_cnt 1-1
	set task_cnt 1
} elseif { [test_xcpu] } {
	set node_cnt 1-1
	set task_cnt 4
} else {
	set node_cnt 1-4
	set task_cnt 4
}

# Note: Task count is in the script for each srun
#	There is not oversubscribe option for sbatch.
set job_id   0
set srun_pid [spawn $sbatch --output=/dev/null -N$node_cnt -t1 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: job initiation failed\n"
	exit 1
} else {
	if {[wait_for_job $job_id DONE] != 0} {
		send_user "\nFAILURE: error completing job $job_id\n"
		cancel_job $job_id
		set exit_code 1
	}
}
exec $bin_rm -f $file_in

set file_cnt 0
for {set step_id 0} {$step_id < 3} {incr step_id} {
	set file_out_s_glob  "test$test_id.s.$step_id.output"

	if {($step_id < 2) && ([wait_for_file $file_out_s_glob] != 0)} {
		send_user "\nFAILURE: Missing file $file_out_s_glob\n"
		set exit_code 1
	} else {
		exec $bin_sleep 1
	}
	if [file exists $file_out_s_glob] {
		exec $bin_rm -f $file_out_s_glob
		incr file_cnt
	}
}

if {$file_cnt != 2} {
	send_user "\nFAILURE: file format of %s in stdout failed($file_cnt)\n"
	set exit_code 1
}

#
# Post-processing
#
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
