#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Confirm that sbatch sets appropriate time limit (--time
#          option)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "17.8"
set exit_code   0
set file_in     "test$test_id.input"
set time_set    13
set time_get    0

print_header $test_id

#
# We must be SlurmUser or root in order to change the partition MaxTime limit,
# otherwise this test may fail.
#
if {[test_super_user] == 0} {
	log_warn "You must be SlurmUser or root to run this test."
	exit 0
}

set default_part [default_partition]
if { $default_part == "" } {
	log_error "Unable to get the default partition."
	exit 1
}

#
# Ensure that MaxTime is UNLIMITED so this test won't fail due to trying to set
# time limits greater than MaxTime.
#
spawn $scontrol update partitionname=$default_part MaxTime=-1
expect {
	timeout {
		log_error "scontrol not responding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if { $exit_code == 1 } {
	exit $exit_code
}
set maxtime [get_partition_maximum_time_limit $default_part]
if { $maxtime != -1 } {
	log_error "Unable to update partition MaxTime"
	exit 1
}

#
# Delete left-over stdin/out/err files
# Build stdin file
#
exec $bin_rm -f $file_in
make_bash_script $file_in "
  $bin_sleep 60
"

#
# Submit a slurm job that will execute 'sleep'
# Use scontrol to confirm time limit
# Time format is "minutes"
#
set job_id 0
spawn $sbatch -N1 --output=none --error=none --time=$time_set $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if { $job_id == 0 } {
	send_user "\nFAILURE: failed to submit job\n"
	exit 1
}

spawn $scontrol show job $job_id
expect {
	-re "TimeLimit=($number):($number):" {
		set time_get [expr $expect_out(1,string) * 60 + $expect_out(2,string)]
		exp_continue
	}
	eof {
		wait
	}
}
if {$time_set != $time_get} {
	send_user "\nFAILURE: sbatch failed to set time limit ($time_set != $time_get)\n"
	set exit_code 1
}
cancel_job $job_id

#
# Submit another slurm job that will execute 'sleep'
# Use scontrol to confirm time limit
# Time format is "hours:minutes:seconds"
#
set job_id 0
set time_get 0
set time_set "2:01:00"
spawn $sbatch -N1 --output=none --error=none --time=$time_set $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "time limit exceeds" {
		send_user "\nWARNING: unable to fully test time limits\n"
		exit $exit_code
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if { $job_id == 0 } {
	send_user "\nFAILURE: failed to submit job\n"
	exit 1
}

spawn $scontrol show job $job_id
expect {
	-re "TimeLimit=($number):($number):" {
		set time_get [expr $expect_out(1,string) * 60 + $expect_out(2,string)]
		exp_continue
	}
	eof {
		wait
	}
}
if {$time_get != 121} {
	send_user "\nFAILURE: sbatch failed to set time limit ($time_get != 121)\n"
	set exit_code 1
}
cancel_job $job_id

#
# Submit another slurm job that will execute 'sleep'
# Use scontrol to confirm time limit
# Time format is "days-hours"
#
set job_id 0
set time_get 0
set time_set "1-1"
spawn $sbatch -N1 --output=none --error=none --time=$time_set $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if { $job_id == 0 } {
	send_user "\nFAILURE: failed to submit job\n"
	exit 1
}

spawn $scontrol show job $job_id
expect {
	-re "TimeLimit=($number)-($number):($number):" {
		set time_get [expr $expect_out(1,string) * 1440 + $expect_out(2,string) * 60 + $expect_out(3,string)]
		exp_continue
	}
	eof {
		wait
	}
}
if {$time_get != 1500} {
	send_user "\nFAILURE: sbatch failed to set time limit ($time_get != 1500)\n"
	set exit_code 1
}
cancel_job $job_id

#
# Restore partition MaxTime.
# reconfigure will set exit_code and log any errors if it fails.
#
reconfigure

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
