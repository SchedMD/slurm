############################################################################
# Purpose: Test of SLURM functionality
#          to be called from test3.11
#          Make a list of lists with a series of parameters to test.
#          All the tests in goodtests should pass, all those in badtests
#          should fail.
#
############################################################################
# Copyright (C) 2009 Lawrence Livermore National Security
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Dave Bremer <dbremer@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
#
# This file is part of SLURM, a resource management program.
# For details, see <http://www.schedmd.com/slurmdocs/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################

proc inc3_11_1 {} {
	global def_node user_name def_partition exit_code cluster_cpus res_name

	set num_nodes [available_nodes $def_partition]
	
	# First setting core_res_num greater than cores per node (assuming symmetric nodes)
	set core_res_num [ expr ($cluster_cpus / $num_nodes) + 1 ]
	
	# TEST 1
	# Make a list of lists with a series of parameters to test.  All the tests
	# in goodtests should pass, all those in badtests should fail.
	#
	send_user "\n+++++ STARTING TEST 1 +++++\n"
	set badtests "
	{}
	{Duration=5   Nodes=$def_node   User=$user_name Flags=ignore_jobs}
	{StartTime=now   Nodes=$def_node   User=$user_name Flags=ignore_jobs}
	{StartTime=midnight   Duration=600   User=$user_name Flags=ignore_jobs}
	{StartTime=now   Duration=5   Nodes=ALL Flags=ignore_jobs}
	{StartTime=now   Duration=5   NodeCnt=  Nodes=   User=$user_name Flags=ignore_jobs}
	{StartTime=now   Duration=5   NodeCnt=1,A}
	{StartTime=now   Duration=5   User=$user_name Flags=ignore_jobs}
	{StartTime=blah   Duration=5   Nodes=$def_node   User=$user_name Flags=ignore_jobs}
	{StartTime=now   Duration=foo   Nodes=$def_node   User=$user_name Flags=ignore_jobs}
	{StartTime=now   Duration=5   Nodes=$def_node   User=$user_name  PartitionName=badpartname Flags=ignore_jobs}
	{StartTime=now   Duration=5   Nodes=$def_node   User=$user_name  Flags=badtype,ignore_jobs}
	{StartTime=now+10minutes   EndTime=now   Nodes=$def_node   User=$user_name Flags=ignore_jobs}
	{StartTime=now   Duration=5   Nodes=$def_node   User=$user_name Licenses=DUMMY_FOR_TESTING Flags=ignore_jobs}
	{StartTime=now   Duration=5   NodeCnt=1 CoreCnt=$core_res_num  User=$user_name}
"
	#{StartTime=now   Duration=5   Nodes=$def_node   Account=badaccountname}

	foreach test $badtests {
		set ret_code [create_res $test 1]
		if {$ret_code == 0} {
			send_user "\n\033\[31mFAILURE: Reservation $test did not fail but should have\033\[m\n"
			delete_res $res_name
			exit 1
		} else {
			send_user "\033\[32mExpected error.  You can turn that frown upside-down.\033\[m\n"
		}
	}

	if {[test_super_user] == 0} {
		send_user "\n\033\[34mWARNING: can not test more unless SlurmUser or root\033\[m\n"
		exit $exit_code
	}

	set core_res_num [ expr $cluster_cpus / 2 ]
	set goodtests "
	{StartTime=now   Duration=5   Nodes=$def_node   User=$user_name Flags=ignore_jobs}
	{StartTime=now+5minutes   EndTime=now+10minutes   Nodes=$def_node   User=$user_name Flags=ignore_jobs}
	{StartTime=midnight   Duration=600   Nodes=$def_node   User=$user_name Flags=ignore_jobs}
	{StartTime=now   Duration=5   Nodes=ALL   User=$user_name Flags=ignore_jobs}
	{StartTime=now   Duration=5   NodeCnt=1   User=$user_name Flags=ignore_jobs}
	{StartTime=now   Duration=5   Nodes=$def_node   User=$user_name  PartitionName=$def_partition Flags=ignore_jobs}
	{StartTime=now   Duration=5   Nodes=$def_node   User=$user_name  Flags=Maint Flags=ignore_jobs}
	{StartTime=now   Duration=5   NodeCnt=$num_nodes CoreCnt=$core_res_num  User=$user_name}
"
	#{StartTime=now   Duration=5   NodeCnt=10 CoreCnt=11  User=$user_name}

	foreach test $goodtests {
		set ret_code [create_res $test 0]
		if {$ret_code != 0} {
			send_user "\n\033\[31mFAILURE: Unable to create a valid reservation\033\[m\n"
			exit $ret_code
		} else {
			send_user "\033\[32mReservation created as expected.\033\[m\n"
		}
		set ret_code [delete_res $res_name]
		if {$ret_code != 0} {
			send_user "\n\033\[31mFAILURE: Unable to delete a reservation\033\[m\n"
			exit $ret_code
		} else {
			send_user "\033\[32mReservation deleted as expected.\033\[m\n"
		}
	}
}
