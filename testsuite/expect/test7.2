#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of PMI functions available via API library. Tests
#          --pmi-threads option in srun command.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2005-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "7.2"
set exit_code        0
set file_prog_get    "test$test_id.prog"

print_header $test_id

# PMI library not in Cray RPM
if {[test_cray]} {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
}

#
# Delete left-over program and rebuild it.
#
exec $bin_rm -f $file_prog_get
if {![test_aix]} {
	exec $bin_cc ${file_prog_get}.c -g -pthread -o $file_prog_get -I${slurm_dir}/include -L${slurm_dir}/lib64 -Wl,--rpath=${slurm_dir}/lib64 -L${slurm_dir}/lib -Wl,--rpath=${slurm_dir}/lib -lpmi
} else {
	exec $bin_cc ${file_prog_get}.c -Wl,-brtl -g -pthread -o $file_prog_get -I${slurm_dir}/include -L${slurm_dir}/lib -lpmi
}
exec $bin_chmod 700 $file_prog_get

#
# Run job stand-alone to validate basic operation with 1 task and no srun
#
send_user "\nRunning PMI test stand alone (without srun)\n"
set prog_pid [spawn ./$file_prog_get]
expect {
	-re "(FAILURE|error)" {
		send_user "\nFAILURE: some error occurred\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $prog_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {[test_alps]} {
	send_user "\nWARNING: Additional portions of this test are incompatible with Cray systems\n"
	exit $exit_code
} elseif {[test_bluegene]} {
	send_user "\nWARNING: This test is incompatible with BlueGene systems\n"
	exit $exit_code
} elseif {[test_launch_poe]} {
	send_user "\nWARNING: Additional portions of this test are incompatible using poe to launch tasks\n"
	exit $exit_code
}

if { $exit_code == 0 } {
	send_user "\n\nSo far, so good\nNow run PMI test under srun\n"
} else {
	exit $exit_code
}

#
# Spawn a job to test PMI functionality
#
set timeout $max_job_delay
if { [test_bluegene] } {
	if { [test_emulated] } {
		set node_cnt 1
		set task_cnt 1
	} else {
		set node_cnt 1-1024
		set task_cnt 8
	}
} elseif {[test_xcpu] } {
	set node_cnt 1-1
	set task_cnt 8

} elseif {[test_serial]} {
	set node_cnt 1
	set task_cnt 1

} else {
	set node_cnt 1-4
	set task_cnt 8
}


# Test uses srun based task launch
# Adjust time limits as needed for large task counts */
#                   times are here  vv
set timeout [expr $max_job_delay +  60]
set srun_pid [spawn $srun -l -N$node_cnt -n$task_cnt -O -t1 --threads=1 ./$file_prog_get]
expect {
	-re "(FAILURE|error)" {
		send_user "\nFAILURE: some error occurred\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
        exec $bin_rm -f $file_prog_get

}
exit $exit_code
