#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test of "scontrol notify <jobid> <message>"
############################################################################
# Copyright (C) 2007 The Regents of the University of California.
# Copyright (C) 2008-2010 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set authorized     1
set exit_code      0
set file_err       "test$test_id.error"
set file_in        "test$test_id.input"
set file_out       "test$test_id.output"
set job_id         0

#
# Start a batch job
#
exec rm -f $file_in $file_out $file_err
make_bash_script $file_in "$bin_sleep 120"
spawn $sbatch --output=$file_out --error=$file_err -t1 ./$file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	fail "Batch submit failure"
}
if {[wait_for_job $job_id "RUNNING"] != 0} {
	cancel_job $job_id
	fail "Waiting for job to start"
}
# Add delay to make sure job step fully starts
exec $bin_sleep 2
#
# Send the batch job a message
#
spawn $scontrol notify $job_id TEST_NOTIFY
expect {
	-re "Invalid user id" {
		set authorized 0
		exp_continue
	}
	eof {
		wait
	}
}
if {$authorized == 0} {
	cancel_job $job_id
	exec rm -f $file_in $file_out $file_err
	skip "You are not authorized to run this test"
}
cancel_job $job_id

#
# Test stderr file
#
if {[wait_for_file $file_err] == 0} {
	set got_message 0
	spawn cat $file_err
	expect {
		-re "TEST_NOTIFY" {
			set got_message 1
			exp_continue
		}
		eof {
			wait
		}
	}
	if {$got_message != 1} {
		log_error "Message not received"
		set exit_code 1
	}
} else {
	set exit_code 1
}
if {$exit_code == 0} {
	log_debug "So far, so good"
	exec rm -f $file_in $file_out $file_err
} else {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}

#
# Start a test program
#
set job_id         0
set timeout $max_job_delay
set srun_pid [spawn $srun -N1 -t1 -v $bin_sleep 10]
set srun_spawn_id $spawn_id
expect {
	-re "jobid ($number)" {
		set job_id $expect_out(1,string)
	}
	timeout {
		slow_kill $srun_pid
		fail "srun not responding"
	}
}
if {$job_id == 0} {
	fail "srun failed to create job"
}

#
# Send the program a message
#
spawn $scontrol notify $job_id TEST_NOTIFY
expect {
	-re "Invalid user id" {
		set authorized 0
		exp_continue
	}
	eof {
		wait
	}
}
if {$authorized == 0} {
	cancel_job $job_id
	skip "You are not authorized to run this test"
}

#
# Look for the message
#
set matches 0
set spawn_id $srun_spawn_id
expect {
	-re "TEST_NOTIFY" {
		set matches 1
		exp_continue
	}
	timeout {
		slow_kill $srun_pid
		fail "srun not responding"
	}
	eof {
		wait
	}
}
if {$matches == 0} {
	fail "Notification not received by srun"
}

if {[cancel_job $job_id] != 0} {
	fail "Unable to cancel job ($job_id)"
}
if {$exit_code != 0} {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}
