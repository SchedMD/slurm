#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test scancel of multiple job steps (job.step specification).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory
#          named test6.16.input
############################################################################
# Copyright (C) 2016 SchedMD LLC
# Written by Alejandro Sanchez <alex@schedmd.com>
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "6.16"
set exit_code   0
set file_in     "test$test_id.input"
set job_id      0

print_header $test_id

#
# Build input script file
#
make_bash_script $file_in "
  $srun -N1 -n1 --mem=10 $bin_sleep $max_job_delay &
  $srun -N1 -n1 --mem=10 $bin_sleep $max_job_delay &
  $srun -N1 -n1 --mem=10 $bin_sleep $max_job_delay
"

#
# Spawn sbatch job
#
set sbatch_pid [spawn $sbatch -n1 --mem=30 --output=/dev/null --error=/dev/null --job-name=job.$test_id -t5 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $sbatch_pid
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

if {[wait_for_job $job_id RUNNING] != 0} {
	send_user "\nFAILURE: error starting job $job_id\n"
	cancel_job $job_id
	exit 1
}
# Wait for job steps to begin
exec $bin_sleep 3

#
# Kill single job steps individually
#
set matches 0
spawn $scancel --interactive $job_id.0 $job_id.1 $job_id.2
expect {
	-re "Cancel step_id=$job_id.0*\? " {
		send "y\r"
		incr matches
		exp_continue
	}
	-re "Cancel step_id=$job_id.1*\? " {
		send "y\r"
		incr matches
		exp_continue
	}
	-re "Cancel step_id=$job_id.2*\? " {
		send "y\r"
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 3} {
	send_user "\nFAILURE: scancel with multiple step_id failed\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
