#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          bkill wrapper test
############################################################################
# Copyright (C) 2011-2016 SchedMD LLC
# Written by Alejandro Sanchez <alex@schedmd.com>
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set file_in     "test$test_id.input"
set job_id      0
set exit_code   0

if {[file executable $sbatch] == 0} {
	skip "$sbatch does not exist"
}

if {[file executable $bkill] == 0} {
	skip "$bkill does not exist"
}

if {[file executable $scontrol] == 0} {
	skip "$scontrol does not exist"
}

#
# Submit a slurm job
#
exec $bin_rm -f $file_in
make_bash_script $file_in "
  $bin_sleep 20
"

set job_submitted 0
spawn $sbatch -N1 -o /dev/null $file_in
expect {
        -re "Submitted batch job ($number)" {
                set job_id $expect_out(1,string)
		set job_submitted 1
                exp_continue
        }
        timeout {
                log_error "sbatch not responding"
                set exit_code 1
                exp_continue
        }
        eof {
                wait
        }
}
if { $job_id == 0 } {
        fail "Failed to submit job"
}

if {$job_submitted == 1} {
	#
	# Test bkill $job_id
	#
	set job_sent_kill 0
	spawn $bkill $job_id
	expect {
		-re "Job <$job_id> is being terminated" {
			set job_sent_kill 1
			exp_continue
		}
		timeout {
			fail "bkill not responding"
		}
		eof {
			wait
		}
	}
} else {
	fail "Unable to submit a test job through sbatch"
}

if {$job_sent_kill == 1} {
	#
	# Test job state is now CANCELLED
	#
	set state_match 0
	set cycle_count 8
	for {set inx 0} {$inx < $cycle_count} {incr inx} {
        	spawn $scontrol show job $job_id
        	expect {
        	        -re "JobState=CANCELLED" {
        	                incr state_match
				set exit_code 0
				break
        	        }
			-re "JobState=" {
				sleep 2
				set exit_code 1
				exp_continue
			}
        	        timeout {
        	                log_error "scontrol not responding"
        	                set exit_code 1
        	        }
        	        eof {
        	                wait
        	        }
        	}
	}
	if {$exit_code == 1} {
		if {$cycle_count == 8} {
			fail "Job not switched to CANCELLED"
		}
	}
} else {
	cancel_job $job_id
	fail "Unable bkill $job_id"
}

if {$state_match != 1} {
	fail "Job should be CANCELLED, but is not"
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
} else {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}
