#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of increasing job sizes
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "1.30"
set exit_code   0
set error 0

print_header $test_id

if { [test_xcpu] } {
	send_user "\nWARNING: This test is incompatible with XCPU systems\n"
	exit 0
}

# NOTE: One CPU per task emulation is not scalable to do via srun
# so we use "--oversubscribe" as a no-op for this argument
if { [test_bluegene] } {
	set srun_opts "--oversubscribe"
} else {
	set srun_opts "-c1"
}
if { [test_front_end] } {
	set max_node_cnt 2
} else {
	set max_node_cnt 1024
}
if { [test_launch_poe] } {
	set env_name "MP_I_UPMD_HOSTNAME"
} else {
	set env_name "SLURMD_NODENAME"
}

#
# Spawn a srun immediate jobs with ever larger node counts
#
set timeout $max_job_delay
for {set node_cnt 1} {$node_cnt < $max_node_cnt} {set node_cnt [expr $node_cnt * 2]} {
	set srun_pid [spawn $srun --immediate -N$node_cnt $srun_opts -t2 $bin_printenv $env_name]
	expect {
		-re "Immediate execution impossible" {
			send_user "This error is expected, no worries\n"
			set node_cnt $max_node_cnt
			set error 0
			exp_continue
		}
		-re "Unable to contact" {
			send_user "\nFAILURE: slurm appears to be down\n"
			set exit_code 1
			exp_continue
		}
		-re "Unable to allocate resources" {
			send_user "This error is expected, no worries\n"
			set node_cnt $max_node_cnt
			set error 0
			exp_continue
		}
		-re "Too many open files" {
			send_user "This error is expected, no worries\n"
			set node_cnt $max_node_cnt
			exp_continue
		}
		-re "error" {
			set error 1
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: srun not responding\n"
			slow_kill $srun_pid
			set exit_code 1
		}
		eof {
			wait
		}
	}
}

if {$error == 1} {
	send_user "\nFAILURE: some error happened\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
