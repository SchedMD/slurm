#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Check squeue formating options (--noheader, --format and --step
#          options and SQUEUE_FORMAT environment variable).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id      "5.4"
set exit_code    0
set file_in      "test$test_id.input"
set job_id1      0
set job_id2      0

print_header $test_id

if {[test_launch_poe]} {
	set step_id 1
} else {
	set step_id 0
}

#
# Delete left-over input script
# Build input script file
#
make_bash_script $file_in "$srun $bin_sleep 90"

#
# Submit a couple of job so we have something to look at
#
set sbatch_pid [spawn $sbatch --output=/dev/null --error=/dev/null -t1 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $sbatch_pid
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: srun job submit failure\n"
	exit 1
}

set sbatch_pid [spawn $sbatch --output=/dev/null --error=/dev/null --hold -t1 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $sbatch_pid
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id2 == 0} {
        send_user "\nFAILURE: srun job submit failure\n"
	exit 1
}

if {[wait_for_job $job_id1 RUNNING] != 0} {
	send_user "\nFAILURE to start job $job_id1\n"
	cancel_job $job_id1
	cancel_job $job_id2
	exit 1
}
exec $bin_rm -f $file_in

#
# Check the squeue noheader output
#

set have_header 0
spawn $squeue --noheader
expect {
	-re "PARTITION" {
		set have_header 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		cancel_job $job_id2
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$have_header > 0} {
	send_user "\nFAILURE: squeue noheader error\n"
	set exit_code 1
}

#
# Check the squeue format output via command line option
#

# For some reason, quoting the format value breaks expect,
#  but this passes the entire format in a single argv entry
set format "--format=jid=%i uid=%U"
set have_job_ids 0
spawn $squeue $format
expect {
	-re "($end_of_line)jid=($number) uid=($number)" {
		if {$expect_out(2,string) == $job_id1} {
			incr have_job_ids
		}
		if {$expect_out(2,string) == $job_id2} {
			incr have_job_ids
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$have_job_ids == 0} {
	send_user "\nFAILURE: squeue format error\n"
	set exit_code 1
}
if {$have_job_ids == 1} {
	send_user "\nFAILURE: squeue found only 1 of 2 jobs\n"
	set exit_code 1
}

#
# Check the squeue format output via SQUEUE_FORMAT environment
# variable
#

set env(SQUEUE_FORMAT) "JID=%i UID=%U"
set have_job_ids 0
spawn $squeue
expect {
	-re "($end_of_line)JID=($number) UID=($number)" {
		if {$expect_out(2,string) == $job_id1} {
			incr have_job_ids
		}
		if {$expect_out(2,string) == $job_id2} {
			incr have_job_ids
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
unset env(SQUEUE_FORMAT)

if {$have_job_ids == 0} {
	send_user "\nFAILURE: squeue format error\n"
	set exit_code 1
}
if {$have_job_ids == 1} {
	send_user "\nFAILURE: squeue found only 1 of 2 jobs\n"
	set exit_code 1
}

#
# Wait for the job step to appear
#

spawn $squeue --iterate=5 --steps
set iteration  0
set step_found 0
expect {
	-re "($end_of_line) *($job_id1.$step_id) " {
		set step_found 1
		set squeue_pid [exp_pid]
		exec $bin_kill -TERM $squeue_pid
		exp_continue
	}
	-re "PARTITION" {
		incr iteration
		if {$iteration >= 3} {
			set squeue_pid [exp_pid]
			exec $bin_kill -TERM $squeue_pid
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {[test_alps] == 0 && $step_found == 0} {
	send_user "\nFAILURE: squeue step format error\n"
	set exit_code 1
}

if {[cancel_job $job_id1] != 0} {
	set exit_code 1
}
if {[cancel_job $job_id2] != 0} {
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code

