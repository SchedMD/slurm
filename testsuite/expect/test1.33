#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of srun exit code reporting
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id        "1.33"
set exit_code      0
set exit_script    "./test$test_id.exit.bash"
set test_script    "./test$test_id.bash"
set launch_poe     0

print_header $test_id

if {[test_bluegene]} {
	send_user "\nWARNING: This test is incompatible with Bluegene systems\n"
	exit $exit_code
} elseif {[test_alps]} {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
} elseif {[test_launch_poe]} {
	set launch_poe  1
	set task_cnt	1
	set sum1	10
	set key2	"srun_exit_code_10"
} elseif {[test_serial]} {
	set task_cnt	1
	set sum1	10
	set key2	"srun_exit_code_10"
} else {
	set task_cnt	2
	set sum1	21
	set key2	"srun_exit_code_11"
}

#
# Delete left-over scripts and build new ones
#
# POE BUG: If the application exits immediately then pmdv12 hangs until
# slurm kills it with a timeout, thus the sleep below is required:
# F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN TTY   TIME CMD
# 4 R  1001 17141 17137 99  80   0 - 33410 ?    ?  00:00:02 pmdv12
# 0 Z  1001 17152 17141  0  80   0 -     0 exit ?  00:00:00 test1.33.exit.b <defunct>
#
make_bash_script $exit_script "
  $bin_sleep 2
  RC=`expr \$SLURM_PROCID + 10`
  exit \$RC
"

make_bash_script $test_script "
  $srun -N1 -n $task_cnt -O $exit_script
  echo srun_exit_code_\$?
"

#
# Spawn program and check for exit code messages from srun
#
set sum 0
set myexit 0
set timeout $max_job_delay
set srun_pid [spawn $srun -N1 -n $task_cnt -O $exit_script]
expect {
	-re "exit code ($number)" {
		send_user "This error is expected, no worries\n"
		incr sum $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		if { $launch_poe } {
			# since with poe we can only grab the poe's return code
			# we check here to make sure it is the correct number
			catch wait result
			set rc [lindex $result 3]
			incr sum $rc
			send_user "\npoe return code is $rc\n"
		} else {
			wait
		}
	}
}

if {$sum != $sum1} {
	send_user "\nFAILURE: srun failed to report exit code ($sum != $sum1) $myexit\n"
	set exit_code 1
}

#
# Spawn program to check the exit code of srun itself
#
set matches 0
spawn $test_script
expect {
	-re "$key2" {
		send_user "Above error are expected, no worries\n"
		incr matches
		exp_continue
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: srun's exit code is bad\n"
	set exit_code 1
}

#
# Post-processing
#
if {$exit_code == 0} {
	exec $bin_rm -f $exit_script $test_script
	send_user "\nSUCCESS\n"
}
exit $exit_code
