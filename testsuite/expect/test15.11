#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of --nice and --job-name options.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "15.11"
set exit_code   0
set job_id      0
set job_name    "jobname$test_id"
set name_read   ""

print_header $test_id

if {[test_wiki_sched] == 1} {
	send_user "\nWARNING: not compatable with sched/wiki (Maui)\n"
	send_user "         or sched/wiki2 (Moab) schedulers\n"
	exit $exit_code
}
set prio_type [priority_type]
if {[string compare $prio_type "multifactor"] == 0} {
	send_user "\nWARNING: not compatable with priority/multifactor\n"
	exit $exit_code
}

#
# Test setting job's name and get priority
#
set priority1  0
set matches    0
set timeout $max_job_delay
set salloc_pid [spawn $salloc -t1 --job-name=$job_name $bin_bash]
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		send "$scontrol show job $job_id\r"
		exp_continue
	}
	-re "Name=$job_name" {
		set matches 1
		exp_continue
	}
	-re "Priority=($number)" {
		set priority1 $expect_out(1,string)
		send "exit\r"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: salloc failed to initiate job\n"
	set exit_code 1
}
if {$matches == 0} {
	send_user "\nFAILURE: failed to set job name\n"
	set exit_code 1
}

#
# Test setting job's name and get priority
#
set job_id     0
set priority2  0
set salloc_pid [spawn $salloc -t1 --nice=1000 $bin_bash]
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		send "$scontrol show job $job_id\r"
		exp_continue
	}
	-re "Priority=($number)" {
		set priority2 $expect_out(1,string)
		send "exit\r"
		exp_continue
        }
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
set delta_prio [expr $priority1 - $priority2]
if {$delta_prio < 950} {
	send_user "\nFAILURE: failed to process nice option\n"
	set exit_code 1
}


if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
