#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of --deadline option and time limit partition
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2015 CEA/DAM/DIF
# Written by Aline Roy <aline.roy@cea.fr>
#
# This file is part of SLURM, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id        "17.55"
set job_id	   0
set authorized     1
set exit_code      0
set part_name      "QA_TEST"
set file_in        "test$test_id.input"

print_header $test_id

if {[test_super_user] == 0} {
	send_user "\nWARNING: can not test more unless SlurmUser or root\n"
	exit $exit_code
}

#
# Confirm the partition name does not already exist
#
set found -1
spawn $scontrol -a show part $part_name
expect {
	-re "not found" {
		send_user "This error was expected, no worries\n"
		set found 0
		exp_continue
	}
	-re "PartitionName" {
		set found 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$found == -1} {
	send_user "\nFAILURE: scontrol output format error\n"
	exit 1
}
if {$found == 1} {
	send_user "\nFAILURE: partition $part_name already exists\n"
	exit 1
}

#
# Identify usable nodes in default partition
#
set def_node [get_idle_node_in_part [default_partition]]
if {[string compare $def_node ""] == 0} {
	send_user "\nFAILURE:default partition seems to have no nodes\n"
	exit 1
}

#
# Create a new partition
#
spawn $scontrol create PartitionName=$part_name Nodes=$def_node MaxTime=30
expect {
	-re "error" {
		send_user "\nFAILURE: something bad happened on partition create\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Confirm the partition now exists
#
set allow  0
set found -1
spawn $scontrol show part $part_name
expect {
	-re "not found" {
		set found 0
		exp_continue
	}
	-re "PartitionName" {
		set found 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$found != 1} {
	send_user "\nFAILURE: partition not created\n"
	exit 1
}

set found 0

# Check EnforcePartLimits value
set enforcepartlimits [test_enforce_part_limits]
send_user "\nEnforcePartLimits=$enforcepartlimits\n\n"

#
# Run a job in this new partition and validate the time limit
#
exec $bin_rm -f $file_in
make_bash_script $file_in "$bin_sleep 5"

set srun_pid [spawn $sbatch --output=/dev/null --error=/dev/null -t100 --deadline now+3hour -p $part_name $file_in]

if {[string compare $enforcepartlimits "NO"] == 0} {
	expect {
		-re "Submitted batch job ($number)" {
			set job_id $expect_out(1,string)
			set exit_code 0
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: sbatch not responding\n"
			set exit_code 1
			exp_continue
		}
		eof {
			wait
		}
	}

	#
	# verify time limit
	#
	sleep 5
	set matches 0
	spawn $scontrol show job $job_id
	expect {
		-re "Reason=PartitionTimeLimit" {
			incr matches
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			set exit_code 1
			exp_continue
		}
		eof {
			wait
		}
	}
	if {$matches != 1} {
		send_user "\nFAILURE: partition time limit not used \n"
		set exit_code 1
	}
} else {
	#
        # Job should be rejected at submit time
        #
        expect {
                -re "Requested time limit is invalid (missing or exceeds some limit)" {
                        set exit_code 0
                        exp_continue
                }
                -re "unrecognized option '--deadline'" {
                        set exit_code 1
                        exp_continue
                }
                timeout {
                        send_user "\nFAILURE: sbatch not responding\n"
                        set exit_code 1
                }
                eof {
                        wait
                }
        }
}

cancel_job $job_id

#
# Now delete the partition
#
spawn $scontrol delete PartitionName=$part_name
expect {
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Confirm the partition is now gone
#
set found -1
spawn $scontrol show part $part_name
expect {
	-re "not found" {
		send_user "This error was expected, no worries\n"
		set found 0
		exp_continue
	}
	-re "PartitionName" {
		set found 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$found != 0} {
	send_user "\nFAILURE: partition not deleted\n"
	exit 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
