#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test exclusive resource allocation for a step (--exclusive option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://www.schedmd.com/slurmdocs/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id          "1.14"
set exit_code        0
set file_in         "test$test_id.input"
set file_out        "test$test_id.output"
set job_id           0
set sleep_secs       10


print_header $test_id

if {[test_front_end]} {
        send_user "\nWARNING: This test is incompatible with front-end systems\n"
        exit $exit_code
}

if {[test_launch_poe]} {
	set node_name_env MP_I_UPMD_HOSTNAME
} else {
	set node_name_env SLURMD_NODENAME
}

#
# Delete left-over input script
# Build input script file
# Run one more step than allocated CPUs and make sure it waits
# The "sleep 2" is meant to insure the earlier job steps start first
#
exec $bin_rm -f $file_in $file_out
make_bash_script $file_in "
  echo tasks_per_node=\$SLURM_TASKS_PER_NODE
  inx=0
  while \[ \$inx -lt \$SLURM_TASKS_PER_NODE \]
  do
    $srun --exclusive -n1 sleep $sleep_secs &
    inx=\$((inx+1))
  done
  $bin_sleep 2
  $srun -v --exclusive -n1 $scontrol show steps &
  wait
"

#
# Spawn a job via sbatch
#
spawn $sbatch -N1 -t1 --output=$file_out $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if { $job_id == 0 } {
	send_user "\nFAILURE: failed to submit job\n"
	exit 1
}

#
# Wait for job to complete
#
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job to complete\n"
	cancel_job $job_id
	set exit_code 1
}

#
# Check for desired output
#
if {[wait_for_file $file_out] != 0} {
	send_user "\nFAILURE: Output file $file_out is missing\n"
	exit 1
}
set matches 0
spawn $bin_cat $file_out
expect {
	-re "StepId=$job_id" {
		incr matches
		exp_continue
	}
	eof {
		wait
	}
}

if { $matches != 1 } {
	send_user "\nFAILURE: Problem with exclusive resource allocation "
	send_user "for step ($matches)\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSo far, so good. Trying with --imediate option\n\n"
} else {
	exit $exit_code
}

#
# Delete left-over input script
# Build another input script file
# Run one more step than allocated CPUs with immediate option and make aborts
# The "sleep 2" is meant to insure the earlier job steps start first
#
exec $bin_rm -f $file_in $file_out
make_bash_script $file_in "
  inx=0
  while \[ \$inx -lt \$SLURM_TASKS_PER_NODE \]
  do
    $srun --exclusive -n1 sleep $sleep_secs &
    inx=\$((inx+1))
  done
  $bin_sleep 2
  $srun -v --exclusive -n1 --immediate $scontrol show steps &
  wait
"

#
# Spawn a job via sbatch
#
spawn $sbatch -N1 -t1 --output=$file_out $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}
if { $job_id == 0 } {
	send_user "\nFAILURE: failed to submit job\n"
	exit 1
}

#
# Wait for job to complete
#
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job to complete\n"
	cancel_job $job_id
	set exit_code 1
}

#
# Check for desired output
#
if {[wait_for_file $file_out] != 0} {
	send_user "\nFAILURE: Output file $file_out is missing\n"
	exit 1
}
set matches 0
spawn $bin_cat $file_out
expect {
	-re "StepId=$job_id" {
		send_user "\nFAILURE: Problem --exclusive and --immediate option for step\n"
		set exit_code 1
		exp_continue
	}
	-re "Unable to create job step" {
		send_user "This error was expected, no worries\n"
		incr matches
		exp_continue
	}
	eof {
		wait
	}
}

if { $matches != 1 } {
	send_user "\nFAILURE: Problem --exclusive and --immediate option for step ($matches)\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out
	send_user "\nSUCCESS\n"
}
exit $exit_code
