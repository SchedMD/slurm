#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of srun --disbale-status/-X option, SIGINT to be sent to tasks.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2007 The Regents of the University of California.
# Copyright (C) 2008-2010 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "1.63"
set exit_code   0
set file_prog   "test$test_id.prog"

print_header $test_id

if { [test_xcpu] } {
	send_user "\nWARNING: This test is incompatible with XCPU systems\n"
	exit 0
} elseif {[test_alps]} {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
}

#
# Delete left-over programs and rebuild them.
# We use our own program to get ulimit values since the output
# of the ulimit program is inconsistent across systems.
#
exec $bin_rm -f $file_prog
exec $bin_cc -O ${file_prog}.c -o $file_prog
exec $bin_chmod 700 $file_prog

#
# Spawn initial program via srun and use SIGINT to status
#
set timeout $max_job_delay
set match_run   0
set match_sig   0
set match_abort 0
set job_id  0
set srun_pid [spawn $srun -v -N1 -t1 -X ./$file_prog]
expect {
	-re "launching ($number).0" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "Hello World!" {
		incr match_run
		exec $bin_kill -INT $srun_pid
		exp_continue
	}
	-re "OUCH!" {
		incr match_sig
		exec $bin_kill -INT $srun_pid
		exec $bin_kill -INT $srun_pid
		exp_continue
	}
	-re "forcing job termination" {
		incr match_abort
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$match_run < 1} {
	send_user "\nFAILURE: srun failed to properly start\n"
	set exit_code 1
}
if {$match_sig < 1} {
	send_user "\nFAILURE: srun failed to properly process SIGINT\n"
	set exit_code 1
}
if {$match_abort < 1 && [test_launch_poe] == 0} {
#	POE could end without "forcing job termination" message being generated
	send_user "\nFAILURE: srun failed to properly process multiple SIGINT to abort\n"
	set exit_code 1
}

#
# Post-processing
#
if {$exit_code == 0} {
	exec $bin_rm -f $file_prog
	send_user "\nSUCCESS\n"
}
exit $exit_code
