#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test scancel verbose option (--verbose option).
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set exit_code    0
set file_in      "test$test_id.input"
set job_id1      0
set job_id2      0
set matches      0

#
# Build input script file
#
make_bash_script $file_in "$srun $bin_sleep 10"

#
# Submit a couple of jobs so we have something to work with
#
set timeout 10
set sbatch_pid [spawn $sbatch --output=/dev/null --error=/dev/null -t1 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		slow_kill $sbatch_pid
		fail "srun not responding"
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	fail "srun job initiation failure"
}

set sbatch_pid [spawn $sbatch --output=/dev/null --error=/dev/null -t1 $file_in]
expect {
	-re "Submitted batch job ($number)" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		slow_kill $sbatch_pid
		fail "srun not responding"
	}
	eof {
		wait
	}
}
if {$job_id2  == 0} {
	cancel_job $job_id1
	fail "srun job initiation failure"
}
exec $bin_rm -f $file_in

#
# Test verbose scancel
#

spawn $scancel --verbose $job_id1
expect {
	-re "Terminating job" {
		incr matches
		exp_continue
	}
	timeout {
		log_error "scancel not responding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	log_error "scancel verbose option failed"
	set exit_code 1
}

set matches 0
spawn $scancel $job_id2
expect {
	-re "Terminating job" {
		incr matches
		exp_continue
	}
	timeout {
		log_error "scancel not responding"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 0} {
	fail "scancel verbose option failed"
}

if {$exit_code != 0} {
	fail "Test failed due to previous errors (\$exit_code = $exit_code)"
}
