#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of srun signal forwarding
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory
#          named test1.32.prog
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "1.32"
set exit_code   0
set file_prog   "test$test_id.prog"
set matches     0
set fini_cnt    0
set poe_flag    0
set usr1cnt     0
set usr2cnt     0

print_header $test_id

if { [test_alps] } {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
} elseif { [test_xcpu] } {
	send_user "\nWARNING: This test is incompatible with XCPU systems\n"
	exit $exit_code:
}

if {[test_launch_poe]} {
#	SIGUSR2 used by POE to generate checkpoint
#	SIGUSR2 causes POE to core dump in base configuration
#	The test program exits after receiving 2 signals of any type
	set usr1target 2
	set usr2target 0
} else {
	set usr1target 1
	set usr2target 1
}

#
# Delete left-over program and rebuild it
#
exec $bin_rm -f $file_prog
exec $bin_cc -O ${file_prog}.c -o $file_prog
exec $bin_chmod 700 $file_prog

#
# Get uid
#
spawn $bin_id -u
expect {
	-re "($number)" {
		set uid $expect_out(1,string)
	}
	eof {
		wait
	}
}

#
# Spawn initial program via srun
# Note: For systems supporting proper pthreads, instead use
#       exec $bin_kill -USR1 $srun_pid, otherwise we need pkill
#       and can get multiple signals delivered
# Note: We send the signals right after task startup rather than
#	interspersed with messages because some versions of
#	Expect have difficulties handling unbuffered srun output
#
set timeout $max_job_delay
set srun_pid [spawn $srun -N1 -t1 --unbuffered ./$file_prog]
expect {
	-re "WAITING" {
		incr matches
		# sleep to make sure the process is actually running
		for {set inx 0} {$inx < $usr1target} {incr inx} {
			sleep 1
			exec $bin_kill -USR1 $srun_pid
		}
		send_user "\nSent signal USR1 $usr1target times\n"
		for {set inx 0} {$inx < $usr2target} {incr inx} {
			sleep 1
			exec $bin_kill -USR2 $srun_pid
		}
		send_user "\nSent signal USR1 $usr2target times\n"
		exp_continue
	}
	-re "SIGUSR($number)" {
		if {$expect_out(1,string) == 1} {
			set usr1cnt [expr $usr1cnt + 1]
		} else {
			set usr2cnt [expr $usr2cnt + 1]
		}
		exp_continue
	}
	-re "error.*not running" {
		send_user "\nDon't worry about the error...\n"
		exp_continue
	}
	-re "FINI" {
		incr fini_cnt
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		send_user "\nEOF\n"
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: srun failed to initialize properly\n"
	set exit_code 1
}
if {$usr1cnt != $usr1target} {
	send_user "\nFAILURE: $file_prog received $usr1cnt SIGUSR1 (not $usr1target)\n"
	set exit_code 1
}
if {$usr2cnt != $usr2target} {
	send_user "\nFAILURE: $file_prog received $usr2cnt SIGUSR2 (not $usr2target)\n"
	set exit_code 1
}
if {$fini_cnt != 1} {
	send_user "\nFAILURE: srun failed to terminate properly\n"
	set exit_code 1
}

#
# Post-processing
#
if {$exit_code == 0} {
	exec $bin_rm -f $file_prog
	send_user "\nSUCCESS\n"
}
exit $exit_code
