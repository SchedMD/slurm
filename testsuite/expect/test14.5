#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test sbcast time preservation (--preserve option).
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set file_in     "$test_dir/input"
set file_out    "$test_dir/output"
set file_err    "$test_dir/error"
set job_id      0


if {[get_config_param "SlurmdUser"] ne "root(0)"} {
	skip "This test is incompatible with SlurmdUser != root"
}

proc cleanup {} {
	global job_id

	cancel_job $job_id
}

#
# Build input script file that broadcasts a file
#
set pid         [pid]
set file1       "/tmp/test.$pid.1.$test_id"
set file2       "/tmp/test.$pid.2.$test_id"
make_bash_script $file_in "
  $srun $bin_rm -f $file1
  $sbcast --preserve $sbcast $file1
  ls -l $sbcast
  ls -l $file1
  $srun $bin_rm -f $file1

  $srun $bin_rm -f $file2
  $sbcast $sbcast $file2
  ls -l $file2
  $srun $bin_rm -f $file2
"

#
# Spawn an sbatch job that uses stdout/err and confirm their contents
#
set timeout $max_job_delay
set job_id [submit_job -fail "-N1 --output=$file_out --error=$file_err -t1 $file_in"]

#
# Wait for job to complete and check output file
# First two time stamps should match, last should differ
#
wait_for_job -fail $job_id "DONE"

set record    0
set preserved 1
set reset     1
set time1     0
set time2     0
set time3     0
wait_for_file -fail $file_out
spawn $bin_cat $file_out
expect {
	-re "($number) *0?($number):0?($number)" {
		incr record
		set date      $expect_out(1,string)
		set hour      $expect_out(2,string)
		set minute    $expect_out(3,string)
		set this_time [expr $date * 10000 + $hour * 100 + $minute]

		if {$record == 1} {
			set base_time $this_time
		}
		if {$record == 2} {
			if {$this_time != $base_time} {
				set preserved 0
			}
		}
		if {$record == 3} {
			if {$this_time == $base_time} {
				set reset 0
			}
		}
		exp_continue
	}
	eof {
		wait
	}
}

if {$record != 3} {
	fail "Wrong record count ($record != 3)"
}
if {$preserved == 0} {
	fail "Did not preserve file time stamp"
}
if {$reset == 0} {
	fail "Did not reset file time stamp"
}
