---

# Slurm ansible playbook for Cray systems
# Copyright 2017 Cray Inc. All Rights Reserved.
#
# Licensed under the GPL. See 'LICENSE.OpenSSL'.

- hosts: localhost

  vars:
    run_after:
      - common
      - compute_node
      - node_health
      - persistent_data
      - simple_sync

    atp_spank_plugin:       /opt/cray/pe/atp/libAtpSLaunch.so
    mcgroup_hierarchy_file: /sys/fs/cgroup/memory/memory.use_hierarchy
    scontrol:               @bindir@/scontrol
    slurm_default_dir:      /opt/slurm/default
    slurm_init_script:      /etc/init.d/slurm
    slurm_prefix:           @prefix@
    slurmctld_pidfile:      /var/spool/slurm/slurmctld.pid
    slurmctld_service_file: /usr/lib/systemd/system/slurmctld.service
    slurmctld_spooldir:     /var/spool/slurm
    slurmd_pidfile:         /var/spool/slurmd/slurmd.pid
    slurmd_spooldir:        /var/spool/slurmd
    slurmd_service_file:    /usr/lib/systemd/system/slurmd.service
    slurm_sysconfdir:       @sysconfdir@

  tasks:
    - name: Determine prefix availability
      stat: path={{ slurm_prefix }}
      register: prefix

    # Some Cray software depends on the link
    # /opt/slurm/default -> Slurm prefix
    - name: Link Slurm default directory
      file: path={{ slurm_default_dir }} src={{ slurm_prefix }} state=link
      when: prefix.stat.exists and prefix.stat.isdir

    - name: Determine Slurm daemons to run on this node
      command: "{{ scontrol }} show daemons"
      register: slurm_daemons
      ignore_errors: true

    # Set hierarchical cgroups to silence console warning
    - name: Determine memory cgroup hierarchy availability
      stat: path={{ mcgroup_hierarchy_file }}
      register: hierarchy

    - name: Set memory control group hierarchy option
      shell: echo 1 >{{ mcgroup_hierarchy_file }}
      when: slurm_daemons.rc == 0 and "slurmd" in slurm_daemons.stdout
        and hierarchy.stat.exists

    - name: Create slurmd spool directory
      file: name={{ slurmd_spooldir }} state=directory owner=root mode=0755
      when: slurm_daemons.rc == 0 and "slurmd" in slurm_daemons.stdout

    - name: Create slurmctld spool directory
      file: path={{ slurmctld_spooldir }} state=directory owner=root mode=0755
      when: slurm_daemons.rc == 0 and "slurmctld" in slurm_daemons.stdout

    - name: Determine sysconfdir availability
      stat: path={{ slurm_sysconfdir }}
      register: sysconfdir

    # Remove this task if Cray PE is not installed on the system
    - name: Configure ATP SPANK plugin
      lineinfile:
        dest={{ slurm_sysconfdir }}/plugstack.conf
        line="optional {{ atp_spank_plugin }}"
        regexp={{ atp_spank_plugin }}
        create=yes backup=yes owner=root mode=0644
      when: sysconfdir.stat.exists and sysconfdir.stat.isdir

    # Disable Slurm so it's started by cray-ansible, not systemd
    - name: Disable Slurm systemd startup
      file: path={{ item }} state=absent
      with_items:
        - /usr/lib/systemd/system/multi-user.target.wants/slurmd.service
        - /usr/lib/systemd/system/multi-user.target.wants/slurmctld.service

    - name: Determine Slurm init.d script availability
      stat: path={{ slurm_init_script }}
      register: slurm_init

    - name: Disable Slurm init.d startup
      command: /usr/bin/chkconfig slurm off
      when: slurm_init.stat.exists

    - name: Determine slurmctld service file availability
      stat: path={{ slurmctld_service_file }}
      register: slurmctld_service

    # The default Cray slurm.conf has a nonstandard slurmctld pid file
    - name: Set slurmctld pid file
      lineinfile:
        dest={{ slurmctld_service_file }}
        regexp=PIDFile
        line="PIDFile={{ slurmctld_pidfile }}"
        backup=yes
      when: slurm_daemons.rc == 0 and "slurmctld" in slurm_daemons.stdout
        and slurmctld_service.stat.exists

    - name: Start slurmctld
      service: name=slurmctld state=started
      when: slurm_daemons.rc == 0 and "slurmctld" in slurm_daemons.stdout
        and slurmctld_service.stat.exists
        and not ansible_local.cray_system.in_init

    - name: Determine slurmd service file availability
      stat: path={{ slurmd_service_file }}
      register: slurmd_service

    # The default Cray slurm.conf has a nonstandard slurmd pid file
    - name: Set slurmd pid file
      lineinfile:
        dest={{ slurmd_service_file }}
        regexp=PIDFile
        line="PIDFile={{ slurmd_pidfile }}"
        backup=yes
      when: slurm_daemons.rc == 0 and "slurmd" in slurm_daemons.stdout
        and slurmd_service.stat.exists

    - name: Start slurmd
      service: name=slurmd state=started
      when: slurm_daemons.rc == 0 and "slurmd" in slurm_daemons.stdout
        and slurmd_service.stat.exists
        and not ansible_local.cray_system.in_init
