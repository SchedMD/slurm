.TH srun "1" "Slurm Commands" "May 2019" "Slurm Commands"

.SH "NAME"
srun \- Run parallel jobs

.SH "SYNOPSIS"
\fBsrun\fR [\fIOPTIONS(0)\fR...] \fR[ : \fR[\fIOPTIONS(n)\fR...]\fR] \fIexecutable(0) \fR[\fIargs(0)\fR...]

Option(s) define multiple jobs in a co-scheduled heterogeneous job.
For more details about heterogeneous jobs see the document
.br
https://slurm.schedmd.com/heterogeneous_jobs.html

.SH "DESCRIPTION"
Run a parallel job on cluster managed by Slurm.  If necessary, srun will
first create a resource allocation in which to run the parallel job.

The following document describes the influence of various options on the
allocation of cpus to jobs and tasks.
.br
https://slurm.schedmd.com/cpu_management.html

.SH "RETURN VALUE"
srun will return the highest exit code of all tasks run or the highest signal
(with the high-order bit set in an 8-bit integer -- e.g. 128 + signal) of any
task that exited with a signal.

.SH "EXECUTABLE PATH RESOLUTION"

.nr step 1 1
The executable is resolved in the following order:
.br
.IP \n[step]. 3
If executable starts with ".", then path is constructed as:
current working directory / executable
.IP \n+[step].
If executable starts with a "/", then path is considered absolute.
.IP \n+[step].
If executable can be resolved through PATH. See \fBpath_resolution\fR(7).
.IP \n+[step].
If executable is in current working directory.
.P
Current working directory is the calling process working directory unless the
\fB\-\-chdir\fR argument is passed, which will override the current working
directory.

.SH "OPTIONS"
.LP

.TP
\fB\-\-accel\-bind\fR=<\fIoptions\fR>
Control how tasks are bound to generic resources of type gpu, mic and nic.
Multiple options may be specified. Supported options include:
.RS
.TP
\fBg\fR
Bind each task to GPUs which are closest to the allocated CPUs.
.TP
\fBm\fR
Bind each task to MICs which are closest to the allocated CPUs.
.TP
\fBn\fR
Bind each task to NICs which are closest to the allocated CPUs.
.TP
\fBv\fR
Verbose mode. Log how tasks are bound to GPU and NIC devices.
.TP
This option applies to job allocations.
.RE

.TP
\fB\-A\fR, \fB\-\-account\fR=<\fIaccount\fR>
Charge resources used by this job to specified account.
The \fIaccount\fR is an arbitrary string. The account name may
be changed after job submission using the \fBscontrol\fR
command. This option applies to job allocations.

.TP
\fB\-\-acctg\-freq\fR
Define the job accounting and profiling sampling intervals.
This can be used to override the \fIJobAcctGatherFrequency\fR parameter in Slurm's
configuration file, \fIslurm.conf\fR.
The supported format is follows:
.RS
.TP 12
\fB\-\-acctg\-freq=\fR\fI<datatype>\fR\fB=\fR\fI<interval>\fR
where \fI<datatype>\fR=\fI<interval>\fR specifies the task sampling
interval for the jobacct_gather plugin or a
sampling interval for a profiling type by the
acct_gather_profile plugin. Multiple,
comma-separated \fI<datatype>\fR=\fI<interval>\fR intervals
may be specified. Supported datatypes are as follows:
.RS
.TP
\fBtask=\fI<interval>\fR
where \fI<interval>\fR is the task sampling interval in seconds
for the jobacct_gather plugins and for task
profiling by the acct_gather_profile plugin.
NOTE: This frequency is used to monitor memory usage. If memory limits
are enforced the highest frequency a user can request is what is configured in
the slurm.conf file.  They can not turn it off (=0) either.
.TP
\fBenergy=\fI<interval>\fR
where \fI<interval>\fR is the sampling interval in seconds
for energy profiling using the acct_gather_energy plugin
.TP
\fBnetwork=\fI<interval>\fR
where \fI<interval>\fR is the sampling interval in seconds
for infiniband profiling using the acct_gather_infiniband
plugin.
.TP
\fBfilesystem=\fI<interval>\fR
where \fI<interval>\fR is the sampling interval in seconds
for filesystem profiling using the acct_gather_filesystem
plugin.
.TP
.RE
.RE
.br
The default value for the task sampling interval
is 30. The default value for all other intervals is 0.
An interval of 0 disables sampling of the specified type.
If the task sampling interval is 0, accounting
information is collected only at job termination (reducing Slurm
interference with the job).
.br
.br
Smaller (non\-zero) values have a greater impact upon job performance,
but a value of 30 seconds is not likely to be noticeable for
applications having less than 10,000 tasks. This option applies job allocations.
.RE

.TP
\fB\-B\fR \fB\-\-extra\-node\-info\fR=<\fIsockets\fR[:\fIcores\fR[:\fIthreads\fR]]>
Restrict node selection to nodes with at least the specified number of
sockets, cores per socket and/or threads per core.
NOTE: These options do not specify the resource allocation size.
Each value specified is considered a minimum.
An asterisk (*) can be used as a placeholder indicating that all available
resources of that type are to be utilized. Values can also be specified as
min-max. The individual levels can also be specified in separate options if
desired:
.nf
    \fB\-\-sockets\-per\-node\fR=<\fIsockets\fR>
    \fB\-\-cores\-per\-socket\fR=<\fIcores\fR>
    \fB\-\-threads\-per\-core\fR=<\fIthreads\fR>
.fi
If task/affinity plugin is enabled, then specifying an allocation in this
manner also sets a default \fB\-\-cpu\-bind\fR option of \fIthreads\fR
if the \fB\-B\fR option specifies a thread count, otherwise an option of
\fIcores\fR if a core count is specified, otherwise an option of \fIsockets\fR.
If SelectType is configured to select/cons_res, it must have a parameter of
CR_Core, CR_Core_Memory, CR_Socket, or CR_Socket_Memory for this option
to be honored.
If not specified, the scontrol show job will display 'ReqS:C:T=*:*:*'. This
option applies to job allocations.

.TP
\fB\-\-bb\fR=<\fIspec\fR>
Burst buffer specification. The form of the specification is system dependent.
Also see \fB\-\-bbf\fR. This option applies to job allocations.

.TP
\fB\-\-bbf\fR=<\fIfile_name\fR>
Path of file containing burst buffer specification.
The form of the specification is system dependent.
Also see \fB\-\-bb\fR. This option applies to job allocations.

.TP
\fB\-\-bcast\fR[=<\fIdest_path\fR>]
Copy executable file to allocated compute nodes.
If a file name is specified, copy the executable to the specified destination
file path. If no path is specified, copy the file to a file named
"slurm_bcast_<job_id>.<step_id>" in the current working.
For example, "srun \-\-bcast=/tmp/mine \-N3 a.out" will copy the file "a.out"
from your current directory to the file "/tmp/mine" on each of the three
allocated compute nodes and execute that file. This option applies to step
allocations.

.TP
\fB\-b\fR, \fB\-\-begin\fR=<\fItime\fR>
Defer initiation of this job until the specified time.
It accepts times of the form \fIHH:MM:SS\fR to run a job at
a specific time of day (seconds are optional).
(If that time is already past, the next day is assumed.)
You may also specify \fImidnight\fR, \fInoon\fR, \fIfika\fR (3 PM) or
\fIteatime\fR (4 PM) and you can have a time\-of\-day suffixed
with \fIAM\fR or \fIPM\fR for running in the morning or the evening.
You can also say what day the job will be run, by specifying
a date of the form \fIMMDDYY\fR or \fIMM/DD/YY\fR
\fIYYYY\-MM\-DD\fR. Combine date and time using the following
format \fIYYYY\-MM\-DD[THH:MM[:SS]]\fR. You can also
give times like \fInow + count time\-units\fR, where the time\-units
can be \fIseconds\fR (default), \fIminutes\fR, \fIhours\fR,
\fIdays\fR, or \fIweeks\fR and you can tell Slurm to run
the job today with the keyword \fItoday\fR and to run the
job tomorrow with the keyword \fItomorrow\fR.
The value may be changed after job submission using the
\fBscontrol\fR command.
For example:
.nf
   \-\-begin=16:00
   \-\-begin=now+1hour
   \-\-begin=now+60           (seconds by default)
   \-\-begin=2010\-01\-20T12:34:00
.fi

.RS
.PP
Notes on date/time specifications:
 \- Although the 'seconds' field of the HH:MM:SS time specification is
allowed by the code, note that the poll time of the Slurm scheduler
is not precise enough to guarantee dispatch of the job on the exact
second.  The job will be eligible to start on the next poll
following the specified time. The exact poll interval depends on the
Slurm scheduler (e.g., 60 seconds with the default sched/builtin).
 \- If no time (HH:MM:SS) is specified, the default is (00:00:00).
 \- If a date is specified without a year (e.g., MM/DD) then the current
year is assumed, unless the combination of MM/DD and HH:MM:SS has
already passed for that year, in which case the next year is used.
.br
This option applies to job allocations.
.RE

.TP
\fB\-\-checkpoint\fR=<\fItime\fR>
Specifies the interval between creating checkpoints of the job step.
By default, the job step will have no checkpoints created.
Acceptable time formats include "minutes", "minutes:seconds",
"hours:minutes:seconds", "days\-hours", "days\-hours:minutes" and
"days\-hours:minutes:seconds". This option applies to job and step allocations.

.TP
\fB\-\-cluster\-constraint\fR=<\fIlist\fR>
Specifies features that a federated cluster must have to have a sibling job
submitted to it. Slurm will attempt to submit a sibling job to a cluster if it
has at least one of the specified features.

.TP
\fB\-\-comment\fR=<\fIstring\fR>
An arbitrary comment. This option applies to job allocations.

.TP
\fB\-\-compress\fR[=\fItype\fR]
Compress file before sending it to compute hosts.
The optional argument specifies the data compression library to be used.
Supported values are "lz4" (default) and "zlib".
Some compression libraries may be unavailable on some systems.
For use with the \fB\-\-bcast\fR option. This option applies to step
allocations.

.TP
\fB\-C\fR, \fB\-\-constraint\fR=<\fIlist\fR>
Nodes can have \fBfeatures\fR assigned to them by the Slurm administrator.
Users can specify which of these \fBfeatures\fR are required by their job
using the constraint option.
Only nodes having features matching the job constraints will be used to
satisfy the request.
Multiple constraints may be specified with AND, OR, matching OR,
resource counts, etc. (some operators are not supported on all system types).
Supported \fbconstraint\fR options include:
.PD 1
.RS
.TP
\fBSingle Name\fR
Only nodes which have the specified feature will be used.
For example, \fB\-\-constraint="intel"\fR
.TP
\fBNode Count\fR
A request can specify the number of nodes needed with some feature
by appending an asterisk and count after the feature name.
For example "\fB\-\-nodes=16 \-\-constraint=graphics*4 ..."\fR
indicates that the job requires 16 nodes and that at least four of those
nodes must have the feature "graphics."
.TP
\fBAND\fR
If only nodes with all of specified features will be used.
The ampersand is used for an AND operator.
For example, \fB\-\-constraint="intel&gpu"\fR
.TP
\fBOR\fR
If only nodes with at least one of specified features will be used.
The vertical bar is used for an OR operator.
For example, \fB\-\-constraint="intel|amd"\fR
.TP
\fBMatching OR\fR
If only one of a set of possible options should be used for all allocated
nodes, then use the OR operator and enclose the options within square brackets.
For example: "\fB\-\-constraint=[rack1|rack2|rack3|rack4]"\fR might
be used to specify that all nodes must be allocated on a single rack of
the cluster, but any of those four racks can be used.
.TP
\fBMultiple Counts\fR
Specific counts of multiple resources may be specified by using the AND
operator and enclosing the options within square brackets.
For example: "\fB\-\-constraint=[rack1*2&rack2*4]"\fR might
be used to specify that two nodes must be allocated from nodes with the feature
of "rack1" and four nodes must be allocated from nodes with the feature
"rack2".

\fBNOTE:\fR This construct does not support multiple Intel KNL NUMA or MCDRAM
modes. For example, while "\fB\-\-constraint=[(knl&quad)*2&(knl&hemi)*4]"\fR is
not supported, "\fB\-\-constraint=[haswell*2&(knl&hemi)*4]"\fR is supported.
Specification of multiple KNL modes requires the use of a heterogeneous job.

.TP
\fBParenthesis\fR
Parenthesis can be used to group like node features together. For example
"\fB\-\-constraint=[(knl&snc4&flat)*4&haswell*1]"\fR might be used to specify
that four nodes with the features "knl", "snc4" and "flat" plus one node with
the feature "haswell" are required. All options within parenthesis should be
grouped with AND (e.g. "&") operands.
.RE

\fBWARNING\fR: When srun is executed from within salloc or sbatch,
the constraint value can only contain a single feature name. None of the
other operators are currently supported for job steps.
.br
This option applies to job and step allocations.

.TP
\fB\-\-contiguous\fR
If set, then the allocated nodes must form a contiguous set.
Not honored with the \fBtopology/tree\fR or \fBtopology/3d_torus\fR
plugins, both of which can modify the node ordering. This option applies to job
allocations.

.TP
\fB\-\-cores\-per\-socket\fR=<\fIcores\fR>
Restrict node selection to nodes with at least the specified number of
cores per socket.  See additional information under \fB\-B\fR option
above when task/affinity plugin is enabled. This option applies to job
allocations.

.TP
\fB\-\-cpu\-bind\fR=[{\fIquiet,verbose\fR},]\fItype\fR
Bind tasks to CPUs.
Used only when the task/affinity or task/cgroup plugin is enabled.
NOTE: To have Slurm always report on the selected CPU binding for all
commands executed in a shell, you can enable verbose mode by setting
the SLURM_CPU_BIND environment variable value to "verbose".

The following informational environment variables are set when \fB\-\-cpu\-bind\fR
is in use:
.nf
	SLURM_CPU_BIND_VERBOSE
	SLURM_CPU_BIND_TYPE
	SLURM_CPU_BIND_LIST
.fi

See the \fBENVIRONMENT VARIABLES\fR section for a more detailed description
of the individual SLURM_CPU_BIND variables. These variable are available
only if the task/affinity plugin is configured.

When using \fB\-\-cpus\-per\-task\fR to run multithreaded tasks, be aware that
CPU binding is inherited from the parent of the process.  This means that
the multithreaded task should either specify or clear the CPU binding
itself to avoid having all threads of the multithreaded task use the same
mask/CPU as the parent.  Alternatively, fat masks (masks which specify more
than one allowed CPU) could be used for the tasks in order to provide
multiple CPUs for the multithreaded tasks.

By default, a job step has access to every CPU allocated to the job.
To ensure that distinct CPUs are allocated to each job step, use the
\fB\-\-exclusive\fR option.

Note that a job step can be allocated different numbers of CPUs on each node
or be allocated CPUs not starting at location zero. Therefore one of the
options which automatically generate the task binding is recommended.
Explicitly specified masks or bindings are only honored when the job step
has been allocated every available CPU on the node.

Binding a task to a NUMA locality domain means to bind the task to the set of
CPUs that belong to the NUMA locality domain or "NUMA node".
If NUMA locality domain options are used on systems with no NUMA support, then
each socket is considered a locality domain.

If the -\-cpu\-bind option is not used, the default binding mode will depend
upon Slurm's configuration and the step's resource allocation.
If all allocated nodes have the same configured CpuBind mode, that will be used.
Otherwise if the job's Partition has a configured CpuBind mode, that will be used.
Otherwise if Slurm has a configured TaskPluginParam value, that mode will be used.
Otherwise automatic binding will be performed as described below.

.PD
.RS
.TP
\fBAuto Binding\fR
Applies only when task/affinity is enabled. If the job step allocation includes an
allocation with a number of
sockets, cores, or threads equal to the number of tasks times cpus\-per\-task,
then the tasks will by default be bound to the appropriate resources (auto
binding). Disable this mode of operation by explicitly setting
"-\-cpu\-bind=none". Use TaskPluginParam=autobind=[threads|cores|sockets] to set
a default cpu binding in case "auto binding" doesn't find a match.
.RE
.RS

Supported options include:
.PD 1
.RS
.TP
.B q[uiet]
Quietly bind before task runs (default)
.TP
.B v[erbose]
Verbosely report binding before task runs
.TP
.B no[ne]
Do not bind tasks to CPUs (default unless auto binding is applied)
.TP
.B rank
Automatically bind by task rank.
The lowest numbered task on each node is bound to socket (or core or thread) zero, etc.
Not supported unless the entire node is allocated to the job.
.TP
.B map_cpu:<list>
Bind by setting CPU masks on tasks (or ranks) as specified where <list> is
<cpu_id_for_task_0>,<cpu_id_for_task_1>,...
CPU IDs are interpreted as decimal values unless they are preceded
with '0x' in which case they interpreted as hexadecimal values.
If the number of tasks (or ranks) exceeds the number of elements in this list,
elements in the list will be reused as needed starting from the beginning of
the list.
To simplify support for large task counts, the lists may follow a map with an
asterisk and repetition count
For example "map_cpu:0x0f*4,0xf0*4".
Not supported unless the entire node is allocated to the job.
.TP
.B mask_cpu:<list>
Bind by setting CPU masks on tasks (or ranks) as specified where <list> is
<cpu_mask_for_task_0>,<cpu_mask_for_task_1>,...
The mapping is specified for a node and identical mapping is applied to the
tasks on every node (i.e. the lowest task ID on each node is mapped to the
first mask specified in the list, etc.).
CPU masks are \fBalways\fR interpreted as hexadecimal values but can be
preceded with an optional '0x'. Not supported unless the entire node is
allocated to the job.
To simplify support for large task counts, the lists may follow a map with an
asterisk and repetition count
For example "mask_cpu:0x0f*4,0xf0*4".
Not supported unless the entire node is allocated to the job.
.TP
.B rank_ldom
Bind to a NUMA locality domain by rank. Not supported unless the entire
node is allocated to the job.
.TP
.B map_ldom:<list>
Bind by mapping NUMA locality domain IDs to tasks as specified where
<list> is <ldom1>,<ldom2>,...<ldomN>.
The locality domain IDs are interpreted as decimal values unless they are
preceded with '0x' in which case they are interpreted as hexadecimal values.
Not supported unless the entire node is allocated to the job.
.TP
.B mask_ldom:<list>
Bind by setting NUMA locality domain masks on tasks as specified
where <list> is <mask1>,<mask2>,...<maskN>.
NUMA locality domain masks are \fBalways\fR interpreted as hexadecimal
values but can be preceded with an optional '0x'.
Not supported unless the entire node is allocated to the job.
.TP
.B sockets
Automatically generate masks binding tasks to sockets.
Only the CPUs on the socket which have been allocated to the job will be used.
If the number of tasks differs from the number of allocated sockets
this can result in sub\-optimal binding.
.TP
.B cores
Automatically generate masks binding tasks to cores.
If the number of tasks differs from the number of allocated cores
this can result in sub\-optimal binding.
.TP
.B threads
Automatically generate masks binding tasks to threads.
If the number of tasks differs from the number of allocated threads
this can result in sub\-optimal binding.
.TP
.B ldoms
Automatically generate masks binding tasks to NUMA locality domains.
If the number of tasks differs from the number of allocated locality domains
this can result in sub\-optimal binding.
.TP
.B boards
Automatically generate masks binding tasks to boards.
If the number of tasks differs from the number of allocated boards
this can result in sub\-optimal binding. This option is supported by the
task/cgroup plugin only.
.TP
.B help
Show help message for cpu\-bind
.RE
.TP
This option applies to job and step allocations.
.RE

.TP
\fB\-\-cpu\-freq\fR =<\fIp1\fR[\-\fIp2\fR[:\fIp3\fR]]>

Request that the job step initiated by this srun command be run at some
requested frequency if possible, on the CPUs selected for the step on
the compute node(s).

\fBp1\fR can be  [#### | low | medium | high | highm1] which will set the
frequency scaling_speed to the corresponding value, and set the frequency
scaling_governor to UserSpace. See below for definition of the values.

\fBp1\fR can be [Conservative | OnDemand | Performance | PowerSave] which
will set the scaling_governor to the corresponding value. The governor has to be
in the list set by the slurm.conf option CpuFreqGovernors.

When \fBp2\fR is present, p1 will be the minimum scaling frequency and
p2 will be the maximum scaling frequency.

\fBp2\fR can be  [#### | medium | high | highm1] p2 must be greater than p1.

\fBp3\fR can be [Conservative | OnDemand | Performance | PowerSave | UserSpace]
which will set the governor to the corresponding value.

If \fBp3\fR is UserSpace, the frequency scaling_speed will be set by a power
or energy aware scheduling strategy to a value between p1 and p2 that lets the
job run within the site's power goal. The job may be delayed if p1 is higher
than a frequency that allows the job to run within the goal.

If the current frequency is < min, it will be set to min. Likewise,
if the current frequency is > max, it will be set to max.

Acceptable values at present include:
.RS
.TP 14
\fB####\fR
frequency in kilohertz
.TP
\fBLow\fR
the lowest available frequency
.TP
\fBHigh\fR
the highest available frequency
.TP
\fBHighM1\fR
(high minus one) will select the next highest available frequency
.TP
\fBMedium\fR
attempts to set a frequency in the middle of the available range
.TP
\fBConservative\fR
attempts to use the Conservative CPU governor
.TP
\fBOnDemand\fR
attempts to use the OnDemand CPU governor (the default value)
.TP
\fBPerformance\fR
attempts to use the Performance CPU governor
.TP
\fBPowerSave\fR
attempts to use the PowerSave CPU governor
.TP
\fBUserSpace\fR
attempts to use the UserSpace CPU governor
.TP
.RE

The following informational environment variable is set in the job
step when \fB\-\-cpu\-freq\fR option is requested.
.nf
        SLURM_CPU_FREQ_REQ
.fi

This environment variable can also be used to supply the value for the
CPU frequency request if it is set when the 'srun' command is issued.
The \fB\-\-cpu\-freq\fR on the command line will override the
environment variable value.  The form on the environment variable is
the same as the command line.
See the \fBENVIRONMENT VARIABLES\fR
section for a description of the SLURM_CPU_FREQ_REQ variable.

\fBNOTE\fR: This parameter is treated as a request, not a requirement.
If the job step's node does not support setting the CPU frequency, or
the requested value is outside the bounds of the legal frequencies, an
error is logged, but the job step is allowed to continue.

\fBNOTE\fR: Setting the frequency for just the CPUs of the job step
implies that the tasks are confined to those CPUs.  If task
confinement (i.e., TaskPlugin=task/affinity or
TaskPlugin=task/cgroup with the "ConstrainCores" option) is not
configured, this parameter is ignored.

\fBNOTE\fR: When the step completes, the frequency and governor of each
selected CPU is reset to the previous values.

\fBNOTE\fR: When submitting jobs with  the \fB\-\-cpu\-freq\fR option
with linuxproc as the ProctrackType can cause jobs to run too quickly before
Accounting is able to poll for job information. As a result not all of
accounting information will be present.

This option applies to job and step allocations.
.RE

.TP
\fB\-\-cpus\-per\-gpu\fR=<\fIncpus\fR>
Advise Slurm that ensuing job steps will require \fIncpus\fR processors per
allocated GPU.
Requires the \fB\-\-gpus\fR option.
Not compatible with the \fB\-\-cpus\-per\-task\fR option.

.TP
\fB\-c\fR, \fB\-\-cpus\-per\-task\fR=<\fIncpus\fR>
Request that \fIncpus\fR be allocated \fBper process\fR. This may be
useful if the job is multithreaded and requires more than one CPU
per task for optimal performance. The default is one CPU per process.
If \fB\-c\fR is specified without \fB\-n\fR, as many
tasks will be allocated per node as possible while satisfying
the \fB\-c\fR restriction. For instance on a cluster with 8 CPUs
per node, a job request for 4 nodes and 3 CPUs per task may be
allocated 3 or 6 CPUs per node (1 or 2 tasks per node) depending
upon resource consumption by other jobs. Such a job may be
unable to execute more than a total of 4 tasks.
This option may also be useful to spawn tasks without allocating
resources to the job step from the job's allocation when running
multiple job steps with the \fB\-\-exclusive\fR option.

\fBWARNING\fR: There are configurations and options interpreted differently by
job and job step requests which can result in inconsistencies for this option.
For example \fIsrun \-c2 \-\-threads\-per\-core=1 prog\fR may allocate two
cores for the job, but if each of those cores contains two threads, the job
allocation will include four CPUs. The job step allocation will then launch two
threads per CPU for a total of two tasks.

\fBWARNING\fR: When srun is executed from within salloc or sbatch,
there are configurations and options which can result in inconsistent
allocations when \-c has a value greater than \-c on salloc or sbatch.

This option applies to job allocations.

.TP
\fB\-\-deadline\fR=<\fIOPT\fR>
remove the job if no ending is possible before
this deadline (start > (deadline \- time[\-min])).
Default is no deadline.  Valid time formats are:
.br
HH:MM[:SS] [AM|PM]
.br
MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]
.br
MM/DD[/YY]\-HH:MM[:SS]
.br
YYYY\-MM\-DD[THH:MM[:SS]]]

This option applies only to job allocations.

.TP
\fB\-\-delay\-boot\fR=<\fIminutes\fR>
Do not reboot nodes in order to satisfied this job's feature specification if
the job has been eligible to run for less than this time period.
If the job has waited for less than the specified period, it will use only
nodes which already have the specified features.
The argument is in units of minutes.
A default value may be set by a system administrator using the \fBdelay_boot\fR
option of the \fBSchedulerParameters\fR configuration parameter in the
slurm.conf file, otherwise the default value is zero (no delay).

This option applies only to job allocations.

.TP
\fB\-d\fR, \fB\-\-dependency\fR=<\fIdependency_list\fR>
Defer the start of this job until the specified dependencies have been
satisfied completed. This option does not apply to job steps (executions of
srun within an existing salloc or sbatch allocation) only to job allocations.
<\fIdependency_list\fR> is of the form
<\fItype:job_id[:job_id][,type:job_id[:job_id]]\fR> or
<\fItype:job_id[:job_id][?type:job_id[:job_id]]\fR>.
All dependencies must be satisfied if the "," separator is used.
Any dependency may be satisfied if the "?" separator is used.
Many jobs can share the same dependency and these jobs may even belong to
different  users. The  value may be changed after job submission using the
scontrol command.
Once a job dependency fails due to the termination state of a preceding job,
the dependent job will never be run, even if the preceding job is requeued and
has a different termination state in a subsequent execution. This option applies
to job allocations.
.PD
.RS
.TP
\fBafter:job_id[:jobid...]\fR
This job can begin execution after the specified jobs have begun
execution.
.TP
\fBafterany:job_id[:jobid...]\fR
This job can begin execution after the specified jobs have terminated.
.TP
\fBafterburstbuffer:job_id[:jobid...]\fR
This job can begin execution after the specified jobs have terminated and
any associated burst buffer stage out operations have completed.
.TP
\fBaftercorr:job_id[:jobid...]\fR
A task of this job array can begin execution after the corresponding task ID
in the specified job has completed successfully (ran to completion with an
exit code of zero).
.TP
\fBafternotok:job_id[:jobid...]\fR
This job can begin execution after the specified jobs have terminated
in some failed state (non-zero exit code, node failure, timed out, etc).
.TP
\fBafterok:job_id[:jobid...]\fR
This job can begin execution after the specified jobs have successfully
executed (ran to completion with an exit code of zero).
.TP
\fBexpand:job_id\fR
Resources allocated to this job should be used to expand the specified job.
The job to expand must share the same QOS (Quality of Service) and partition.
Gang scheduling of resources in the partition is also not supported.
.TP
\fBsingleton\fR
This job can begin execution after any previously launched jobs
sharing the same job name and user have terminated.
In other words, only one job by that name and owned by that user can be running
or suspended at any point in time.
.RE

.TP
\fB\-D\fR, \fB\-\-chdir\fR=<\fIpath\fR>
Have the remote processes do a chdir to \fIpath\fR before beginning
execution. The default is to chdir to the current working directory
of the \fBsrun\fR process. The path can be specified as full path or
relative path to the directory where the command is executed. This
option applies to job allocations.

.TP
\fB\-e\fR, \fB\-\-error\fR=<\fIfilename pattern\fR>
Specify how stderr is to be redirected. By default in interactive mode,
.B srun
redirects stderr to the same file as stdout, if one is specified. The
\fB\-\-error\fR option is provided to allow stdout and stderr to be
redirected to different locations.
See \fBIO Redirection\fR below for more options.
If the specified file already exists, it will be overwritten. This option
applies to job and step allocations.

.TP
\fB\-E\fR, \fB\-\-preserve-env\fR
Pass the current values of environment variables SLURM_JOB_NODES and
SLURM_NTASKS through to the \fIexecutable\fR, rather than computing them
from commandline parameters. This option applies to job allocations.

.TP
\fB\-\-epilog\fR=<\fIexecutable\fR>
\fBsrun\fR will run \fIexecutable\fR just after the job step completes.
The command line arguments for \fIexecutable\fR will be the command
and arguments of the job step.  If \fIexecutable\fR is "none", then
no srun epilog will be run. This parameter overrides the SrunEpilog
parameter in slurm.conf. This parameter is completely independent from
the Epilog parameter in slurm.conf. This option applies to job allocations.


.TP
\fB\-\-exclusive[=user|mcs]\fR
This option applies to job and job step allocations, and has two slightly
different meanings for each one.
When used to initiate a job, the job allocation cannot share nodes with
other running jobs  (or just other users with the "=user" option or "=mcs" option).
The default shared/exclusive behavior depends on system configuration and the
partition's \fBOverSubscribe\fR option takes precedence over the job's option.

This option can also be used when initiating more than one job step within
an existing resource allocation, where you want separate processors to
be dedicated to each job step. If sufficient processors are not
available to initiate the job step, it will be deferred. This can
be thought of as providing a mechanism for resource management to the job
within it's allocation.

The exclusive allocation of CPUs only applies to job steps explicitly invoked
with the \fB\-\-exclusive\fR option.
For example, a job might be allocated one node with four CPUs and a remote
shell invoked on the allocated node. If that shell is not invoked with the
\fB\-\-exclusive\fR option, then it may create a job step with four tasks
using the \fB\-\-exclusive\fR option and not conflict with the remote shell's
resource allocation.
Use the \fB\-\-exclusive\fR option to invoke every job step to ensure distinct
resources for each step.

Note that all CPUs allocated to a job are available
to each job step unless the \fB\-\-exclusive\fR option is used plus
task affinity is configured. Since resource management is provided by
processor, the \fB\-\-ntasks\fR option must be specified, but the
following options should NOT be specified
\fB\-\-relative\fR, \fB\-\-distribution\fR=\fIarbitrary\fR.
See \fBEXAMPLE\fR below.

.TP
\fB\-\-export\fR=<\fIenvironment variables [ALL] | NONE\fR>
Identify which environment variables are propagated to the launched application.
By default, \fIall\fR are propagated.
Multiple environment variable names should be comma separated.
Environment variable names may be specified to propagate the current
value (e.g. "\-\-export=EDITOR") or specific values
may be exported (e.g. "\-\-export=EDITOR=/bin/emacs"). In these two examples,
the propagated environment will only contain the variable \fIEDITOR\fR.
If one desires to add to the environment instead of replacing it, have the
argument include \fIALL\fR (e.g. "\-\-export=ALL,EDITOR=/bin/emacs").
This will propagate \fIEDITOR\fR along with the current environment.
Unlike sbatch, if \fIALL\fR is specified, any additional specified environment
variables are ignored.
If one desires no environment variables be propagated, use the argument
\fINONE\fR.
Regardless of this setting, the appropriate \fISLURM_*\fR task environment
variables are always exported to the environment.
\fIsrun\fR may deviate from the above behavior if the default launch plugin,
\fIlaunch/slurm\fR, is not used.

.TP
\fB\-F\fR, \fB\-\-nodefile\fR=<\fInode file\fR>
Much like \-\-nodelist, but the list is contained in a file of name
\fInode file\fR.  The node names of the list may also span multiple lines
in the file.    Duplicate node names in the file will be ignored.
The order of the node names in the list is not important; the node names
will be sorted by Slurm.

.TP
\fB\-\-gid\fR=<\fIgroup\fR>
If \fBsrun\fR is run as root, and the \fB\-\-gid\fR option is used,
submit the job with \fIgroup\fR's group access permissions.  \fIgroup\fR
may be the group name or the numerical group ID. This option applies to
job allocations.

.TP
\fB\-G\fR, \fB\-\-gpus\fR=[<\fitype\fR>:]<\fInumber\fR>
Specify the total number of GPUs required for the job.
An optional GPU type specification can be supplied.
For example "\-\-gpus=volta:3".
Multiple options can be requested in a comma separated list, for example:
"\-\-gpus=volta:3,kepler:1".
See also the \fB\-\-gpus\-per\-node\fR, \fB\-\-gpus\-per\-socket\fR and
\fB\-\-gpus\-per\-task\fR options.

.TP
\fB\-\-gpu\-bind\fR=<\fItype\fR>
Bind tasks to specific GPUs.
By default every spawned task can access every GPU allocated to the job.

Supported \fItype\fR options:
.RS
.TP 10
\fBclosest\fR
Bind each task to the GPU(s) which are closest.
In a NUMA environment, each task may be bound to more than one GPU (i.e.
all GPUs in that NUMA environment).
.TP
\fBmap_gpu:<list>\fR
Bind by setting GPU masks on tasks (or ranks) as specified where <list> is
<gpu_id_for_task_0>,<gpu_id_for_task_1>,... GPU IDs are interpreted as decimal
values unless they are preceded with '0x' in which case they interpreted as
hexadecimal values. If the number of tasks (or ranks) exceeds the number of
elements in this list, elements in the list will be reused as needed starting
from the beginning of the list. To simplify support for large task counts,
the lists may follow a map with an asterisk and repetition count.
For example "map_cpu:0*4,1*4".
Not supported unless the entire node is allocated to the job.
.TP
\fBmask_gpu:<list>\fR
Bind by setting GPU masks on tasks (or ranks) as specified where <list> is
<gpu_mask_for_task_0>,<gpu_mask_for_task_1>,... The mapping is specified for
a node and identical mapping is applied to the tasks on every node (i.e. the
lowest task ID on each node is mapped to the first mask specified in the list,
etc.). GPU masks are always interpreted as hexadecimal values but can be
preceded with an optional '0x'. Not supported unless the entire node is
allocated to the job. To simplify support for large task counts, the lists
may follow a map with an asterisk and repetition count.
For example "mask_gpu:0x0f*4,0xf0*4".
Not supported unless the entire node is allocated to the job.
.RE

.TP
\fB\-\-gpu\-freq\fR=[<\fItype\fR]=\fIvalue\fR>[,<\fItype\fR=\fIvalue\fR>][,verbose]
Request that GPUs allocated to the job are configured with specific frequency
values.
This option can be used to independently configure the GPU and its memory
frequencies.
After the job is completed, the frequencies of all affected GPUs will be reset
to the highest possible values.
In some cases, system power caps may override the requested values.
The field \fItype\fR can be "memory".
If \fItype\fR is not specified, the GPU frequency is implied.
The \fIvalue\fR field can either be "low", "medium", "high", "highm1" or
a numeric value in megahertz (MHz).
If the specified numeric value is not possible, a value as close as
possible will be used. See below for definition of the values.
The \fIverbose\fR option causes current GPU frequency information to be logged.
Examples of use include "\-\-gpu\-freq=medium,memory=high" and
"\-\-gpu\-freq=450".

Supported \fIvalue\fR definitions:
.RS
.TP 10
\fBlow\fR
the lowest available frequency.
.TP
\fBmedium\fR
attempts to set a frequency in the middle of the available range.
.TP
\fBhigh\fR
the highest available frequency.
.TP
\fBhighm1\fR
(high minus one) will select the next highest available frequency.
.RE

.TP
\fB\-\-gpus\-per\-node\fR=[<\fitype\fR>:]<\fInumber\fR>
Specify the number of GPUs required for the job on each node included in
the job's resource allocation.
An optional GPU type specification can be supplied.
For example "\-\-gpus\-per\-node=volta:3".
Multiple options can be requested in a comma separated list, for example:
"\-\-gpus\-per\-node=volta:3,kepler:1".
See also the \fB\-\-gpus\fR, \fB\-\-gpus\-per\-socket\fR and
\fB\-\-gpus\-per\-task\fR options.

.TP
\fB\-\-gpus\-per\-socket\fR=[<\fitype\fR>:]<\fInumber\fR>
Specify the number of GPUs required for the job on each socket included in
the job's resource allocation.
An optional GPU type specification can be supplied.
For example "\-\-gpus\-per\-socket=volta:3".
Multiple options can be requested in a comma separated list, for example:
"\-\-gpus\-per\-socket=volta:3,kepler:1".
Requires job to specify a sockets per node count ( \-\-sockets\-per\-node).
See also the \fB\-\-gpus\fR, \fB\-\-gpus\-per\-node\fR and
\fB\-\-gpus\-per\-task\fR options.
This option applies to job allocations.

.TP
\fB\-\-gpus\-per\-task\fR=[<\fitype\fR>:]<\fInumber\fR>
Specify the number of GPUs required for the job on each task to be spawned
in the job's resource allocation.
An optional GPU type specification can be supplied.
This option requires the specification of a task count.
For example "\-\-gpus\-per\-task=volta:1".
Multiple options can be requested in a comma separated list, for example:
"\-\-gpus\-per\-task=volta:3,kepler:1".
Requires job to specify a task count (\-\-nodes).
See also the \fB\-\-gpus\fR, \fB\-\-gpus\-per\-socket\fR and
\fB\-\-gpus\-per\-node\fR options.

.TP
\fB\-\-gres\fR=<\fIlist\fR>
Specifies a comma delimited list of generic consumable resources.
The format of each entry on the list is "name[[:type]:count]".
The name is that of the consumable resource.
The count is the number of those resources with a default value of 1.
The count can have a suffix of
"k" or "K" (multiple of 1024),
"m" or "M" (multiple of 1024 x 1024),
"g" or "G" (multiple of 1024 x 1024 x 1024),
"t" or "T" (multiple of 1024 x 1024 x 1024 x 1024),
"p" or "P" (multiple of 1024 x 1024 x 1024 x 1024 x 1024).
The specified resources will be allocated to the job on each node.
The available generic consumable resources is configurable by the system
administrator.
A list of available generic consumable resources will be printed and the
command will exit if the option argument is "help".
Examples of use include "\-\-gres=gpu:2,mic:1", "\-\-gres=gpu:kepler:2", and
"\-\-gres=help".
NOTE: This option applies to job and step allocations. By default, a job step
is allocated all of the generic resources that have allocated to the job.
To change the behavior so that each job step is allocated no generic resources,
explicitly set the value of \-\-gres to specify zero counts for each generic
resource OR set "\-\-gres=none" OR set the SLURM_STEP_GRES environment variable
to "none".

.TP
\fB\-\-gres\-flags\fR=<\fItype\fR>
Specify generic resource task binding options.
This option applies to job allocations.
.RS
.TP
.B disable\-binding
Disable filtering of CPUs with respect to generic resource locality.
This option is currently required to use more CPUs than are bound to a GRES
(i.e. if a GPU is bound to the CPUs on one socket, but resources on more than
one socket are required to run the job).
This option may permit a job to be allocated resources sooner than otherwise
possible, but may result in lower job performance.
.TP
.B enforce\-binding
The only CPUs available to the job will be those bound to the selected
GRES (i.e. the CPUs identified in the gres.conf file will be strictly
enforced). This option may result in delayed initiation of a job.
For example a job requiring two GPUs and one CPU will be delayed until both
GPUs on a single socket are available rather than using GPUs bound to separate
sockets, however the application performance may be improved due to improved
communication speed.
Requires the node to be configured with more than one socket and resource
filtering will be performed on a per\-socket basis.
.RE

.TP
\fB\-H, \-\-hold\fR
Specify the job is to be submitted in a held state (priority of zero).
A held job can now be released using scontrol to reset its priority
(e.g. "\fIscontrol release <job_id>\fR"). This option applies to job
allocations.

.TP
\fB\-h\fR, \fB\-\-help\fR
Display help information and exit.

.TP
\fB\-\-hint\fR=<\fItype\fR>
Bind tasks according to application hints.
.RS
.TP
.B compute_bound
Select settings for compute bound applications:
use all cores in each socket, one thread per core.
.TP
.B memory_bound
Select settings for memory bound applications:
use only one core in each socket, one thread per core.
.TP
.B [no]multithread
[don't] use extra threads with in-core multi-threading
which can benefit communication intensive applications.
Only supported with the task/affinity plugin.
.TP
.B help
show this help message
.TP
This option applies to job allocations.
.RE

.TP
\fB\-I\fR, \fB\-\-immediate\fR[=<\fIseconds\fR>]
exit if resources are not available within the
time period specified.
If no argument is given, resources must be available immediately
for the request to succeed.
By default, \fB\-\-immediate\fR is off, and the command
will block until resources become available. Since this option's
argument is optional, for proper parsing the single letter option
must be followed immediately with the value and not include a
space between them. For example "\-I60" and not "\-I 60". This option applies
to job and step allocations.

.TP
\fB\-i\fR, \fB\-\-input\fR=<\fImode\fR>
Specify how stdin is to redirected. By default,
.B srun
redirects stdin from the terminal all tasks. See \fBIO Redirection\fR
below for more options.
For OS X, the poll() function does not support stdin, so input from
a terminal is not possible. This option applies to job and step allocations.

.TP
\fB\-J\fR, \fB\-\-job\-name\fR=<\fIjobname\fR>
Specify a name for the job. The specified name will appear along with
the job id number when querying running jobs on the system. The default
is the supplied \fBexecutable\fR program's name. NOTE: This information
may be written to the slurm_jobacct.log file. This file is space delimited
so if a space is used in the \fIjobname\fR name it will cause problems in
properly displaying the contents of the slurm_jobacct.log file when the
\fBsacct\fR command is used. This option applies to job and step allocations.

.TP
\fB\-\-jobid\fR=<\fIjobid\fR>
Initiate a job step under an already allocated job with job id \fIid\fR.
Using this option will cause \fBsrun\fR to behave exactly as if the
SLURM_JOB_ID environment variable was set. This option applies to step
allocations.

.TP
\fB\-K\fR, \fB\-\-kill\-on\-bad\-exit\fR[=0|1]
Controls whether or not to terminate a step if any task exits with a non\-zero
exit code. If this option is not specified, the default action will be based
upon the Slurm configuration parameter of \fBKillOnBadExit\fR. If this option
is specified, it will take precedence over \fBKillOnBadExit\fR. An option
argument of zero will not terminate the job. A non\-zero argument or no
argument will terminate the job.
Note: This option takes precedence over the \fB\-W\fR, \fB\-\-wait\fR option
to terminate the job immediately if a task exits with a non\-zero exit code.
Since this option's argument is optional, for proper parsing the
single letter option must be followed immediately with the value and
not include a space between them. For example "\-K1" and not "\-K 1".

.TP
\fB\-k\fR, \fB\-\-no\-kill\fR [=off]
Do not automatically terminate a job if one of the nodes it has been
allocated fails. This option applies to job and step allocations.
The job will assume all responsibilities for fault\-tolerance.
Tasks launch using this option will not be considered terminated
(e.g. \fB\-K\fR, \fB\-\-kill\-on\-bad\-exit\fR and
\fB\-W\fR, \fB\-\-wait\fR options will have no effect upon the job step).
The active job step (MPI job) will likely suffer a fatal error,
but subsequent job steps may be run if this option is specified.

Specify an optional argument of "off" disable the effect of the
\fBSLURM_NO_KILL\fR environment variable.

The default action is to terminate the job upon node failure.

.TP
\fB\-l\fR, \fB\-\-label\fR
Prepend task number to lines of stdout/err.
The \fB\-\-label\fR option will prepend lines of output with the remote
task id. This option applies to step allocations.

.TP
\fB\-L\fR, \fB\-\-licenses\fR=<\fBlicense\fR>
Specification of licenses (or other resources available on all
nodes of the cluster) which must be allocated to this job.
License names can be followed by a colon and count
(the default count is one).
Multiple license names should be comma separated (e.g.
"\-\-licenses=foo:4,bar"). This option applies to job allocations.

.TP
\fB\-M\fR, \fB\-\-clusters\fR=<\fIstring\fR>
Clusters to issue commands to.  Multiple cluster names may be comma separated.
The job will be submitted to the one cluster providing the earliest expected
job initiation time. The default value is the current cluster. A value of
\(aq\fIall\fR' will query to run on all clusters.  Note the
\fB\-\-export\fR option to control environment variables exported
between clusters.
This option applies only to job allocations.
Note that the SlurmDBD must be up for this option to work properly.

.TP
.na
\fB\-m\fR, \fB\-\-distribution\fR=
\fI*\fR|\fIblock\fR|\fIcyclic\fR|\fIarbitrary\fR|\fIplane=<options>
\fR[:\fI*\fR|\fIblock\fR|\fIcyclic\fR|\fIfcyclic\fR[:\fI*\fR|\fIblock\fR|
\fIcyclic\fR|\fIfcyclic\fR]][,\fIPack\fR|\fINoPack\fR]
.ad

Specify alternate distribution methods for remote processes.
This option controls the distribution of tasks to the nodes on which
resources have been allocated, and the distribution of those resources
to tasks for binding (task affinity). The first distribution
method (before the first ":") controls the distribution of tasks to nodes. 
The second distribution method (after the first ":")
controls the distribution of allocated CPUs across sockets for binding
to tasks. The third distribution method (after the second ":") controls
the distribution of allocated CPUs across cores for binding to tasks.
The second and third distributions apply only if task affinity is enabled.
The third distribution is supported only if the task/cgroup plugin is
configured. The default value for each distribution type is specified by *.

Note that with select/cons_res, the number of CPUs allocated on each
socket and node may be different. Refer to
https://slurm.schedmd.com/mc_support.html
for more information on resource allocation, distribution of tasks to
nodes, and binding of tasks to CPUs.
.RS
First distribution method (distribution of tasks across nodes):

.TP
.B *
Use the default method for distributing tasks to nodes (block).
.TP
.B block
The block distribution method will distribute tasks to a node such
that consecutive tasks share a node. For example, consider an
allocation of three nodes each with two cpus. A four\-task block
distribution request will distribute those tasks to the nodes with
tasks one and two on the first node, task three on the second node,
and task four on the third node.  Block distribution is the default
behavior if the number of tasks exceeds the number of allocated nodes.
.TP
.B cyclic
The cyclic distribution method will distribute tasks to a node such
that consecutive tasks are distributed over consecutive nodes (in a
round\-robin fashion). For example, consider an allocation of three
nodes each with two cpus. A four\-task cyclic distribution request
will distribute those tasks to the nodes with tasks one and four on
the first node, task two on the second node, and task three on the
third node.
Note that when SelectType is select/cons_res, the same number of CPUs
may not be allocated on each node. Task distribution will be
round\-robin among all the nodes with CPUs yet to be assigned to tasks.
Cyclic distribution is the default behavior if the number
of tasks is no larger than the number of allocated nodes.
.TP
.B plane
The tasks are distributed in blocks of a specified size.  The options
include a number representing the size of the task block.  This is
followed by an optional specification of the task distribution scheme
within a block of tasks and between the blocks of tasks.  The number of tasks
distributed to each node is the same as for cyclic distribution, but the
taskids assigned to each node depend on the plane size. For more
details (including examples and diagrams), please see
.br
https://slurm.schedmd.com/mc_support.html
.br
and
.br
https://slurm.schedmd.com/dist_plane.html
.TP
.B arbitrary
The arbitrary method of distribution will allocate processes in\-order
as listed in file designated by the environment variable
SLURM_HOSTFILE.  If this variable is listed it will over ride any
other method specified.  If not set the method will default to block.
Inside the hostfile must contain at minimum the number of hosts
requested and be one per line or comma separated.  If specifying a
task count (\fB\-n\fR, \fB\-\-ntasks\fR=<\fInumber\fR>), your tasks
will be laid out on the nodes in the order of the file.
.br
\fBNOTE:\fR The arbitrary distribution option on a job allocation only
controls the nodes to be allocated to the job and not the allocation of
CPUs on those nodes. This option is meant primarily to control a job step's
task layout in an existing job allocation for the srun command.
.br
\fBNOTE:\fR If number of tasks is given and a list of requested nodes is also
given the number of nodes used from that list will be reduced to match that of
the number of tasks if the number of nodes in the list is greater than the
number of tasks.

.TP
Second distribution method (distribution of CPUs across sockets for binding):

.TP
.B *
Use the default method for distributing CPUs across sockets (cyclic).
.TP
.B block
The block distribution method will distribute allocated CPUs 
consecutively from the same socket for binding to tasks, before using
the next consecutive socket.
.TP
.B cyclic
The cyclic distribution method will distribute allocated CPUs for
binding to a given task consecutively from the same socket, and
from the next consecutive socket for the next task, in a 
round\-robin fashion across sockets. 
.TP
.B fcyclic
The fcyclic distribution method will distribute allocated CPUs 
for binding to tasks from consecutive sockets in a
round\-robin fashion across the sockets.

.TP
Third distribution method (distribution of CPUs across cores for binding):

.TP
.B *
Use the default method for distributing CPUs across cores
(inherited from second distribution method).
.TP
.B block
The block distribution method will distribute allocated CPUs 
consecutively from the same core for binding to tasks, before using
the next consecutive core.
.TP
.B cyclic
The cyclic distribution method will distribute allocated CPUs for
binding to a given task consecutively from the same core, and
from the next consecutive core for the next task, in a 
round\-robin fashion across cores. 
.TP
.B fcyclic
The fcyclic distribution method will distribute allocated CPUs 
for binding to tasks from consecutive cores in a
round\-robin fashion across the cores.


.TP
Optional control for task distribution over nodes:

.TP
.B Pack
Rather than evenly distributing a job step's tasks evenly across it's allocated
nodes, pack them as tightly as possible on the nodes.
.TP
.B NoPack
Rather than packing a job step's tasks as tightly as possible on the nodes,
distribute them evenly.
This user option will supersede the SelectTypeParameters CR_Pack_Nodes
configuration parameter.
.TP
This option applies to job and step allocations.
.RE

.TP
\fB\-\-mail\-type\fR=<\fItype\fR>
Notify user by email when certain event types occur.
Valid \fItype\fR values are NONE, BEGIN, END, FAIL, REQUEUE, ALL (equivalent to
BEGIN, END, FAIL, REQUEUE, and STAGE_OUT), STAGE_OUT (burst buffer stage out
and teardown completed), TIME_LIMIT, TIME_LIMIT_90 (reached 90 percent of time limit),
TIME_LIMIT_80 (reached 80 percent of time limit), and TIME_LIMIT_50
(reached 50 percent of time limit).
Multiple \fItype\fR values may be specified in a comma separated list.
The user to be notified is indicated with \fB\-\-mail\-user\fR. This option
applies to job allocations.

.TP
\fB\-\-mail\-user\fR=<\fIuser\fR>
User to receive email notification of state changes as defined by
\fB\-\-mail\-type\fR.
The default value is the submitting user. This option applies to job
allocations.

.TP
\fB\-\-mcs\-label\fR=<\fImcs\fR>
Used only when the mcs/group plugin is enabled.
This parameter is a group among the groups of the user.
Default value is calculated by the Plugin mcs if it's enabled. This option
applies to job allocations.

.TP
\fB\-\-mem\fR=<\fIsize[units]\fR>
Specify the real memory required per node.
Default units are megabytes unless the SchedulerParameters configuration
parameter includes the "default_gbytes" option for gigabytes.
Different units can be specified using the suffix [K|M|G|T].
Default value is \fBDefMemPerNode\fR and the maximum value is
\fBMaxMemPerNode\fR. If configured, both of parameters can be
seen using the \fBscontrol show config\fR command.
This parameter would generally be used if whole nodes
are allocated to jobs (\fBSelectType=select/linear\fR).
Specifying a memory limit of zero for a job step will restrict the job step
to the amount of memory allocated to the job, but not remove any of the job's
memory allocation from being available to other job steps.
Also see fB\-\-mem\-per\-cpu\fR and fB\-\-mem\-per\-gpu\fR.
The \fB\-\-mem\fR, \fB\-\-mem\-per\-cpu\fR and fB\-\-mem\-per\-gpu\fR
options are mutually exclusive.

NOTE: A memory size specification of zero is treated as a special case and
grants the job access to all of the memory on each node for newly submitted jobs
and all available job memory to a new job steps.

Specificing new memory limits for job steps are only advisory.

If the job is allocated multiple nodes in a heterogeneous cluster, the memory
limit on each node will be that of the node in the allocation with the smallest
memory size (same limit will apply to every node in the job's allocation).

NOTE: Enforcement of memory limits currently relies upon the task/cgroup plugin
or enabling of accounting, which samples memory use on a periodic basis (data
need not be stored, just collected). In both cases memory use is based upon
the job's Resident Set Size (RSS). A task may exceed the memory limit until
the next periodic accounting sample.

This option applies to job and step allocations.

.TP
\fB\-\-mem\-per\-cpu\fR=<\fIsize[units]\fR>
Minimum memory required per allocated CPU.
Default units are megabytes unless the SchedulerParameters configuration
parameter includes the "default_gbytes" option for gigabytes.
Different units can be specified using the suffix [K|M|G|T].
Default value is \fBDefMemPerCPU\fR and the maximum value is \fBMaxMemPerCPU\fR
(see exception below). If configured, both of parameters can be
seen using the \fBscontrol show config\fR command.
Note that if the job's \fB\-\-mem\-per\-cpu\fR value exceeds the configured
\fBMaxMemPerCPU\fR, then the user's limit will be treated as a memory limit
per task; \fB\-\-mem\-per\-cpu\fR will be reduced to a value no larger than
\fBMaxMemPerCPU\fR; \fB\-\-cpus\-per\-task\fR will be set and the value of
\fB\-\-cpus\-per\-task\fR multiplied by the new \fB\-\-mem\-per\-cpu\fR
value will equal the original \fB\-\-mem\-per\-cpu\fR value specified by
the user.
This parameter would generally be used if individual processors
are allocated to jobs (\fBSelectType=select/cons_res\fR).
If resources are allocated by the core, socket or whole nodes; the number
of CPUs allocated to a job may be higher than the task count and the value
of \fB\-\-mem\-per\-cpu\fR should be adjusted accordingly.
Specifying a memory limit of zero for a job step will restrict the job step
to the amount of memory allocated to the job, but not remove any of the job's
memory allocation from being available to other job steps.
Also see \fB\-\-mem\fR and fB\-\-mem\-per\-gpu\fR.
The \fB\-\-mem\fR, \fB\-\-mem\-per\-cpu\fR and fB\-\-mem\-per\-gpu\fR
options are mutually exclusive.

.TP
\fB\-\-mem\-per\-gpu\fR=<\fIsize[units]\fR>
Minimum memory required per allocated GPU.
Default units are megabytes unless the SchedulerParameters configuration
parameter includes the "default_gbytes" option for gigabytes.
Different units can be specified using the suffix [K|M|G|T].
Default value is \fBDefMemPerGPU\fR and is available on both a global and
per partition basis.
If configured, the parameters can be seen using the \fBscontrol show config\fR
and \fBscontrol show partition\fR commands.
Also see \fB\-\-mem\fR.
The \fB\-\-mem\fR, \fB\-\-mem\-per\-cpu\fR and fB\-\-mem\-per\-gpu\fR
options are mutually exclusive.

.TP
\fB\-\-mem\-bind\fR=[{\fIquiet,verbose\fR},]\fItype\fR
Bind tasks to memory. Used only when the task/affinity plugin is enabled
and the NUMA memory functions are available.
\fBNote that the resolution of CPU and memory binding
may differ on some architectures.\fR For example, CPU binding may be performed
at the level of the cores within a processor while memory binding will
be performed at the level of nodes, where the definition of "nodes"
may differ from system to system.
By default no memory binding is performed; any task using any CPU can use
any memory. This option is typically used to ensure that each task is bound to
the memory closest to it's assigned CPU. \fBThe use of any type other than
"none" or "local" is not recommended.\fR
If you want greater control, try running a simple test code with the
options "\-\-cpu\-bind=verbose,none \-\-mem\-bind=verbose,none" to determine
the specific configuration.

NOTE: To have Slurm always report on the selected memory binding for
all commands executed in a shell, you can enable verbose mode by
setting the SLURM_MEM_BIND environment variable value to "verbose".

The following informational environment variables are set when
\fB\-\-mem\-bind\fR is in use:

.nf
	SLURM_MEM_BIND_LIST
	SLURM_MEM_BIND_PREFER
	SLURM_MEM_BIND_SORT
	SLURM_MEM_BIND_TYPE
	SLURM_MEM_BIND_VERBOSE
.fi

See the \fBENVIRONMENT VARIABLES\fR section for a more detailed description
of the individual SLURM_MEM_BIND* variables.

Supported options include:
.RS
.TP
.B help
show this help message
.TP
.B local
Use memory local to the processor in use
.TP
.B map_mem:<list>
Bind by setting memory masks on tasks (or ranks) as specified where <list> is
<numa_id_for_task_0>,<numa_id_for_task_1>,...
The mapping is specified for a node and identical mapping is applied to the
tasks on every node (i.e. the lowest task ID on each node is mapped to the
first ID specified in the list, etc.).
NUMA IDs are interpreted as decimal values unless they are preceded
with '0x' in which case they interpreted as hexadecimal values.
If the number of tasks (or ranks) exceeds the number of elements in this list,
elements in the list will be reused as needed starting from the beginning of
the list.
To simplify support for large task counts, the lists may follow a map with an
asterisk and repetition count
For example "map_mem:0x0f*4,0xf0*4".
Not supported unless the entire node is allocated to the job.
.TP
.B mask_mem:<list>
Bind by setting memory masks on tasks (or ranks) as specified where <list> is
<numa_mask_for_task_0>,<numa_mask_for_task_1>,...
The mapping is specified for a node and identical mapping is applied to the
tasks on every node (i.e. the lowest task ID on each node is mapped to the
first mask specified in the list, etc.).
NUMA masks are \fBalways\fR interpreted as hexadecimal values.
Note that masks must be preceded with a '0x' if they don't begin
with [0-9] so they are seen as numerical values.
If the number of tasks (or ranks) exceeds the number of elements in this list,
elements in the list will be reused as needed starting from the beginning of
the list.
To simplify support for large task counts, the lists may follow a mask with an
asterisk and repetition count
For example "mask_mem:0*4,1*4".
Not supported unless the entire node is allocated to the job.
.TP
.B no[ne]
don't bind tasks to memory (default)
.TP
.B nosort
avoid sorting free cache pages (default, LaunchParameters configuration
parameter can override this default)
.TP
.B p[refer]
Prefer use of first specified NUMA node, but permit
 use of other available NUMA nodes.
.TP
.B q[uiet]
quietly bind before task runs (default)
.TP
.B rank
bind by task rank (not recommended)
.TP
.B sort
sort free cache pages (run zonesort on Intel KNL nodes)
.TP
.B v[erbose]
verbosely report binding before task runs
.TP
This option applies to job and step allocations.
.RE

.TP
\fB\-\-mincpus\fR=<\fIn\fR>
Specify a minimum number of logical cpus/processors per node. This option
applies to job allocations.

.TP
\fB\-\-msg\-timeout\fR=<\fIseconds\fR>
Modify the job launch message timeout.
The default value is \fBMessageTimeout\fR in the Slurm configuration file slurm.conf.
Changes to this are typically not recommended, but could be useful to diagnose problems.
This option applies to job allocations.

.TP
\fB\-\-mpi\fR=<\fImpi_type\fR>
Identify the type of MPI to be used. May result in unique initiation
procedures.
.RS
.TP
.B list
Lists available mpi types to choose from.
.TP
.B openmpi
For use with OpenMPI.
.TP
.B pmi2
To enable PMI2 support. The PMI2 support in Slurm works only if the MPI
implementation supports it, in other words if the MPI has the PMI2
interface implemented. The \-\-mpi=pmi2 will load the library
lib/slurm/mpi_pmi2.so which provides the server side functionality but
the client side must implement PMI2_Init() and the other interface calls.
.TP
.B pmix
To enable PMIx support (http://pmix.github.io/master). The PMIx support
in Slurm can be used to launch parallel applications (e.g. MPI) if it
supports PMIx, PMI2 or PMI1. Slurm must be configured with pmix support
by passing "--with-pmix=<PMIx installation path>" option to its 
"./configure" script.

At the time of writing PMIx is supported in Open MPI starting from version 2.0.
PMIx also supports backward compatibility with PMI1 and PMI2 and can be 
used if MPI was configured with PMI2/PMI1 support pointing to the PMIx library
("libpmix").
If MPI supports PMI1/PMI2 but doesn't provide the way to point to a specific 
implementation, a hack'ish solution leveraging LD_PRELOAD can be used to 
force "libpmix" usage.

.TP
.B none
No special MPI processing. This is the default and works with
many other versions of MPI.
.TP
This option applies to step allocations.
.RE

.TP
\fB\-\-multi\-prog\fR
Run a job with different programs and different arguments for
each task. In this case, the executable program specified is
actually a configuration file specifying the executable and
arguments for each task. See \fBMULTIPLE PROGRAM CONFIGURATION\fR
below for details on the configuration file contents. This option applies to
step allocations.

.TP
\fB\-N\fR, \fB\-\-nodes\fR=<\fIminnodes\fR[\-\fImaxnodes\fR]>
Request that a minimum of \fIminnodes\fR nodes be allocated to this job.
A maximum node count may also be specified with \fImaxnodes\fR.
If only one number is specified, this is used as both the minimum and
maximum node count.
The partition's node limits supersede those of the job.
If a job's node limits are outside of the range permitted for its
associated partition, the job will be left in a PENDING state.
This permits possible execution at a later time, when the partition
limit is changed.
If a job node limit exceeds the number of nodes configured in the
partition, the job will be rejected.
Note that the environment
variable \fBSLURM_JOB_NUM_NODES\fR (and \fBSLURM_NNODES\fR for backwards compatibility)
will be set to the count of nodes actually
allocated to the job. See the \fBENVIRONMENT VARIABLES\fR section
for more information.  If \fB\-N\fR is not specified, the default
behavior is to allocate enough nodes to satisfy the requirements of
the \fB\-n\fR and \fB\-c\fR options.
The job will be allocated as many nodes as possible within the range specified
and without delaying the initiation of the job.
If number of tasks is given and a number of requested nodes is also given the
number of nodes used from that request will be reduced to match that of the
number of tasks if the number of nodes in the request is greater than the number
of tasks.
The node count specification may include a numeric value followed by a suffix
of "k" (multiplies numeric value by 1,024) or "m" (multiplies numeric value by
1,048,576). This option applies to job and step allocations.

.TP
\fB\-n\fR, \fB\-\-ntasks\fR=<\fInumber\fR>
Specify the number of tasks to run. Request that \fBsrun\fR
allocate resources for \fIntasks\fR tasks.
The default is one task per node, but note
that the \fB\-\-cpus\-per\-task\fR option will change this default. This option
applies to job and step allocations.

.TP
\fB\-\-network\fR=<\fItype\fR>
Specify information pertaining to the switch or network.
The interpretation of \fItype\fR is system dependent.
This option is supported when running Slurm on a Cray natively.  It is
used to request using Network Performance Counters.
Only one value per request is valid.
All options are case in\-sensitive.
In this configuration supported values include:
.RS
.TP 6
\fBsystem\fR
Use the system\-wide network performance counters. Only nodes requested
will be marked in use for the job allocation.  If the job does not
fill up the entire system the rest of the nodes are not
able to be used by other jobs using NPC, if idle their state will appear as
PerfCnts.  These nodes are still available for other jobs not using NPC.
.TP
\fBblade\fR
Use the blade network performance counters. Only nodes requested
will be marked in use for the job allocation.  If the job does not
fill up the entire blade(s) allocated to the job those blade(s) are not
able to be used by other jobs using NPC, if idle their state will appear as
PerfCnts.  These nodes are still available for other jobs not using NPC.
.TP
.RE

.br
.br
In all cases the job or step allocation request \fBmust specify the
\-\-exclusive option\fR.  Otherwise the request will be denied.

.br
.br
Also with any of these options steps are not allowed to share blades,
so resources would remain idle inside an allocation if the step
running on a blade does not take up all the nodes on the blade.

.br
.br
The \fBnetwork\fR option is also supported on systems with IBM's Parallel Environment (PE).
See IBM's LoadLeveler job command keyword documentation about the keyword
"network" for more information.
Multiple values may be specified in a comma separated list.
All options are case in\-sensitive.
Supported values include:
.RS
.TP 12
\fBBULK_XFER\fR[=<\fIresources\fR>]
Enable bulk transfer of data using Remote Direct-Memory Access (RDMA).
The optional \fIresources\fR specification is a numeric value which can have
a suffix of "k", "K", "m", "M", "g" or "G" for kilobytes, megabytes or
gigabytes.
NOTE: The \fIresources\fR specification is not supported by the underlying
IBM infrastructure as of Parallel Environment version 2.2 and no value should
be specified at this time.
The devices allocated to a job must all be of the same type.
The default value depends upon depends upon what hardware is available and in
order of preferences is IPONLY (which is not considered in User Space mode),
HFI, IB, HPCE, and KMUX.
.TP
\fBCAU\fR=<\fIcount\fR>
Number of Collective Acceleration Units (CAU) required.
Applies only to IBM Power7-IH processors.
Default value is zero.
Independent CAU will be allocated for each programming interface (MPI, LAPI, etc.)
.TP
\fBDEVNAME\fR=<\fIname\fR>
Specify the device name to use for communications (e.g. "eth0" or "mlx4_0").
.TP
\fBDEVTYPE\fR=<\fItype\fR>
Specify the device type to use for communications.
The supported values of \fItype\fR are:
"IB" (InfiniBand), "HFI" (P7 Host Fabric Interface),
"IPONLY" (IP-Only interfaces), "HPCE" (HPC Ethernet), and
"KMUX" (Kernel Emulation of HPCE).
The devices allocated to a job must all be of the same type.
The default value depends upon depends upon what hardware is available and in
order of preferences is IPONLY (which is not considered in User Space mode),
HFI, IB, HPCE, and KMUX.
.TP
\fBIMMED\fR =<\fIcount\fR>
Number of immediate send slots per window required.
Applies only to IBM Power7-IH processors.
Default value is zero.
.TP
\fBINSTANCES\fR =<\fIcount\fR>
Specify number of network connections for each task on each network connection.
The default instance count is 1.
.TP
\fBIPV4\fR
Use Internet Protocol (IP) version 4 communications (default).
.TP
\fBIPV6\fR
Use Internet Protocol (IP) version 6 communications.
.TP
\fBLAPI\fR
Use the LAPI programming interface.
.TP
\fBMPI\fR
Use the MPI programming interface.
MPI is the default interface.
.TP
\fBPAMI\fR
Use the PAMI programming interface.
.TP
\fBSHMEM\fR
Use the OpenSHMEM programming interface.
.TP
\fBSN_ALL\fR
Use all available switch networks (default).
.TP
\fBSN_SINGLE\fR
Use one available switch network.
.TP
\fBUPC\fR
Use the UPC programming interface.
.TP
\fBUS\fR
Use User Space communications.
.TP

Some examples of network specifications:
.TP
\fBInstances=2,US,MPI,SN_ALL\fR
Create two user space connections for MPI communications on every switch
network for each task.
.TP
\fBUS,MPI,Instances=3,Devtype=IB\fR
Create three user space connections for MPI communications on every InfiniBand
network for each task.
.TP
\fBIPV4,LAPI,SN_Single\fR
Create a IP version 4 connection for LAPI communications on one switch network
for each task.
.TP
\fBInstances=2,US,LAPI,MPI\fR
Create two user space connections each for LAPI and MPI communications on every
switch network for each task. Note that SN_ALL is the default option so every
switch network is used. Also note that Instances=2 specifies that two
connections are established for each protocol (LAPI and MPI) and each task.
If there are two networks and four tasks on the node then a total
of 32 connections are established (2 instances x 2 protocols x 2 networks x
4 tasks).
.TP
This option applies to job and step allocations.
.RE

.TP
\fB\-\-nice\fR[=\fIadjustment\fR]
Run the job with an adjusted scheduling priority within Slurm. With no
adjustment value the scheduling priority is decreased by 100. A negative nice
value increases the priority, otherwise decreases it. The adjustment range is
+/\- 2147483645. Only privileged users can specify a negative adjustment.

.TP
\fB\-\-ntasks\-per\-core\fR=<\fIntasks\fR>
Request the maximum \fIntasks\fR be invoked on each core.
This option applies to the job allocation, but not to step allocations.
Meant to be used with the \fB\-\-ntasks\fR option.
Related to \fB\-\-ntasks\-per\-node\fR except at the core level
instead of the node level.  Masks will automatically be generated
to bind the tasks to specific core unless \fB\-\-cpu\-bind=none\fR
is specified.
NOTE: This option is not supported unless \fISelectType=cons_res\fR is
configured (either directly or indirectly on Cray systems)
along with the node's core count.

.TP
\fB\-\-ntasks\-per\-node\fR=<\fIntasks\fR>
Request that \fIntasks\fR be invoked on each node.
If used with the \fB\-\-ntasks\fR option, the \fB\-\-ntasks\fR option will take
precedence and the \fB\-\-ntasks\-per\-node\fR will be treated as a
\fImaximum\fR count of tasks per node.
Meant to be used with the \fB\-\-nodes\fR option.
This is related to \fB\-\-cpus\-per\-task\fR=\fIncpus\fR,
but does not require knowledge of the actual number of cpus on
each node.  In some cases, it is more convenient to be able to
request that no more than a specific number of tasks be invoked
on each node.  Examples of this include submitting
a hybrid MPI/OpenMP app where only one MPI "task/rank" should be
assigned to each node while allowing the OpenMP portion to utilize
all of the parallelism present in the node, or submitting a single
setup/cleanup/monitoring job to each node of a pre\-existing
allocation as one step in a larger job script. This option applies to job
allocations.

.TP
\fB\-\-ntasks\-per\-socket\fR=<\fIntasks\fR>
Request the maximum \fIntasks\fR be invoked on each socket.
This option applies to the job allocation, but not to step allocations.
Meant to be used with the \fB\-\-ntasks\fR option.
Related to \fB\-\-ntasks\-per\-node\fR except at the socket level
instead of the node level.  Masks will automatically be generated
to bind the tasks to specific sockets unless \fB\-\-cpu\-bind=none\fR
is specified.
NOTE: This option is not supported unless \fISelectType=cons_res\fR is
configured (either directly or indirectly on Cray systems)
along with the node's socket count.

.TP
\fB\-O\fR, \fB\-\-overcommit\fR
Overcommit resources. This option applies to job and step allocations.
When applied to job allocation, only one CPU is allocated to the job per node
and options used to specify the number of tasks per node, socket, core, etc.
are ignored.
When applied to job step allocations (the \fBsrun\fR command when executed
within an existing job allocation), this option can be used to launch more than
one task per CPU.
Normally, \fBsrun\fR will not allocate more than one process per CPU.
By specifying \fB\-\-overcommit\fR you are explicitly allowing more than one
process per CPU. However no more than \fBMAX_TASKS_PER_NODE\fR tasks are
permitted to execute per node.  NOTE: \fBMAX_TASKS_PER_NODE\fR is
defined in the file \fIslurm.h\fR and is not a variable, it is set at
Slurm build time.

.TP
\fB\-o\fR, \fB\-\-output\fR=<\fIfilename pattern\fR>
Specify the "\fIfilename pattern\fR" for stdout redirection. By default in
interactive mode,
.B srun
collects stdout from all tasks and sends this output via TCP/IP to
the attached terminal. With \fB\-\-output\fR stdout may be redirected
to a file, to one file per task, or to /dev/null. See section
\fBIO Redirection\fR below for the various forms of \fIfilename pattern\fR.
If the specified file already exists, it will be overwritten.
.br

If \fB\-\-error\fR is not also specified on the command line, both
stdout and stderr will directed to the file specified by \fB\-\-output\fR. This
option applies to job and step allocations.

.TP
\fB\-\-open\-mode\fR=<\fIappend|truncate\fR>
Open the output and error files using append or truncate mode as specified.
For heterogeneous job steps the default value is "append". 
Otherwise the default value is specified by the system configuration parameter
\fIJobFileAppend\fR. This option applies to job and step allocations.

.TP
\fB\-\-pack\-group\fR=<\fIexpr\fR>
Identify each job in a heterogeneous job allocation for which a step is
to be created. Applies only to srun commands issued inside a salloc allocation
or sbatch script.
\fR<\fIexpr\fR> is a set of integers corresponding to one or more options
indexes on the salloc or sbatch command line.
Examples: "\-\-pack\-group=2", "\-\-pack\-group=0,4", "\-\-pack\-group=1,3\-5".
The default value is \-\-pack\-group=0.

.TP
\fB\-p\fR, \fB\-\-partition\fR=<\fIpartition_names\fR>
Request a specific partition for the resource allocation.  If not specified,
the default behavior is to allow the slurm controller to select the default
partition as designated by the system administrator. If the job can use more
than one partition, specify their names in a comma separate list and the one
offering earliest initiation will be used with no regard given to the partition
name ordering (although higher priority partitions will be considered first).
When the job is initiated, the name of the partition used will be placed first
in the job record partition string. This option applies to job allocations.

.TP
\fB\-\-power\fR=<\fIflags\fR>
Comma separated list of power management plugin options.
Currently available flags include:
level (all nodes allocated to the job should have identical power caps,
may be disabled by the Slurm configuration option PowerParameters=job_no_level).
This option applies to job allocations.

.TP
\fB\-\-priority\fR=<\fIvalue\fR>
Request a specific job priority.
May be subject to configuration specific constraints.
\fIvalue\fR should either be a numeric value or "TOP" (for highest possible value).
Only Slurm operators and administrators can set the priority of a job.
This option applies to job allocations only.

.TP
\fB\-\-profile\fR=<all|none|[energy[,|task[,|filesystem[,|network]]]]>
enables detailed data collection by the acct_gather_profile plugin.
Detailed data are typically time-series that are stored in an HDF5 file for
the job or an InfluxDB database depending on the configured plugin.

.RS
.TP 10
\fBAll\fR
All data types are collected. (Cannot be combined with other values.)

.TP
\fBNone\fR
No data types are collected. This is the default.
 (Cannot be combined with other values.)

.TP
\fBEnergy\fR
Energy data is collected.

.TP
\fBTask\fR
Task (I/O, Memory, ...) data is collected.

.TP
\fBFilesystem\fR
Filesystem data is collected.

.TP
\fBNetwork\fR
Network (InfiniBand) data is collected.

.TP
This option applies to job and step allocations.
.RE

.TP
\fB\-\-prolog\fR=<\fIexecutable\fR>
\fBsrun\fR will run \fIexecutable\fR just before launching the job step.
The command line arguments for \fIexecutable\fR will be the command
and arguments of the job step.  If \fIexecutable\fR is "none", then
no srun prolog will be run. This parameter overrides the SrunProlog
parameter in slurm.conf. This parameter is completely independent from
the Prolog parameter in slurm.conf. This option applies to job allocations.

.TP
\fB\-\-propagate\fR[=\fIrlimit[,rlimit...]\fR]
Allows users to specify which of the modifiable (soft) resource limits
to propagate to the compute nodes and apply to their jobs. If no
\fIrlimit\fR is specified, then all resource limits will be propagated.
The following rlimit names are supported by Slurm (although some
options may not be supported on some systems):
.RS
.TP 10
\fBALL\fR
All limits listed below (default)
.TP
\fBNONE\fR
No limits listed below
.TP
\fBAS\fR
The maximum address space for a process
.TP
\fBCORE\fR
The maximum size of core file
.TP
\fBCPU\fR
The maximum amount of CPU time
.TP
\fBDATA\fR
The maximum size of a process's data segment
.TP
\fBFSIZE\fR
The maximum size of files created. Note that if the user sets FSIZE to less
than the current size of the slurmd.log, job launches will fail with
a 'File size limit exceeded' error.
.TP
\fBMEMLOCK\fR
The maximum size that may be locked into memory
.TP
\fBNOFILE\fR
The maximum number of open files
.TP
\fBNPROC\fR
The maximum number of processes available
.TP
\fBRSS\fR
The maximum resident set size
.TP
\fBSTACK\fR
The maximum stack size
.TP
This option applies to job allocations.
.RE

.TP
\fB\-\-pty\fR
Execute task zero in pseudo terminal mode.
Implicitly sets \fB\-\-unbuffered\fR.
Implicitly sets \fB\-\-error\fR and \fB\-\-output\fR to /dev/null
for all tasks except task zero, which may cause those tasks to
exit immediately (e.g. shells will typically exit immediately
in that situation).
This option applies to step allocations.

.TP
\fB\-q\fR, \fB\-\-qos\fR=<\fIqos\fR>
Request a quality of service for the job.  QOS values can be defined
for each user/cluster/account association in the Slurm database.
Users will be limited to their association's defined set of qos's when
the Slurm configuration parameter, AccountingStorageEnforce, includes
"qos" in it's definition. This option applies to job allocations.

.TP
\fB\-Q\fR, \fB\-\-quiet\fR
Suppress informational messages from srun. Errors will still be displayed. This
option applies to job and step allocations.

.TP
\fB\-\-quit\-on\-interrupt\fR
Quit immediately on single SIGINT (Ctrl\-C). Use of this option
disables the status feature normally available when \fBsrun\fR receives
a single Ctrl\-C and causes \fBsrun\fR to instead immediately terminate the
running job. This option applies to step allocations.

.TP
\fB\-r\fR, \fB\-\-relative\fR=<\fIn\fR>
Run a job step relative to node \fIn\fR of the current allocation.
This option may be used to spread several job steps out among the
nodes of the current job. If \fB\-r\fR is used, the current job
step will begin at node \fIn\fR of the allocated nodelist, where
the first node is considered node 0.  The \fB\-r\fR option is not
permitted with \fB\-w\fR or \fB\-x\fR option and will result in a
fatal error when not running within a prior allocation (i.e. when
SLURM_JOB_ID is not set). The default for \fIn\fR is 0. If the
value of \fB\-\-nodes\fR exceeds the number of nodes identified
with the \fB\-\-relative\fR option, a warning message will be
printed and the \fB\-\-relative\fR option will take precedence. This option
applies to step allocations.

.TP
\fB\-\-reboot\fR
Force the allocated nodes to reboot before starting the job.
This is only supported with some system configurations and will otherwise be
silently ignored. This option applies to job allocations.

.TP
\fB\-\-resv\-ports\fR[=\fIcount\fR]
Reserve communication ports for this job. Users can specify the number
of port they want to reserve. The parameter MpiParams=ports=12000-12999
must be specified in \fIslurm.conf\fR. If not specified and Slurm's OpenMPI
plugin is used, then by default the number of reserved equal to the highest
number of tasks on any node in the job step allocation.
If the number of reserved ports is zero then no ports is reserved.
Used for OpenMPI. This option applies to job and step allocations.

.TP
\fB\-\-reservation\fR=<\fIname\fR>
Allocate resources for the job from the named reservation. This option applies
to job allocations.

.TP
\fB\-s\fR, \fB\-\-oversubscribe\fR
The job allocation can over\-subscribe resources with other running jobs.
The resources to be over\-subscribed can be nodes, sockets, cores, and/or
hyperthreads depending upon configuration.
The default over\-subscribe behavior depends on system configuration and the
partition's \fBOverSubscribe\fR option takes precedence over the job's option.
This option may result in the allocation being granted sooner than if the
\-\-oversubscribe option was not set and allow higher system utilization, but
application performance will likely suffer due to competition for resources.
Also see the \-\-exclusive option. This option applies to step allocations.

.TP
\fB\-S\fR, \fB\-\-core\-spec\fR=<\fInum\fR>
Count of specialized cores per node reserved by the job for system operations
and not used by the application. The application will not use these cores,
but will be charged for their allocation.
Default value is dependent upon the node's configured CoreSpecCount value.
If a value of zero is designated and the Slurm configuration option
AllowSpecResourcesUsage is enabled, the job will be allowed to override
CoreSpecCount and use the specialized resources on nodes it is allocated.
This option can not be used with the \fB\-\-thread\-spec\fR option. This option
applies to job allocations.

.TP
\fB\-\-signal\fR=<\fIsig_num\fR>[@<\fIsig_time\fR>]
When a job is within \fIsig_time\fR seconds of its end time,
send it the signal \fIsig_num\fR.
Due to the resolution of event handling by Slurm, the signal may
be sent up to 60 seconds earlier than specified.
\fIsig_num\fR may either be a signal number or name (e.g. "10" or "USR1").
\fIsig_time\fR must have an integer value between 0 and 65535.
By default, no signal is sent before the job's end time.
If a \fIsig_num\fR is specified without any \fIsig_time\fR,
the default time will be 60 seconds. This option applies to job allocations.
To have the signal sent at preemption time see
the \fBpreempt_send_user_signal\fR \fBSlurmctldParameter\R.

.TP
\fB\-\-slurmd\-debug\fR=<\fIlevel\fR>
Specify a debug level for slurmd(8). The \fIlevel\fR may be specified either
an integer value between 0 [quiet, only errors are displayed] and 4 [verbose
operation] or the \fISlurmdDebug\fR tags.
.RS
.TP 10
\fBquiet\fR
Log nothing
.TP
\fBfatal\fR
Log only fatal errors
.TP
\fBerror\fR
Log only errors
.TP
\fBinfo\fR
Log errors and general informational messages
.TP
\fBverbose\fR
Log errors and verbose informational messages
.TP
.RE

The slurmd debug information is copied onto the stderr of
the job. By default only errors are displayed. This option applies to job and
step allocations.

.TP
\fB\-\-sockets\-per\-node\fR=<\fIsockets\fR>
Restrict node selection to nodes with at least the specified number of
sockets.  See additional information under \fB\-B\fR option above when
task/affinity plugin is enabled. This option applies to job allocations.

.TP
\fB\-\-spread\-job\fR
Spread the job allocation over as many nodes as possible and attempt to
evenly distribute tasks across the allocated nodes.
This option disables the topology/tree plugin.
This option applies to job allocations.

.TP
\fB\-\-switches\fR=<\fIcount\fR>[@<\fImax\-time\fR>]
When a tree topology is used, this defines the maximum count of switches
desired for the job allocation and optionally the maximum time to wait
for that number of switches. If Slurm finds an allocation containing more
switches than the count specified, the job remains pending until it either finds
an allocation with desired switch count or the time limit expires.
It there is no switch count limit, there is no delay in starting the job.
Acceptable time formats include "minutes", "minutes:seconds",
"hours:minutes:seconds", "days\-hours", "days\-hours:minutes" and
"days\-hours:minutes:seconds".
The job's maximum time delay may be limited by the system administrator using
the \fBSchedulerParameters\fR configuration parameter with the
\fBmax_switch_wait\fR parameter option.
On a dragonfly network the only switch count supported is 1 since communication
performance will be highest when a job is allocate resources on one leaf switch
or more than 2 leaf switches.
The default max\-time is the max_switch_wait SchedulerParameters. This option
applies to job allocations.

.TP
\fB\-T\fR, \fB\-\-threads\fR=<\fInthreads\fR>
Allows limiting the number of concurrent threads used to
send the job request from the srun process to the slurmd
processes on the allocated nodes. Default is to use one
thread per allocated node up to a maximum of 60 concurrent
threads. Specifying this option limits the number of
concurrent threads to \fInthreads\fR (less than or equal to 60).
This should only be used to set a low thread count for testing on
very small memory computers. This option applies to job allocations.

.TP
\fB\-t\fR, \fB\-\-time\fR=<\fItime\fR>
Set a limit on the total run time of the job allocation.  If the
requested time limit exceeds the partition's time limit, the job will
be left in a PENDING state (possibly indefinitely).  The default time
limit is the partition's default time limit.  When the time limit is reached,
each task in each job step is sent SIGTERM followed by SIGKILL.  The
interval between signals is specified by the Slurm configuration
parameter \fBKillWait\fR.  The \fBOverTimeLimit\fR configuration parameter may
permit the job to run longer than scheduled.  Time resolution is one minute
and second values are rounded up to the next minute.

A time limit of zero requests that no time limit be imposed.  Acceptable time
formats include "minutes", "minutes:seconds", "hours:minutes:seconds",
"days\-hours", "days\-hours:minutes" and "days\-hours:minutes:seconds". This
option applies to job and step allocations.

.TP
\fB\-\-task\-epilog\fR=<\fIexecutable\fR>
The \fBslurmstepd\fR daemon will run \fIexecutable\fR just after each task
terminates. This will be executed before any TaskEpilog parameter in
slurm.conf is executed. This is meant to be a very short\-lived
program. If it fails to terminate within a few seconds, it will be
killed along with any descendant processes. This option applies to step
allocations.

.TP
\fB\-\-task\-prolog\fR=<\fIexecutable\fR>
The \fBslurmstepd\fR daemon will run \fIexecutable\fR just before launching
each task. This will be executed after any TaskProlog parameter
in slurm.conf is executed.
Besides the normal environment variables, this has SLURM_TASK_PID
available to identify the process ID of the task being started.
Standard output from this program of the form
"export NAME=value" will be used to set environment variables
for the task being spawned. This option applies to step allocations.

.TP
\fB\-\-test\-only\fR
Returns an estimate of when a job would be scheduled to run given the
current job queue and all the other \fBsrun\fR arguments specifying
the job.  This limits \fBsrun's\fR behavior to just return
information; no job is actually submitted.
The program will be executed directly by the slurmd daemon. This option applies
to job allocations.

.TP
\fB\-\-thread\-spec\fR=<\fInum\fR>
Count of specialized threads per node reserved by the job for system operations
and not used by the application. The application will not use these threads,
but will be charged for their allocation.
This option can not be used with the \fB\-\-core\-spec\fR option. This option
applies to job allocations.

.TP
\fB\-\-threads\-per\-core\fR=<\fIthreads\fR>
Restrict node selection to nodes with at least the specified number of
threads per core.  NOTE: "Threads" refers to the number of processing units on
each core rather than the number of application tasks to be launched per core.
See additional information under \fB\-B\fR option above when task/affinity
plugin is enabled. This option applies to job allocations.

.TP
\fB\-\-time\-min\fR=<\fItime\fR>
Set a minimum time limit on the job allocation.
If specified, the job may have it's \fB\-\-time\fR limit lowered to a value
no lower than \fB\-\-time\-min\fR if doing so permits the job to begin
execution earlier than otherwise possible.
The job's time limit will not be changed after the job is allocated resources.
This is performed by a backfill scheduling algorithm to allocate resources
otherwise reserved for higher priority jobs.
Acceptable time formats include "minutes", "minutes:seconds",
"hours:minutes:seconds", "days\-hours", "days\-hours:minutes" and
"days\-hours:minutes:seconds". This option applies to job allocations.

.TP
\fB\-\-tmp\fR=<\fIsize[units]\fR>
Specify a minimum amount of temporary disk space per node.
Default units are megabytes unless the SchedulerParameters configuration
parameter includes the "default_gbytes" option for gigabytes.
Different units can be specified using the suffix [K|M|G|T].
This option applies to job allocations.

.TP
\fB\-u\fR, \fB\-\-unbuffered\fR
By default the connection between slurmstepd and the user launched application
is over a pipe. The stdio output written by the application is buffered
by the glibc until it is flushed or the output is set as unbuffered.
See setbuf(3). If this option is specified the tasks are executed with
a pseudo terminal so that the application output is unbuffered. This option
applies to step allocations.
.TP
\fB\-\-usage\fR
Display brief help message and exit.

.TP
\fB\-\-uid\fR=<\fIuser\fR>
Attempt to submit and/or run a job as \fIuser\fR instead of the
invoking user id. The invoking user's credentials will be used
to check access permissions for the target partition. User root
may use this option to run jobs as a normal user in a RootOnly
partition for example. If run as root, \fBsrun\fR will drop
its permissions to the uid specified after node allocation is
successful. \fIuser\fR may be the user name or numerical user ID. This option
applies to job and step allocations.

.TP
\fB\-\-use-min-nodes\fR
If a range of node counts is given, prefer the smaller count.

.TP
\fB\-V\fR, \fB\-\-version\fR
Display version information and exit.

.TP
\fB\-v\fR, \fB\-\-verbose\fR
Increase the verbosity of srun's informational messages.  Multiple
\fB\-v\fR's will further increase srun's verbosity.  By default only
errors will be displayed. This option applies to job and step allocations.

.TP
\fB\-W\fR, \fB\-\-wait\fR=<\fIseconds\fR>
Specify how long to wait after the first task terminates before terminating
all remaining tasks. A value of 0 indicates an unlimited wait (a warning will
be issued after 60 seconds). The default value is set by the WaitTime
parameter in the slurm configuration file (see \fBslurm.conf(5)\fR). This
option can be useful to ensure that a job is terminated in a timely fashion
in the event that one or more tasks terminate prematurely.
Note: The \fB\-K\fR, \fB\-\-kill\-on\-bad\-exit\fR option takes precedence
over \fB\-W\fR, \fB\-\-wait\fR to terminate the job immediately if a task
exits with a non\-zero exit code. This option applies to job allocations.

.TP
\fB\-w\fR, \fB\-\-nodelist\fR=<\fIhost1,host2,...\fR or \fIfilename\fR>
Request a specific list of hosts.
The job will contain \fIall\fR of these hosts and possibly additional hosts
as needed to satisfy resource requirements.
The list may be specified as a comma\-separated list of hosts, a range of hosts
(host[1\-5,7,...] for example), or a filename.
The host list will be assumed to be a filename if it contains a "/" character.
If you specify a minimum node or processor count larger than can be satisfied
by the supplied host list, additional resources will be allocated on other
nodes as needed.
Rather than repeating a host name multiple times, an asterisk and
a repetition count may be appended to a host name. For example
"host1,host1" and "host1*2" are equivalent. If number of tasks is given and a
list of requested nodes is also given the number of nodes used from that list
will be reduced to match that of the number of tasks if the number of nodes in
the list is greater than the number of tasks. This option applies to job and
step allocations.

.TP
\fB\-\-wckey\fR=<\fIwckey\fR>
Specify wckey to be used with job.  If TrackWCKey=no (default) in the
slurm.conf this value is ignored. This option applies to job allocations.

.TP
\fB\-X\fR, \fB\-\-disable\-status\fR
Disable the display of task status when srun receives a single SIGINT
(Ctrl\-C). Instead immediately forward the SIGINT to the running job.
Without this option a second Ctrl\-C in one second is required to forcibly
terminate the job and \fBsrun\fR will immediately exit. May also be
set via the environment variable SLURM_DISABLE_STATUS. This option applies to
job allocations.

.TP
\fB\-x\fR, \fB\-\-exclude\fR=<\fIhost1,host2,...\fR or \fIfilename\fR>
Request that a specific list of hosts not be included in the resources
allocated to this job. The host list will be assumed to be a filename
if it contains a "/"character. This option applies to job allocations.

.TP
\fB\-\-x11\fR[=<\fIall\fR|\fIfirst\fR|\fIlast\fR>]
Sets up X11 forwarding on all, first or last node(s) of the allocation. This
option is only enabled if Slurm was compiled with X11 support and
PrologFlags=x11 is defined in the slurm.conf. Default is \fIall\fR.

.TP
\fB\-Z\fR, \fB\-\-no\-allocate\fR
Run the specified tasks on a set of nodes without creating a Slurm
"job" in the Slurm queue structure, bypassing the normal resource
allocation step.  The list of nodes must be specified with the
\fB\-w\fR, \fB\-\-nodelist\fR option.  This is a privileged option
only available for the users "SlurmUser" and "root". This option applies to job
allocations.

.PP
.B srun
will submit the job request to the slurm job controller, then initiate all
processes on the remote nodes. If the request cannot be met immediately,
.B srun
will block until the resources are free to run the job. If the
\fB\-I\fR (\fB\-\-immediate\fR) option is specified
.B srun
will terminate if resources are not immediately available.
.PP
When initiating remote processes
.B srun
will propagate the current working directory, unless
\fB\-\-chdir\fR=<\fIpath\fR> is specified, in which case \fIpath\fR will
become the working directory for the remote processes.
.PP
The \fB\-n\fB, \fB\-c\fR, and \fB\-N\fR options control how CPUs  and
nodes will be allocated to the job. When specifying only the number
of processes to run with \fB\-n\fR, a default of one CPU per process
is allocated. By specifying the number of CPUs required per task (\fB\-c\fR),
more than one CPU may be allocated per process. If the number of nodes
is specified with \fB\-N\fR,
.B srun
will attempt to allocate \fIat least\fR the number of nodes specified.
.PP
Combinations of the above three options may be used to change how
processes are distributed across nodes and cpus. For instance, by specifying
both the number of processes and number of nodes on which to run, the
number of processes per node is implied. However, if the number of CPUs
per process is more important then number of processes (\fB\-n\fR) and the
number of CPUs per process (\fB\-c\fR) should be specified.
.PP
.B srun
will refuse to  allocate more than one process per CPU unless
\fB\-\-overcommit\fR (\fB\-O\fR) is also specified.
.PP
.B srun
will attempt to meet the above specifications "at a minimum." That is,
if 16 nodes are requested for 32 processes, and some nodes do not have
2 CPUs, the allocation of nodes will be increased in order to meet the
demand for CPUs. In other words, a \fIminimum\fR of 16 nodes are being
requested. However, if 16 nodes are requested for 15 processes,
.B srun
will consider this an error, as 15 processes cannot run across 16 nodes.

.PP
.B "IO Redirection"
.PP
By default, stdout and stderr will be redirected from all tasks to the
stdout and stderr of \fBsrun\fR, and stdin will be redirected from the
standard input of \fBsrun\fR to all remote tasks.
If stdin is only to be read by a subset of the spawned tasks, specifying a
file to read from rather than forwarding stdin from the \fBsrun\fR command may
be preferable as it avoids moving and storing data that will never be read.
.PP
For OS X, the poll() function does not support stdin, so input from
a terminal is not possible.
.PP
This behavior may be changed with the
\fB\-\-output\fR, \fB\-\-error\fR, and \fB\-\-input\fR
(\fB\-o\fR, \fB\-e\fR, \fB\-i\fR) options. Valid format specifications
for these options are
.TP 10
\fBall\fR
stdout stderr is redirected from all tasks to srun.
stdin is broadcast to all remote tasks.
(This is the default behavior)
.TP
\fBnone\fR
stdout and stderr is not received from any task.
stdin is not sent to any task (stdin is closed).
.TP
\fBtaskid\fR
stdout and/or stderr are redirected from only the task with relative
id equal to \fItaskid\fR, where 0 <= \fItaskid\fR <= \fIntasks\fR,
where \fIntasks\fR is the total number of tasks in the current job step.
stdin is redirected from the stdin of \fBsrun\fR to this same task.
This file will be written on the node executing the task.
.TP
\fBfilename\fR
\fBsrun\fR will redirect stdout and/or stderr to the named file from
all tasks.
stdin will be redirected from the named file and broadcast to all
tasks in the job.  \fIfilename\fR refers to a path on the host
that runs \fBsrun\fR.  Depending on the cluster's file system layout,
this may result in the output appearing in different places depending
on whether the job is run in batch mode.
.TP
\fBfilename pattern\fR
\fBsrun\fR allows for a filename pattern to be used to generate the
named IO file
described above. The following list of format specifiers may be
used in the format string to generate a filename that will be
unique to a given jobid, stepid, node, or task. In each case,
the appropriate number of files are opened and associated with
the corresponding tasks. Note that any format string containing
%t, %n, and/or %N will be written on the node executing the task
rather than the node where \fBsrun\fR executes, these format specifiers
are not supported on a BGQ system.
.RS 10
.TP
\fB\\\\\fR
Do not process any of the replacement symbols.
.TP
\fB%%\fR
The character "%".
.TP
\fB%A\fR
Job array's master job allocation number.
.TP
\fB%a\fR
Job array ID (index) number.
.TP
\fB%J\fR
jobid.stepid of the running job. (e.g. "128.0")
.TP
\fB%j\fR
jobid of the running job.
.TP
\fB%s\fR
stepid of the running job.
.TP
\fB%N\fR
short hostname. This will create a separate IO file per node.
.TP
\fB%n\fR
Node identifier relative to current job (e.g. "0" is the first node of
the running job) This will create a separate IO file per node.
.TP
\fB%t\fR
task identifier (rank) relative to current job. This will create a
separate IO file per task.
.TP
\fB%u\fR
User name.
.TP
\fB%x\fR
Job name.
.PP
A number placed between the percent character and format specifier may be
used to zero\-pad the result in the IO filename. This number is ignored if
the format specifier corresponds to  non\-numeric data (%N for example).

Some examples of how the format string may be used for a 4 task job step
with a Job ID of 128 and step id of 0 are included below:
.TP 15
job%J.out
job128.0.out
.TP
job%4j.out
job0128.out
.TP
job%j\-%2t.out
job128\-00.out, job128\-01.out, ...
.PP
.RS -10
.PP

.SH "INPUT ENVIRONMENT VARIABLES"
.PP
Some srun options may be set via environment variables.
These environment variables, along with their corresponding options,
are listed below.
Note: Command line options will always override these settings.
.TP 22
\fBPMI_FANOUT\fR
This is used exclusively with PMI (MPICH2 and MVAPICH2) and
controls the fanout of data communications. The srun command
sends messages to application programs (via the PMI library)
and those applications may be called upon to forward that
data to up to this number of additional tasks. Higher values
offload work from the srun command to the applications and
likely increase the vulnerability to failures.
The default value is 32.
.TP
\fBPMI_FANOUT_OFF_HOST\fR
This is used exclusively with PMI (MPICH2 and MVAPICH2) and
controls the fanout of data communications.  The srun command
sends messages to application programs (via the PMI library)
and those applications may be called upon to forward that
data to additional tasks. By default, srun sends one message
per host and one task on that host forwards the data to other
tasks on that host up to \fBPMI_FANOUT\fR.
If \fBPMI_FANOUT_OFF_HOST\fR is defined, the user task
may be required to forward the data to tasks on other hosts.
Setting \fBPMI_FANOUT_OFF_HOST\fR may increase performance.
Since more work is performed by the PMI library loaded by
the user application, failures also can be more common and
more difficult to diagnose.
.TP
\fBPMI_TIME\fR
This is used exclusively with PMI (MPICH2 and MVAPICH2) and
controls how much the communications from the tasks to the
srun are spread out in time in order to avoid overwhelming the
srun command with work. The default value is 500 (microseconds)
per task. On relatively slow processors or systems with very
large processor counts (and large PMI data sets), higher values
may be required.
.TP
\fBSLURM_CONF\fR
The location of the Slurm configuration file.
.TP
\fBSLURM_ACCOUNT\fR
Same as \fB\-A, \-\-account\fR
.TP
\fBSLURM_ACCTG_FREQ\fR
Same as \fB\-\-acctg\-freq\fR
.TP
\fBSLURM_BCAST\fR
Same as \fB\-\-bcast\fR
.TP
\fBSLURM_BURST_BUFFER\fR
Same as \fB\-\-bb\fR
.TP
\fBSLURM_CHECKPOINT\fR
Same as \fB\-\-checkpoint\fR
.TP
\fBSLURM_COMPRESS\fR
Same as \fB\-\-compress\fR
.TP
\fBSLURM_CONSTRAINT\fR
Same as \fB\-C\fR, \fB\-\-constraint\fR
.TP
\fBSLURM_CORE_SPEC\fR
Same as \fB\-\-core\-spec\fR
.TP
\fBSLURM_CPU_BIND\fR
Same as \fB\-\-cpu\-bind\fR
.TP
\fBSLURM_CPU_FREQ_REQ\fR
Same as \fB\-\-cpu\-freq\fR.
.TP
\fBSLURM_CPUS_PER_GPU\fR
Same as \fB\-\-cpus\-per\-gpu\fR
.TP
\fBSLURM_CPUS_PER_TASK\fR
Same as \fB\-c, \-\-cpus\-per\-task\fR
.TP
\fBSLURM_DEBUG\fR
Same as \fB\-v, \-\-verbose\fR
.TP
\fBSLURM_DELAY_BOOT\fR
Same as \fB\-\-delay\-boot\fR
.TP
\fBSLURMD_DEBUG\fR
Same as \fB\-d, \-\-slurmd\-debug\fR
.TP
\fBSLURM_DEPENDENCY\fR
Same as \fB\-P, \-\-dependency\fR=<\fIjobid\fR>
.TP
\fBSLURM_DISABLE_STATUS\fR
Same as \fB\-X, \-\-disable\-status\fR
.TP
\fBSLURM_DIST_PLANESIZE\fR
Same as \fB\-m plane\fR
.TP
\fBSLURM_DISTRIBUTION\fR
Same as \fB\-m, \-\-distribution\fR
.TP
\fBSLURM_EPILOG\fR
Same as \fB\-\-epilog\fR
.TP
\fBSLURM_EXCLUSIVE\fR
Same as \fB\-\-exclusive\fR
.TP
\fBSLURM_EXIT_ERROR\fR
Specifies the exit code generated when a Slurm error occurs
(e.g. invalid options).
This can be used by a script to distinguish application exit codes from
various Slurm error conditions.
Also see \fBSLURM_EXIT_IMMEDIATE\fR.
.TP
\fBSLURM_EXIT_IMMEDIATE\fR
Specifies the exit code generated when the \fB\-\-immediate\fR option
is used and resources are not currently available.
This can be used by a script to distinguish application exit codes from
various Slurm error conditions.
Also see \fBSLURM_EXIT_ERROR\fR.
.TP
\fBSLURM_EXPORT_ENV\fR
Same as \-\-export\fR
.TP
\fBSLURM_GPUS\fR
Same as \fB\-G, \-\-gpus\fR
.TP
\fBSLURM_GPU_BIND\fR
Same as \fB\-\-gpu\-bind\fR
.TP
\fBSLURM_GPU_FREQ\fR
Same as \fB\-\-gpu\-freq\fR
.TP
\fBSLURM_GPUS_PER_NODE\fR
Same as \fB\-\-gpus\-per\-node\fR
.TP
\fBSLURM_GPUS_PER_TASK\fR
Same as \fB\-\-gpus\-per\-task\fR
.TP
\fBSLURM_GRES_FLAGS\fR
Same as \-\-gres\-flags\fR
.TP
\fBSLURM_HINT\fR
Same as \fB\-\-hint\fR
.TP
\fBSLURM_GRES\fR
Same as \fB\-\-gres\fR. Also see \fBSLURM_STEP_GRES\fR
.TP
\fBSLURM_IMMEDIATE\fR
Same as \fB\-I, \-\-immediate\fR
.TP
\fBSLURM_JOB_ID\fR
Same as \fB\-\-jobid\fR
.TP
\fBSLURM_JOB_NAME\fR
Same as \fB\-J, \-\-job\-name\fR except within an existing
allocation, in which case it is ignored to avoid using the batch job's name
as the name of each job step.
.TP
\fBSLURM_JOB_NUM_NODES\fR (and \fBSLURM_NNODES\fR for backwards compatibility)
Same as \fB\-N, \-\-nodes\fR
Total number of nodes in the job’s resource allocation.
.TP
\fBSLURM_KILL_BAD_EXIT\fR
Same as \fB\-K, \-\-kill\-on\-bad\-exit\fR
.TP
\fBSLURM_LABELIO\fR
Same as \fB\-l, \-\-label\fR
.TP
\fBSLURM_MEM_BIND\fR
Same as \fB\-\-mem\-bind\fR
.TP
\fBSLURM_MEM_PER_CPU\fR
Same as \fB\-\-mem\-per\-cpu\fR
.TP
\fBSLURM_MEM_PER_GPU\fR
Same as \fB\-\-mem\-per\-gpu\fR
.TP
\fBSLURM_MEM_PER_NODE\fR
Same as \fB\-\-mem\fR
.TP
\fBSLURM_MPI_TYPE\fR
Same as \fB\-\-mpi\fR
.TP
\fBSLURM_NETWORK\fR
Same as \fB\-\-network\fR
.TP
\fBSLURM_NO_KILL\fR
Same as \fB\-k\fR, \fB\-\-no\-kill\fR
.TP
\fBSLURM_NTASKS\fR (and \fBSLURM_NPROCS\fR for backwards compatibility)
Same as \fB\-n, \-\-ntasks\fR
.TP
\fBSLURM_NTASKS_PER_CORE\fR
Same as \fB\-\-ntasks\-per\-core\fR
.TP
\fBSLURM_NTASKS_PER_NODE\fR
Same as \fB\-\-ntasks\-per\-node\fR
.TP
\fBSLURM_NTASKS_PER_SOCKET\fR
Same as \fB\-\-ntasks\-per\-socket\fR
.TP
\fBSLURM_OPEN_MODE\fR
Same as \fB\-\-open\-mode\fR
.TP
\fBSLURM_OVERCOMMIT\fR
Same as \fB\-O, \-\-overcommit\fR
.TP
\fBSLURM_PARTITION\fR
Same as \fB\-p, \-\-partition\fR
.TP
\fBSLURM_PMI_KVS_NO_DUP_KEYS\fR
If set, then PMI key\-pairs will contain no duplicate keys. MPI can use
this variable to inform the PMI library that it will not use duplicate
keys so PMI can skip the check for duplicate keys.
This is the case for MPICH2 and reduces overhead in testing for duplicates
for improved performance
.TP
\fBSLURM_POWER\fR
Same as \fB\-\-power\fR
.TP
\fBSLURM_PROFILE\fR
Same as \fB\-\-profile\fR
.TP
\fBSLURM_PROLOG\fR
Same as \fB\-\-prolog\fR
.TP
\fBSLURM_QOS\fR
Same as \fB\-\-qos\fR
.TP
\fBSLURM_REMOTE_CWD\fR
Same as \fB\-D, \-\-chdir=\fR
.TP
\fBSLURM_REQ_SWITCH\fR
When a tree topology is used, this defines the maximum count of switches
desired for the job allocation and optionally the maximum time to wait
for that number of switches. See \fB\-\-switches\fR
.TP
\fBSLURM_RESERVATION\fR
Same as \fB\-\-reservation\fR
.TP
\fBSLURM_RESV_PORTS\fR
Same as \fB\-\-resv\-ports\fR
.TP
\fBSLURM_SIGNAL\fR
Same as \fB\-\-signal\fR
.TP
\fBSLURM_STDERRMODE\fR
Same as \fB\-e, \-\-error\fR
.TP
\fBSLURM_STDINMODE\fR
Same as \fB\-i, \-\-input\fR
.TP
\fBSLURM_SPREAD_JOB\fR
Same as \fB\-\-spread\-job\fR
.TP
\fBSLURM_SRUN_REDUCE_TASK_EXIT_MSG\fR
if set and non-zero, successive task exit messages with the same exit code will
be printed only once.
.TP
\fBSLURM_STEP_GRES\fR
Same as \fB\-\-gres\fR (only applies to job steps, not to job allocations).
Also see \fBSLURM_GRES\fR
.TP
\fBSLURM_STEP_KILLED_MSG_NODE_ID\fR=ID
If set, only the specified node will log when the job or step are killed
by a signal.
.TP
\fBSLURM_STDOUTMODE\fR
Same as \fB\-o, \-\-output\fR
.TP
\fBSLURM_TASK_EPILOG\fR
Same as \fB\-\-task\-epilog\fR
.TP
\fBSLURM_TASK_PROLOG\fR
Same as \fB\-\-task\-prolog
.TP
\fBSLURM_TEST_EXEC\fR
If defined, srun will verify existence of the executable program along with user
execute permission on the node where srun was called before attempting to
launch it on nodes in the step.
.TP
\fBSLURM_THREAD_SPEC\fR
Same as \fB\-\-thread\-spec\fR
.TP
\fBSLURM_THREADS\fR
Same as \fB\-T, \-\-threads\fR
.TP
\fBSLURM_TIMELIMIT\fR
Same as \fB\-t, \-\-time\fR
.TP
\fBSLURM_UNBUFFEREDIO\fR
Same as \fB\-u, \-\-unbuffered\fR
.TP
\fBSLURM_USE_MIN_NODES\fR
Same as \fB\-\-use\-min\-nodes\fR
.TP
\fBSLURM_WAIT\fR
Same as \fB\-W, \-\-wait\fR
.TP
\fBSLURM_WAIT4SWITCH\fR
Max time waiting for requested switches. See \fB\-\-switches\fR
.TP
\fBSLURM_WCKEY\fR
Same as \fB\-W, \-\-wckey\fR
.TP
\fBSLURM_WORKING_DIR\fR
\fB\-D, \-\-chdir\fR
.TP
\fBSRUN_EXPORT_ENV\fR
Same as \-\-export\fR, and will override any setting for \fBSRUN_EXPORT_ENV\fR.


.SH "OUTPUT ENVIRONMENT VARIABLES"
.PP
srun will set some environment variables in the environment
of the executing tasks on the remote compute nodes.
These environment variables are:

.TP 22
\fBSLURM_*_PACK_GROUP_#\fR
For a heterogenous job allocation, the environment variables are set separately
for each component.
.TP
\fBSLURM_CLUSTER_NAME\fR
Name of the cluster on which the job is executing.
.TP
\fBSLURM_CPU_BIND_VERBOSE\fR
\-\-cpu\-bind verbosity (quiet,verbose).
.TP
\fBSLURM_CPU_BIND_TYPE\fR
\-\-cpu\-bind type (none,rank,map_cpu:,mask_cpu:).
.TP
\fBSLURM_CPU_BIND_LIST\fR
\-\-cpu\-bind map or mask list (list of Slurm CPU IDs or masks for this node,
CPU_ID = Board_ID x threads_per_board +
Socket_ID x threads_per_socket +
Core_ID x threads_per_core + Thread_ID).

.TP
\fBSLURM_CPU_FREQ_REQ\fR
Contains the value requested for cpu frequency on the srun command as
a numerical frequency in kilohertz, or a coded value for a request of
\fIlow\fR, \fImedium\fR,\fIhighm1\fR or \fIhigh\fR for the frequency.
See the description of the \fB\-\-cpu\-freq\fR option or the
\fBSLURM_CPU_FREQ_REQ\fR input environment variable.
.TP
\fBSLURM_CPUS_ON_NODE\fR
Count of processors available to the job on this node.
Note the select/linear plugin allocates entire nodes to
jobs, so the value indicates the total count of CPUs on the node.
For the select/cons_res plugin, this number indicates the number of cores
on this node allocated to the job.
.TP
\fBSLURM_CPUS_PER_GPU\fR
Number of CPUs requested per allocated GPU.
Only set if the \fB\-\-cpus\-per\-gpu\fR option is specified.
.TP
\fBSLURM_CPUS_PER_TASK\fR
Number of cpus requested per task.
Only set if the \fB\-\-cpus\-per\-task\fR option is specified.
.TP
\fBSLURM_DISTRIBUTION\fR
Distribution type for the allocated jobs. Set the distribution
with \-m, \-\-distribution.
.TP
\fBSLURM_GPUS\fR
Number of GPUs requested.
Only set if the \fB\-G, \-\-gpus\fR option is specified.
.TP
\fBSLURM_GPU_BIND\fR
Requested binding of tasks to GPU.
Only set if the \fB\-\-gpu\-bind\fR option is specified.
.TP
\fBSLURM_GPU_FREQ\fR
Requested GPU frequency.
Only set if the \fB\-\-gpu\-freq\fR option is specified.
.TP
\fBSLURM_GPUS_PER_NODE\fR
Requested GPU count per allocated node.
Only set if the \fB\-\-gpus\-per\-node\fR option is specified.
.TP
\fBSLURM_GPUS_PER_SOCKET\fR
Requested GPU count per allocated socket.
Only set if the \fB\-\-gpus\-per\-socket\fR option is specified.
.TP
\fBSLURM_GPUS_PER_TASK\fR
Requested GPU count per allocated task.
Only set if the \fB\-\-gpus\-per\-task\fR option is specified.
.TP
\fBSLURM_GTIDS\fR
Global task IDs running on this node.
Zero origin and comma separated.
.TP
\fBSLURM_JOB_ACCOUNT\fR
Account name associated of the job allocation.
.TP
\fBSLURM_JOB_CPUS_PER_NODE\fR
Number of CPUS per node.
.TP
\fBSLURM_JOB_DEPENDENCY\fR
Set to value of the \-\-dependency option.
.TP
\fBSLURM_JOB_ID\fR (and \fBSLURM_JOBID\fR for backwards compatibility)
Job id of the executing job.

.TP
\fBSLURM_JOB_NAME\fR
Set to the value of the \-\-job\-name option or the command name when srun
is used to create a new job allocation. Not set when srun is used only to
create a job step (i.e. within an existing job allocation).

.TP
\fBSLURM_JOB_PARTITION\fR
Name of the partition in which the job is running.

.TP
\fBSLURM_JOB_QOS\fR
Quality Of Service (QOS) of the job allocation.
.TP
\fBSLURM_JOB_RESERVATION\fR
Advanced reservation containing the job allocation, if any.

.TP
\fBSLURM_LAUNCH_NODE_IPADDR\fR
IP address of the node from which the task launch was
initiated (where the srun command ran from).
.TP
\fBSLURM_LOCALID\fR
Node local task ID for the process within a job.

.TP
\fBSLURM_MEM_BIND_LIST\fR
\-\-mem\-bind map or mask list (<list of IDs or masks for this node>).
.TP
\fBSLURM_MEM_BIND_PREFER\fR
\-\-mem\-bind prefer (prefer).
.TP
\fBSLURM_MEM_BIND_SORT\fR
Sort free cache pages (run zonesort on Intel KNL nodes).
.TP
\fBSLURM_MEM_BIND_TYPE\fR
\-\-mem\-bind type (none,rank,map_mem:,mask_mem:).
.TP
\fBSLURM_MEM_BIND_VERBOSE\fR
\-\-mem\-bind verbosity (quiet,verbose).
.TP
\fBSLURM_MEM_PER_GPU\fR
Requested memory per allocated GPU.
Only set if the \fB\-\-mem\-per\-gpu\fR option is specified.
.TP
\fBSLURM_JOB_NODES\fR
Total number of nodes in the job's resource allocation.
.TP
\fBSLURM_NODE_ALIASES\fR
Sets of node name, communication address and hostname for nodes allocated to
the job from the cloud. Each element in the set if colon separated and each
set is comma separated. For example:
.na
SLURM_NODE_ALIASES\:=\:ec0:1.2.3.4:foo,ec1:1.2.3.5:bar
.ad
.TP
\fBSLURM_NODEID\fR
The relative node ID of the current node.
.TP
\fBSLURM_JOB_NODELIST\fR
List of nodes allocated to the job.
.TP
\fBSLURM_NTASKS\fR (and \fBSLURM_NPROCS\fR for backwards compatibility)
Total number of processes in the current job.
.TP
\fBSLURM_PACK_SIZE\fR
Set to count of components in heterogeneous job.
.TP
\fBSLURM_PRIO_PROCESS\fR
The scheduling priority (nice value) at the time of job submission.
This value is propagated to the spawned processes.
.TP
\fBSLURM_PROCID\fR
The MPI rank (or relative process ID) of the current process.
.TP
\fBSLURM_SRUN_COMM_HOST\fR
IP address of srun communication host.
.TP
\fBSLURM_SRUN_COMM_PORT\fR
srun communication port.
.TP
\fBSLURM_STEP_LAUNCHER_PORT\fR
Step launcher port.
.TP
\fBSLURM_STEP_NODELIST\fR
List of nodes allocated to the step.
.TP
\fBSLURM_STEP_NUM_NODES\fR
Number of nodes allocated to the step.
.TP
\fBSLURM_STEP_NUM_TASKS\fR
Number of processes in the step.
.TP
\fBSLURM_STEP_TASKS_PER_NODE\fR
Number of processes per node within the step.
.TP
\fBSLURM_STEP_ID\fR (and \fBSLURM_STEPID\fR for backwards compatibility)
The step ID of the current job.
.TP
\fBSLURM_SUBMIT_DIR\fR
The directory from which \fBsrun\fR was invoked or, if applicable, the
directory specified by the \fB\-D, \-\-chdir\fR option.
.TP
\fBSLURM_SUBMIT_HOST\fR
The hostname of the computer from which \fBsalloc\fR was invoked.
.TP
\fBSLURM_TASK_PID\fR
The process ID of the task being started.
.TP
\fBSLURM_TASKS_PER_NODE\fR
Number of tasks to be initiated on each node. Values are
comma separated and in the same order as SLURM_JOB_NODELIST.
If two or more consecutive nodes are to have the same task
count, that count is followed by "(x#)" where "#" is the
repetition count. For example, "SLURM_TASKS_PER_NODE=2(x3),1"
indicates that the first three nodes will each execute three
tasks and the fourth node will execute one task.

.TP
\fBSLURM_TOPOLOGY_ADDR\fR
This is set only if the system has the topology/tree plugin configured.
The value will be set to the names network switches which may be involved in
the job's communications from the system's top level switch down to the leaf
switch and ending with node name. A period is used to separate each hardware
component name.
.TP
\fBSLURM_TOPOLOGY_ADDR_PATTERN\fR
This is set only if the system has the topology/tree plugin configured.
The value will be set component types listed in \fBSLURM_TOPOLOGY_ADDR\fR.
Each component will be identified as either "switch" or "node".
A period is used to separate each hardware component type.
.TP
\fBSLURM_UMASK\fR
The \fIumask\fR in effect when the job was submitted.
.TP
\fBSLURMD_NODENAME\fR
Name of the node running the task. In the case of a parallel job executing on
multiple compute nodes, the various tasks will have this environment variable
set to different values on each compute node.
.TP
\fBSRUN_DEBUG\fR
Set to the logging level of the \fBsrun\fR command.
Default value is 3 (info level).
The value is incremented or decremented based upon the \-\-verbose and
\-\-quiet options.

.SH "SIGNALS AND ESCAPE SEQUENCES"
Signals sent to the \fBsrun\fR command are automatically forwarded to
the tasks it is controlling with a few exceptions. The escape sequence
\fB<control\-c>\fR will report the state of all tasks associated with
the \fBsrun\fR command. If \fB<control\-c>\fR is entered twice within
one second, then the associated SIGINT signal will be sent to all tasks
and a termination sequence will be entered sending SIGCONT, SIGTERM,
and SIGKILL to all spawned tasks.
If a third \fB<control\-c>\fR is received, the srun program will be
terminated without waiting for remote tasks to exit or their I/O to
complete.

The escape sequence \fB<control\-z>\fR is presently ignored. Our intent
is for this put the \fBsrun\fR command into a mode where various special
actions may be invoked.

.SH "MPI SUPPORT"
MPI use depends upon the type of MPI being used.
There are three fundamentally different modes of operation used
by these various MPI implementation.

1. Slurm directly launches the tasks and performs initialization
of communications through the PMI2 or PMIx APIs.
For example: "srun \-n16 a.out".

2. Slurm creates a resource allocation for the job and then
mpirun launches tasks using Slurm's infrastructure (OpenMPI).

3. Slurm creates a resource allocation for the job and then
mpirun launches tasks using some mechanism other than Slurm,
such as SSH or RSH.
These tasks are initiated outside of Slurm's monitoring
or control. Slurm's epilog should be configured to purge
these tasks when the job's allocation is relinquished,
or the use of pam_slurm_adopt is highly recommended.

See \fIhttps://slurm.schedmd.com/mpi_guide.html\fR
for more information on use of these various MPI implementation
with Slurm.

.SH "MULTIPLE PROGRAM CONFIGURATION"
Comments in the configuration file must have a "#" in column one.
The configuration file contains the following fields separated by white
space:
.TP
Task rank
One or more task ranks to use this configuration.
Multiple values may be comma separated.
Ranges may be indicated with two numbers separated with a '\-' with
the smaller number first (e.g. "0\-4" and not "4\-0").
To indicate all tasks not otherwise specified, specify a rank of '*' as the
last line of the file.
If an attempt is made to initiate a task for which no executable
program is defined, the following error message will be produced
"No executable program specified for this task".
.TP
Executable
The name of the program to execute.
May be fully qualified pathname if desired.
.TP
Arguments
Program arguments.
The expression "%t" will be replaced with the task's number.
The expression "%o" will be replaced with the task's offset within
this range (e.g. a configured task rank value of "1\-5" would
have offset values of "0\-4").
Single quotes may be used to avoid having the enclosed values interpreted.
This field is optional.
Any arguments for the program entered on the command line will be added
to the arguments specified in the configuration file.
.PP
For example:
.nf
###################################################################
# srun multiple program configuration file
#
# srun \-n8 \-l \-\-multi\-prog silly.conf
###################################################################
4\-6       hostname
1,7       echo  task:%t
0,2\-3     echo  offset:%o

> srun \-n8 \-l \-\-multi\-prog silly.conf
0: offset:0
1: task:1
2: offset:1
3: offset:2
4: linux15.llnl.gov
5: linux16.llnl.gov
6: linux17.llnl.gov
7: task:7

.fi


.SH "EXAMPLES"
This simple example demonstrates the execution of the command \fBhostname\fR
in eight tasks. At least eight processors will be allocated to the job
(the same as the task count) on however many nodes are required to satisfy
the request. The output of each task will be proceeded with its task number.
(The machine "dev" in the example below has a total of two CPUs per node)

.nf

> srun \-n8 \-l hostname
0: dev0
1: dev0
2: dev1
3: dev1
4: dev2
5: dev2
6: dev3
7: dev3

.fi
.PP
The srun \fB\-r\fR option is used within a job script
to run two job steps on disjoint nodes in the following
example. The script is run using allocate mode instead
of as a batch job in this case.

.nf

> cat test.sh
#!/bin/sh
echo $SLURM_JOB_NODELIST
srun \-lN2 \-r2 hostname
srun \-lN2 hostname

> salloc \-N4 test.sh
dev[7\-10]
0: dev9
1: dev10
0: dev7
1: dev8

.fi
.PP
The following script runs two job steps in parallel
within an allocated set of nodes.

.nf

> cat test.sh
#!/bin/bash
srun \-lN2 \-n4 \-r 2 sleep 60 &
srun \-lN2 \-r 0 sleep 60 &
sleep 1
squeue
squeue \-s
wait

> salloc \-N4 test.sh
  JOBID PARTITION     NAME     USER  ST      TIME  NODES NODELIST
  65641     batch  test.sh   grondo   R      0:01      4 dev[7\-10]

STEPID     PARTITION     USER      TIME NODELIST
65641.0        batch   grondo      0:01 dev[7\-8]
65641.1        batch   grondo      0:01 dev[9\-10]

.fi
.PP
This example demonstrates how one executes a simple MPI job.
We use \fBsrun\fR to build a list of machines (nodes) to be used by
\fBmpirun\fR in its required format. A sample command line and
the script to be executed follow.

.nf

> cat test.sh
#!/bin/sh
MACHINEFILE="nodes.$SLURM_JOB_ID"

# Generate Machinefile for mpi such that hosts are in the same
#  order as if run via srun
#
srun \-l /bin/hostname | sort \-n | awk '{print $2}' > $MACHINEFILE

# Run using generated Machine file:
mpirun \-np $SLURM_NTASKS \-machinefile $MACHINEFILE mpi\-app

rm $MACHINEFILE

> salloc \-N2 \-n4 test.sh

.fi
.PP
This simple example demonstrates the execution of different jobs on different
nodes in the same srun.  You can do this for any number of nodes or any
number of jobs.  The executables are placed on the nodes sited by the
SLURM_NODEID env var.  Starting at 0 and going to the number specified on
the srun commandline.

.nf

> cat test.sh
case $SLURM_NODEID in
    0) echo "I am running on "
       hostname ;;
    1) hostname
       echo "is where I am running" ;;
esac

> srun \-N2 test.sh
dev0
is where I am running
I am running on
dev1

.fi
.PP
This example demonstrates use of multi\-core options to control layout
of tasks.
We request that four sockets per node and two cores per socket be
dedicated to the job.

.nf

> srun \-N2 \-B 4\-4:2\-2 a.out
.fi
.PP
This example shows a script in which Slurm is used to provide resource
management for a job by executing the various job steps as processors
become available for their dedicated use.

.nf

> cat my.script
#!/bin/bash
srun \-\-exclusive \-n4 prog1 &
srun \-\-exclusive \-n3 prog2 &
srun \-\-exclusive \-n1 prog3 &
srun \-\-exclusive \-n1 prog4 &
wait
.fi

.PP
This example shows how to launch an application called "master" with one task,
8 CPUs and and 16 GB of memory (2 GB per CPU) plus another application called
"slave" with 16 tasks, 1 CPU per task (the default) and 1 GB of memory per task.

.nf

> srun \-n1 \-c16 \-\-mem\-per\-cpu=1gb master : \-n16 \-\-mem\-per\-cpu=1gb slave
.fi

.SH "COPYING"
Copyright (C) 2006\-2007 The Regents of the University of California.
Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
.br
Copyright (C) 2008\-2010 Lawrence Livermore National Security.
.br
Copyright (C) 2010\-2015 SchedMD LLC.
.LP
This file is part of Slurm, a resource management program.
For details, see <https://slurm.schedmd.com/>.
.LP
Slurm is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.LP
Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.

.SH "SEE ALSO"
\fBsalloc\fR(1), \fBsattach\fR(1), \fBsbatch\fR(1), \fBsbcast\fR(1),
\fBscancel\fR(1), \fBscontrol\fR(1), \fBsqueue\fR(1), \fBslurm.conf\fR(5),
\fBsched_setaffinity\fR (2), \fBnuma\fR (3)
\fBgetrlimit\fR (2)
