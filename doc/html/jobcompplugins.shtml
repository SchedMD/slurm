<!--#include virtual="header.txt"-->

<h1><a name="top">Slurm Job Completion Logging Plugin API</a></h1>

<h2> Overview</h2>
<p>This document describes Slurm job completion logging plugins and the API that defines
them. It is intended as a resource to programmers wishing to write their own Slurm
job completion logging plugins.</p>
<p>Slurm job completion logging plugins are Slurm plugins that implement the Slurm
API for logging job information upon their completion. This may be used to log job information
to a text file, database, etc. The plugins must conform to the Slurm Plugin API with the following
specifications:</p>
<p><span class="commandline">const char plugin_type[]</span><br>
The major type must be &quot;jobcomp.&quot; The minor type can be any recognizable
abbreviation for the type of scheduler. We recommend, for example:</p>
<ul>
<li><b>none</b> &mdash; No job logging.</li>
<li><b>filetxt</b> &mdash; Log job information to a text file.</li>
<li><b>mysql</b> &mdash; Job completion is written to a mysql database.</li>
<li><b>script</b> &mdash; Execute a script passing in job information in environment variables.</li>
</ul>

<p><span class="commandline">const char plugin_name[]</span><br>
Some descriptive name for the plugin.
There is no requirement with respect to its format.</p>
<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loadeed by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p>The programmer is urged to study
<span class="commandline">src/plugins/jobcomp/filetxt/jobcomp_filetxt.c</span> and
<span class="commandline">src/plugins/jobcomp/none/jobcomp_none.c</span>
for sample implementations of a Slurm job completion logging plugin.</p>
<p class="footer"><a href="#top">top</a></p>

<h2>Data Objects</h2>
<p>The implementation must maintain (though not necessarily directly export) an
enumerated <span class="commandline">errno</span>  to allow Slurm to discover
as practically as possible the reason for any failed API call. Plugin-specific enumerated
integer values should be used when appropriate. It is desirable that these values
be mapped into the range ESLURM_JOBCOMP_MIN and ESLURM_JOBCOMP_MAX
as defined in <span class="commandline">slurm/slurm_errno.h</span>.
The error number should be returned by the function
<a href="#get_errno"><span class="commandline">slurm_jobcomp_get_errno()</span></a>
and this error number can be converted to an appropriate string description using the
<a href="#strerror"><span class="commandline">slurm_jobcomp_strerror()</span></a>
function described below.</p>

<p>These values must not be used as return values in integer-valued functions
in the API. The proper error return value from integer-valued functions is SLURM_ERROR.
The implementation should endeavor to provide useful and pertinent information by
whatever means is practical.
Successful API calls are not required to reset any errno to a known value. However,
the initial value of any errno, prior to any error condition arising, should be
SLURM_SUCCESS. </p>
<p class="footer"><a href="#top">top</a></p>

<h2>API Functions</h2>
<p>The following functions must appear. Functions which are not implemented should be stubbed.</p>

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">int slurm_jobcomp_set_location (char * location);</p>
<p style="margin-left:.2in"><b>Description</b>: Specify the location to be used for job logging.</p>
<p style="margin-left:.2in"><b>Argument</b>:<span class="commandline"> location</span>&nbsp;
&nbsp;&nbsp;(input) specification of where logging should be done. The interpretation of
this string is at the discretion of the plugin implementation.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful. On failure,
the plugin should return SLURM_ERROR and set the errno to an appropriate value
to indicate the reason for failure.</p>
<p class="footer"><a href="#top">top</a></p>

<p class="commandline">int slurm_jobcomp_log_record (struct job_record *job_ptr);</p>
<p style="margin-left:.2in"><b>Description</b>: Note that a job is about to
terminate or change size. The job's state will include the JOB_RESIZING flag
if and only if it is about to change size. Otherwise the job is terminating.
Note the existence of <i>resize_time</i> in the job record if one wishes to
record information about a job at each size (i.e. a history of the job as
its size changes through time).</p>
<p style="margin-left:.2in"><b>Argument</b>: <br>
<span class="commandline"> job_ptr</span>&nbsp;&nbsp;&nbsp;(input) Pointer to
job record as defined in <i>src/slurmctld/slurmctld.h</i></p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful. On failure,
the plugin should return SLURM_ERROR and set the errno to an appropriate value
to indicate the reason for failure.</p>
<p class="footer"><a href="#top">top</a></p>

<a name="get_errno"><p class="commandline">int slurm_jobcomp_get_errno (void);</p></a>
<p style="margin-left:.2in"><b>Description</b>: Return the number of a
job completion logger specific error.</p>
<p style="margin-left:.2in"><b>Arguments</b>: None</p>
<p style="margin-left:.2in"><b>Returns</b>: Error number for the last failure encountered by the job completion logging plugin.</p>
<p class="footer"><a href="#top">top</a></p>

<p class="commandline"><a name="strerror">const char *slurm_jobcomp_strerror(int errnum);</a></p>
<p style="margin-left:.2in"><b>Description</b>: Return a string description of a job completion logger specific error code.</p>
<p style="margin-left:.2in"><b>Arguments</b>:
<span class="commandline"> errnum</span>&nbsp; &nbsp;&nbsp;(input) a job completion logger
specific error code.</p>
<p style="margin-left:.2in"><b>Returns</b>: Pointer to string describing the error
or NULL if no description found in this plugin.</p>
<p class="footer"><a href="#top">top</a></p>

<p class="commandline">
List slurm_jobcomp_get_jobs(acct_job_cond_t *job_cond);</a></p>
<p style="margin-left:.2in"><b>Description</b>: Get completed job info from
storage.</p>
<p style="margin-left:.2in"><b>Arguments</b>:<br>
<span class="commandline"> job_cond</span>&nbsp; &nbsp;&nbsp;
(input) specification of filters to identify the jobs we wish information about
(start time, end time, cluster name, user id, etc).
acct_job_cond_t is defined in common/slurm_accounting_storage.h.
<p style="margin-left:.2in"><b>Returns</b>: A list of job records or NULL on 
error. Elements on the list are of type jobcomp_job_rec_t, which is
defined in common/slurm_jobcomp.h.
Any returned list must be destroyed to avoid memory leaks.
<p class="footer"><a href="#top">top</a></p>

<p class="commandline">
void slurm_jobcomp_archive(List selected_parts, void *params)
<p style="margin-left:.2in"><b>Description</b>: used to archive old data.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">List selected_parts </span>
(input) list containing char *'s of names of partitions to query against.<br>
<span class="commandline">void *params </span>
(input) to be cast as sacct_parameters_t in the plugin.
<p style="margin-left:.2in"><b>Returns</b>: None</p>
<p class="footer"><a href="#top">top</a></p>

<p class="footer"><a href="#top">top</a></p>

<p style="text-align:center;">Last modified 27 March 2015</p>

<!--#include virtual="footer.txt"-->
