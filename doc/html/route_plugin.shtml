<!--#include virtual="header.txt"-->

<h1><a name="top">Slurm Route Plugin Programmer Guide</a></h1>

<h2> Overview</h2>
<p> This document describes Slurm Route plugin and the API that
defines them.
It is intended as a resource to programmers wishing to write their own
Slurm Route plugin.</p>

<p>Slurm Route plugins are Slurm plugins that redirect RPCs through
intermediate forwarding nodes. The routing mechanism is similar
to message forwarding which was designed to move message processing overhead
off the controller. The main difference is that the routine table is
defined in the configuration. For example,
the topology implementation uses the topology.conf file.</p>

<p>The plugins must conform to the Slurm Plugin API with the following
specifications:</p>

<p><span class="commandline">const char plugin_type[]</span><br>
The major type must be &quot;rout&quot;
The minor type specifies the type of route mechanism.
</p>
<ul>
<li><b>default</b> &mdash; No routing information.</li>
<li><b>topology</b> &mdash; Route messages using topology.conf information.</li>
</ul></p>

<p><span class="commandline">const char plugin_name[]</span><br>
Some descriptive name for the plugin.
There is no requirement with respect to its format.</p>
<p><span class="commandline">uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loadeed by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<h2>Data Objects</h2>
<p>The implementation must maintain (though not necessarily directly export) an
enumerated <span class="commandline">errno</span> to allow Slurm to discover
as practically as possible the reason for any failed API call.
Plugin-specific enumerated integer values may be used when appropriate.

<p>These values must not be used as return values in integer-valued
functions in the API.
The proper error return value from integer-valued functions is SLURM_ERROR.
The implementation should endeavor to provide useful and pertinent
information by whatever means is practical.
Successful API calls are not required to reset any errno to a known value.
However, the initial value of any errno, prior to any error condition
arising, should be SLURM_SUCCESS. </p>
<p class="footer"><a href="#top">top</a></p>

<h2>API Functions</h2>
<p>The following functions must appear.
Functions which are not implemented should be stubbed.</p>

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>


<p class="commandline">
extern int route_g_split_hostlist(hostlist_t hl,
				     hostlist_t** sp_hl,
				     int* count);
<p style="margin-left:.2in"><b>Description</b>:<br>
Split an input hostlist into a set of hostlists to forward to.

<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">hl (in) hostlist to split</span>
<span class="commandline">sp_hl (out) the array of hostlist that will be
malloced</span>
<span class="commandline">count (out) the count of created hostlist</span>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
extern int route_g_reconfigure ( void );
<p style="margin-left:.2in"><b>Description</b>:<br>
Reset internal state during reconfigure.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
extern slurm_addr_t* route_g_next_collector ( bool *is_collector );
<p style="margin-left:.2in"><b>Description</b>:<br>
get address of parent in message tree.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">is_collector (out) flag indication this node
is a collector.
</span>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">slurm_addr_t*</span>
address of node to send messages to be aggregated <br>
<span class="commandline">NULL</span> if not set.

<p class="commandline">
extern slurm_addr_t* route_g_next_collector_backup ( void );
<p style="margin-left:.2in"><b>Description</b>:<br>
get address of parent's backup in message tree.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">slurm_addr_t*</span>
address of node to send messages to be aggregated when primary collector
is down. <br>
<span class="commandline">NULL</span> if not set.

<p class="footer"><a href="#top">top</a></p>

<p style="text-align:center;">Last modified 27 March 2015</p>

<!--#include virtual="footer.txt"-->
