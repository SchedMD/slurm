<!--#include virtual="header.txt"-->

<h1><a name="top">Power Management Plugin Programmer Guide</a></h1>

<h2> Overview</h2>
<p> This document describes the Slurm power management plugins and the APIs that
defines them. It is intended as a resource to programmers wishing to write
their own Slurm power management plugin. This is version 100 of the API.

<p>Slurm power management plugins must conform to the
Slurm Plugin API with the following specifications:

<p><span class="commandline">const char
plugin_name[]="<i>full&nbsp;text&nbsp;name</i>"</span>
<p style="margin-left:.2in">
A free-formatted ASCII text string that identifies the plugin.

<p><span class="commandline">const char
plugin_type[]="<i>major/minor</i>"</span><br>
<p style="margin-left:.2in">
The major type must be &quot;power&quot;.
The minor type can be any suitable name for the type of power management
package.
The following power management plugins are included in the Slurm distribution
<ul>
<li><b>cray_aries</b> &mdash; Use Cray XC APIs to provide power management.</li>
<li><b>none</b> &mdash; Can be configured to log calls to its functions, but
otherwise does nothing.</li>
</ul>

<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loaded by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p>Slurm can be configured to use multiple power management plugins if desired.</p>


<h2>API Functions</h2>
<p>All of the following functions are required. Functions which are not
implemented must be stubbed.

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">
void power_p_reconfig(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called when updated configuration information should be read.

<p class="commandline">
void power_p_job_resume(job_record_t *job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Note that a previously suspended job is being resumed.
Called by the slurmctld daemon.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) pointer to the job record being resumed.

<p class="commandline">
void power_p_job_start(job_record_t *job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Note that a job has been allocated resources and is about to begin execution.
Called by the slurmctld daemon.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) pointer to the job record being started.


<p style="text-align:center;">Last modified 23 October 2019</p>

<!--#include virtual="footer.txt"-->
