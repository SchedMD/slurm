<!--#include virtual="header.txt"-->

<h1><a name="top">Job Container Plugin API</a></h1>

<h2> Overview</h2>
<p> This document describes Slurm job container plugins and the API
that defines them.
It is intended as a resource to programmers wishing to write their
own Slurm job container plugins.
Note that job container plugin is designed for use with Slurm jobs.
It also applies to the sbcast server process on compute nodes.
There is a <a href="proctrack_plugins.html">proctrack plugin</a>
designed for use with Slurm job steps.</p>

<p>Slurm job container plugins are Slurm plugins that implement
the Slurm job container API described herein.
They must conform to the Slurm Plugin API with the following
specifications:</p>

<p><span class="commandline">const char plugin_type[]</span><br>
The major type must be &quot;job_container.&quot;
The minor type can be any recognizable abbreviation for the type
of proctrack. We recommend, for example:</p>
<ul>
<li><b>cncu</b> &mdash; Designed for use on Cray systems only and interface with
Compute Node Clean Up (CNCU) the Cray infrastructure.</li>
<li><b>none</b> &mdash; Designed for all other systems.</li>
</ul>

<p><span class="commandline">const char plugin_name[]</span><br>
Some descriptive name for the plugin.
There is no requirement with respect to its format.</p>
<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loadeed by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p>The programmer is urged to study
<span class="commandline">src/plugins/proctrack/job_container/job_container_cncu.c</span>
for an example implementation of a Slurm proctrack plugin.</p>
<p class="footer"><a href="#top">top</a></p>

<h2>Data Objects</h2>
<p> The implementation must support a container ID of type uint64_t.
This container ID is generated by the
<a href="proctrack_plugins.html">proctrack plugin</a>.</p>

<p>The implementation must maintain (though not necessarily directly export) an
enumerated <b>errno</b> to allow Slurm to discover as practically as possible
the reason for any failed API call.
These values must not be used as return values in integer-valued functions
in the API.
The proper error return value from integer-valued functions is SLURM_ERROR.
The implementation should endeavor to provide useful and pertinent information
by whatever means is practical.
Successful API calls are not required to reset errno to a known value.</p>

<p class="footer"><a href="#top">top</a></p>

<h2>API Functions</h2>
<p>The following functions must appear. Functions which are not implemented should
be stubbed.</p>

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">int container_p_create (uint32_t job_id);</p>
<p style="margin-left:.2in"><b>Description</b>: Create a container.
The caller should ensure that the valid
<span class="commandline">container_p_delete()</span> is called.</p>
<p style="margin-left:.2in"><b>Argument</b>:
<span class="commandline"> job_id</span>&nbsp; &nbsp;&nbsp;(input)
Job ID.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful. On failure,
the plugin should return SLURM_ERROR and set the errno to an appropriate value
to indicate the reason for failure.</p>

<p class="commandline">int container_p_add_cont (uint32_t job_id, uint64_t cont_id);</p>
<p style="margin-left:.2in"><b>Description</b>: Add a specific process tracking
container (PAGG) to a given job's container.</p>
<p style="margin-left:.2in"><b>Arguments</b>:<br>
<span class="commandline"> job_id</span>&nbsp; &nbsp;&nbsp;(input)
Job ID.<br>
<span class="commandline"> cont_id</span>&nbsp; &nbsp;&nbsp;(input)
Process tracking container value as set by the proctrack plugin.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful. On failure,
the plugin should return SLURM_ERROR and set the errno to an appropriate value
to indicate the reason for failure.</p>

<p class="commandline">int container_p_add_pid (uint32_t job_id, pid_t pid, uid_t uid);</p>
<p style="margin-left:.2in"><b>Description</b>: Add a specific process ID
to a given job's container. The process is first placed into a process tracking
container (PAGG).</p>
<p style="margin-left:.2in"><b>Arguments</b>:<br>
<span class="commandline"> job_id</span>&nbsp; &nbsp;&nbsp;(input)
Job ID.<br>
<span class="commandline"> pid</span>&nbsp; &nbsp;&nbsp;(input)
Process ID.<br>
<span class="commandline"> uid</span>&nbsp; &nbsp;&nbsp;(input)
Owning user ID.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful. On failure,
the plugin should return SLURM_ERROR and set the errno to an appropriate value
to indicate the reason for failure.</p>

<p class="commandline">int container_p_delete (uint32_t job_id);</p>
<p style="margin-left:.2in"><b>Description</b>: Destroy or otherwise
invalidate a job container.
This does not imply the container is empty, just that it is no longer
needed.</p>
<p style="margin-left:.2in"><b>Arguments</b>:
<span class="commandline"> job_id</span> &nbsp;&nbsp; (input)
Job ID.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful. On failure,
the plugin should return SLURM_ERROR and set the errno to an appropriate value
to indicate the reason for failure.</p>

<p class="commandline">void container_p_reconfig (void);</p>
<p style="margin-left:.2in"><b>Description</b>: Note change in configuration,
especially the value of the DebugFlags with respect to JobContainer.</p>

<p class="footer"><a href="#top">top</a></p>

<p style="text-align:center;">Last modified 27 March 2015</p>

<!--#include virtual="footer.txt"-->
