<!--#include virtual="header.txt"-->

<h1>pam_slurm_adopt</h1>

<p>The purpose of this module is to prevent users from sshing into nodes that
they do not have a running job on, and to track the ssh connection and any
other spawned processes for accounting and to ensure complete job cleanup when
the job is completed. This module does this by determining the job which
originated the ssh connection. The user's connection is "adopted" into the
"external" step of the job.</p>

<h2><a name="INSTALLATION">Installation</a></h2>

<h3>Source:</h3>

<p>In your Slurm build directory, navigate to slurm/contribs/pam_slurm_adopt/
and run

<pre>make &amp;&amp; make install</pre>

as root. This will place pam_slurm_adopt.a,
pam_slurm_adopt.la, and pam_slurm_adopt.so in /lib/security/ (on Debian
systems) or /lib64/security/ (on RedHat/SuSE systems).</p>

<h3>RPM:</h3>

<p>The included slurm.spec will build a slurm-pam_slurm RPM which will install
pam_slurm_adopt. Refer to the
<a href="https://slurm.schedmd.com/quickstart_admin.html">Quick Start
Administrator Guide</a> for instructions on managing an RPM-based install.</p>

<h2><a name="PAM_CONFIG">PAM Configuration</a></h2>

<p>Add the following line to the appropriate file in /etc/pam.d, such as
system-auth or sshd (you may use either the "required" or "sufficient" PAM
control flag):</p>

<pre>
account    required      pam_slurm_adopt.so
</pre>

<p> The order of plugins is very important. pam_slurm_adopt.so should be the
last PAM module in the account stack. Included files such as common-account
should normally be included before pam_slurm_adopt.

You might have the following account stack in sshd:</p>

<pre>
account    required      pam_nologin.so
account    include       password-auth
...
-account    required      pam_slurm_adopt.so
</pre>

<p>Note the "-" before the account entry for pam_slurm_adopt. It allows
PAM to fail gracefully if the pam_slurm_adopt.so file is not found. If Slurm
is on a shared filesystem, such as NFS, then this is suggested to avoid being
locked out of a node while the shared filesystem is mounting or down.</p>

<p>pam_slurm_adopt must be used with the task/cgroup task plugin and either the
proctrack/cgroup or the proctrack/cray_aries proctrack plugin.
The pam_systemd module will conflict with pam_slurm_adopt, so you need to
disable it in all files that are included in sshd or system-auth (e.g.
password-auth, common-session, etc.). You should also stop and mask
systemd-logind. You must also make sure a different PAM
module isn't short-circuiting the account stack before it gets to
pam_slurm_adopt.so. From the example above, the following two lines have been
commented out in the included password-auth file:</p>

<pre>
#account    sufficient    pam_localuser.so
#-session   optional      pam_systemd.so
</pre>

<p>Note: This may involve editing a file that is auto-generated.
Do not run the config script that generates the file or your
changes will be erased.</p>

<p>If you always want to allow access for an administrative group (e.g., wheel),
stack the pam_access module after pam_slurm_adopt. A success with
pam_slurm_adopt is sufficient to allow access, but the pam_access module can
allow others, such as administrative staff, access even without jobs on that
node:</p>

<pre>
account    sufficient    pam_slurm_adopt.so
account    required      pam_access.so
</pre>

<p>Then edit the pam_access configuration file (/etc/security/access.conf):</p>

<pre>
+:wheel:ALL
-:ALL:ALL
</pre>

<p>An alternative to pam_access is to place pam_listfile.so before
pam_slurm_adopt.so. For example:</p>

<pre>
account    sufficient    pam_listfile.so item=user sense=allow onerr=fail file=/path/to/allowed_users_file
account    required      pam_slurm_adopt.so
</pre>

<p>List the usernames of the allowed users in allowed_users_file.</p>

<p>When access is denied, the user will receive a relevant error message.</p>

<h2><a name="OPTIONS">pam_slurm_adopt Module Options</a></h2>

<p>
This module is configurable. Add these options to the end of the pam_slurm_adopt
line in the appropriate file in /etc/pam.d/ (e.g., sshd or system-auth):
</p>

<pre>
account sufficient pam_slurm_adopt.so optionname=optionvalue
</pre>

<p>This module has the following options:</p>

<dl compact>

<dt><b>action_no_jobs</b></dt>
<dd>
The action to perform if the user has no jobs on the node. Configurable
values are:

<dl compact>
<dt></dt>
<dd>
<dl compact>
  <dt><b>ignore</b></dt>
<dd>Do nothing. Fall through to the next pam module.</dd>
<dt><b>deny</b> (default)</dt>
<dd>Deny the connection.</dd>
</dl>
</dd>
</dl>

</dd>

<dt><b>action_unknown</b></dt>
<dd>
The action to perform when the user has multiple jobs on the node <b>and</b>
the RPC does not locate the source job. If the RPC mechanism works properly in
your environment, this option will likely be relevant <b>only</b> when
connecting from a login node. Configurable values are:

<dl compact>
<dt></dt>
<dd>
<dl compact>
<dt><b>newest</b> (default)</dt>
<dd>Pick the newest job on the node. The "newest" job is chosen based
on the mtime of the job's step_extern cgroup; asking Slurm would
require an RPC to the controller. Thus, the memory cgroup must be in
use so that the code can check mtimes of cgroup directories. The user
can ssh in but may be adopted into a job that exits earlier than the
job they intended to check on. The ssh connection will at least be
subject to appropriate limits and the user can be informed of better
ways to accomplish their objectives if this becomes a problem.
NOTE: If the module fails to retrieve the cgroup mtime, then the picked
job may not be the newest one.
</dd>
<dt><b>allow</b></dt>
<dd>Let the connection through without adoption.</dd>
<dt><b>deny</b></dt>
<dd>Deny the connection.</dd>
</dl>
</dd>
</dl>

</dd>

<dt><b>action_adopt_failure</b></dt>
<dd>The action to perform if the process is unable to be adopted into any
job for whatever reason. If the process cannot be adopted into the job
identified by the callerid RPC, it will fall through to the action_unknown
code and try to adopt there. A failure at that point or if there is only
one job will result in this action being taken. Configurable values are:

<dl compact>
<dt></dt>
<dd>
<dl compact>
<dt><b>allow</b> (default)</dt>
<dd>Let the connection through without adoption. <b>WARNING: This value is
insecure and is recommended for testing purposes only. We recommend using
"deny."</b></dd>
<dt><b>deny</b></dt>
<dd>Deny the connection.</dd>
</dl>
</dd>
</dl>

</dd>

<dt><b>action_generic_failure</b></dt>
<dd>The action to perform if there are certain failures such as the
inability to talk to the local <i>slurmd</i> or if the kernel doesn't offer
the correct facilities. Configurable values are:

<dl compact>
<dt></dt>
<dd>
<dl compact>
<dt><b>ignore</b> (default)</dt>
<dd>Do nothing. Fall through to the next pam module. <b>WARNING: This value is
insecure and is recommended for testing purposes only. We recommend using
"deny."</b></dd>
<dt><b>allow</b></dt>
<dd>Let the connection through without adoption.</dd>
<dt><b>deny</b></dt>
<dd>Deny the connection.</dd>
</dl>
</dd>
</dl>

</dd>

<dt><b>disable_x11</b></dt>
<dd>Turn off Slurm built-in X11 forwarding support. Configurable values are:

<dl compact>
<dt></dt>
<dd>
<dl compact>
<dt><b>0</b> (default)</dt>
<dd>If the job the connection is adopted into has Slurm's X11 forwarding
enabled, the DISPLAY variable will be overwritten with the X11 tunnel
endpoint details.</dd>
<dt><b>1</b></dt>
<dd>Do not check for Slurm's X11 forwarding support, and do not alter the
DISPLAY variable.</dd>
</dl>
</dd>
</dl>

</dd>

<dl compact>
<dt><b>log_level</b></dt>
<dd>See <a href="https://slurm.schedmd.com/slurm.conf.html#OPT_SlurmdDebug">
SlurmdDebug</a> in slurm.conf for available options.
The default log_level is <b>info</b>.
</dd>
</dl>

<dl compact>
<dt><b>nodename</b></dt>
<dd>If the NodeName defined in <b>slurm.conf</b> is different than this node's
hostname (as reported by <b>hostname -s</b>), then this must be set to the
NodeName in <b>slurm.conf</b> that this host operates as.
</dd>
</dl>

<dl compact>
<dt><b>service</b></dt>
<dd>The pam service name for which this module should run. By default
it only runs for sshd for which it was designed for. A
different service name can be specified like "login" or "*" to
allow the module to in any service context. For local pam logins
this module could cause unexpected behaviour or even security
issues. Therefore if the service name does not match then this
module will not perform the adoption logic and returns
PAM_IGNORE immediately.
</dd>
</dl>

</dl>

<h2><a name="SLURM_CONFIG">Slurm Configuration</a></h2>

<p><b>PrologFlags=contain</b> must be set in the slurm.conf. This sets up the
"extern" step into which ssh-launched processes will be adopted. You must also
enable the task/cgroup plugin in slurm.conf. See the <a
href="https://slurm.schedmd.com/cgroups.html">Slurm cgroups guide.</a></p>

<h3><b>Important</b></h3>

<p><b>PrologFlags=contain</b> must be in place <i>before</i> using this module.
The module bases its checks on local steps that have already been launched. If
the user has no steps on the node, such as the extern step, the module will
assume that the user has no jobs allocated to the node. Depending on your
configuration of the PAM module, you might accidentally deny all user ssh
attempts without <b>PrologFlags=contain.</b></p>

<p>The <b>UsePAM</b> option in slurm.conf is not related to pam_slurm_adopt.</p>


<h2><a name="OTHER_CONFIG">Other Configuration</a></h2>

<p>Verify that <b>UsePAM</b> is set to <b>On</b> in /etc/ssh/sshd_config (it
should be on by default).</p>

<h3>Firewalls, IP Addresses, etc.</h3>

<p><i>slurmd</i> should be accessible on any IP address from which a user might
launch ssh. The RPC to determine the source job must be able to reach the
<i>slurmd</i> port on that particular IP address. If there is no <i>slurmd</i>
on the source node, such as on a login node, it is better to have the RPC be
rejected rather than silently dropped. This will allow better responsiveness to
the RPC initiator.</p>

<h2><a name="LIMITATIONS">Limitations</a></h2>

<p>Alternate authentication methods such as multi-factor authentication may
break process adoption with pam_slurm_adopt.</p>

<p>SELinux may conflict with pam_slurm_adopt, so it might need to be
disabled.</p>

<p style="text-align:center;">Last modified 29 April 2019</p>

<!--#include virtual="footer.txt"-->
