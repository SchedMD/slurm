<!--#include virtual="header.txt"-->

<h1><a name="top">Slurm Process Tracking Plugin API</a></h1>

<h2> Overview</h2>
<p> This document describes Slurm process tracking plugins and the API
that defines them.
It is intended as a resource to programmers wishing to write their
own Slurm process tracking plugins.
Note that process tracking plugin is designed for use with Slurm job steps.
There is a <a href="job_container_plugins.html">job_container plugin</a>
designed for use with Slurm jobs.</p>

<p>Slurm process tracking plugins are Slurm plugins that implement
the Slurm process tracking API described herein.
They must conform to the Slurm Plugin API with the following
specifications:</p>

<p><span class="commandline">const char plugin_type[]</span><br>
The major type must be &quot;proctrack.&quot;
The minor type can be any recognizable abbreviation for the type
of proctrack. We recommend, for example:</p>
<ul>
<li><b>cray_aries</b> &mdash; Use Cray XC job containers.</li>
<li><b>cgroup</b> &mdash; Use Linux cgroups for process tracking. This is the
recommended mechanism for non CRAY systems. </li>
<li><b>linuxproc</b> &mdash; Perform process tracking based upon a scan
of the Linux process table and use the parent process ID to determine
what processes are members of a Slurm job. NOTE: This mechanism is
not entirely reliable for process tracking.</li>
<li><b>pgid</b> &mdash; Use process group ID to determine
what processes are members of a Slurm job. NOTE: This mechanism is
not entirely reliable for process tracking.</li>
</ul>

<p><span class="commandline">const char plugin_name[]</span><br>
Some descriptive name for the plugin.
There is no requirement with respect to its format.</p>

<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loaded by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p>The programmer is urged to study
<span class="commandline">src/plugins/proctrack/pgid/proctrack_pgid.c</span>
for an example implementation of a Slurm proctrack plugin.</p>

<h2>Data Objects</h2>
<p> The implementation must support a container id of type uint64_t.
This container ID is maintained by the plugin directly in the slurmd
job structure using the field named <i>cont_id</i>.</p>

<p>The implementation must maintain (though not necessarily directly export) an
enumerated <b>errno</b> to allow Slurm to discover as practically as possible
the reason for any failed API call.
These values must not be used as return values in integer-valued functions
in the API.
The proper error return value from integer-valued functions is SLURM_ERROR.
The implementation should endeavor to provide useful and pertinent information
by whatever means is practical.
Successful API calls are not required to reset errno to a known value.</p>


<h2>API Functions</h2>
<p>The following functions must appear. Functions which are not implemented should
be stubbed.</p>

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">int proctrack_p_create (stepd_step_rec_t *job);</p>
<p style="margin-left:.2in"><b>Description</b>: Create a container.
The caller should ensure that be valid
<span class="commandline">proctrack_p_destroy()</span> is called.
This function must put the container ID directory in the job structure's
variable <i>cont_id</i>.</p>
<p style="margin-left:.2in"><b>Argument</b>:
<span class="commandline"> job</span>&nbsp; &nbsp;&nbsp;(input/output)
Pointer to a slurmd job structure.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful. On failure,
the plugin should return SLURM_ERROR and set the errno to an appropriate value
to indicate the reason for failure.</p>

<p class="commandline">int proctrack_p_add (stepd_step_rec_t *job, pid_t pid);</p>
<p style="margin-left:.2in"><b>Description</b>: Add a specific process ID
to a given job step's container.</p>
<p style="margin-left:.2in"><b>Arguments</b>:<br>
<span class="commandline"> job</span>&nbsp; &nbsp;&nbsp;(input)
Pointer to a slurmd job structure.<br>
<span class="commandline"> pid</span>&nbsp; &nbsp;&nbsp;(input)
The ID of the process to add to this job's container.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful. On failure,
the plugin should return SLURM_ERROR and set the errno to an appropriate value
to indicate the reason for failure.</p>

<p class="commandline">int proctrack_p_signal (uint64_t id, int signal);</p>
<p style="margin-left:.2in"><b>Description</b>: Signal all processes in a given
job step container.</p>
<p style="margin-left:.2in"><b>Arguments</b>:<br>
<span class="commandline"> id</span> &nbsp;&nbsp;(input)
Job step container's ID.<br>
<span class="commandline"> signal</span> &nbsp;&nbsp;(input)
Signal to be sent to processes. Note that a signal of zero
just tests for the existence of processes in a given job step container.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if the signal
was sent.
If the signal can not be sent, the function should return SLURM_ERROR and set
its errno to an appropriate value to indicate the reason for failure.</p>


<p class="commandline">int proctrack_p_destroy (uint64_t id);</p>
<p style="margin-left:.2in"><b>Description</b>: Destroy or otherwise
invalidate a job step container.
This does not imply the container is empty, just that it is no longer
needed.</p>
<p style="margin-left:.2in"><b>Arguments</b>:
<span class="commandline"> id</span> &nbsp;&nbsp; (input)
Job step container's ID.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if successful. On failure,
the plugin should return SLURM_ERROR and set the errno to an appropriate value
to indicate the reason for failure.</p>

<p class="commandline">uint64_t proctrack_p_find (pid_t pid);</p>
<p style="margin-left:.2in"><b>Description</b>:
Given a process ID, return its job step container ID.</p>
<p style="margin-left:.2in"><b>Arguments</b>:
<span class="commandline"> pid</span>&nbsp; &nbsp;&nbsp;(input)
A process ID.</p>
<p style="margin-left:.2in"><b>Returns</b>: The job step container ID
with this process or zero if none is found.</p>

<p class="commandline">uint32_t proctrack_p_get_pids (uint64_t cont_id, pid_t **pids, int *npids);</p>
<p style="margin-left:.2in"><b>Description</b>:
Given a process container ID, fill in all the process IDs in the container.</p>
<p style="margin-left:.2in"><b>Arguments</b>:
<span class="commandline"> cont_id</span>&nbsp; &nbsp;&nbsp;(input)
A job step container ID.<br>
<span class="commandline"> pids</span>&nbsp; &nbsp;&nbsp;(output)
Array of process IDs in the container.<br>
<span class="commandline"> npids</span>&nbsp; &nbsp;&nbsp;(output)
Count of process IDs in the container.</p>
<p style="margin-left:.2in"><b>Returns</b>: SLURM_SUCCESS if
  successful, SLURM_ERROR else.</p>


<p style="text-align:center;">Last modified 14 January 2019</p>

<!--#include virtual="footer.txt"-->
