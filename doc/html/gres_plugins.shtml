<!--#include virtual="header.txt"-->

<h1><a name="top">Slurm Generic Resource (GRES) Plugin API</a></h1>

<h2> Overview</h2>
<p> This document describes Slurm generic resource plugins and the API that
defines them. It is intended as a resource to programmers wishing to write
their own Slurm job submit plugins.
<p>Slurm generic resource plugins must conform to the
Slurm Plugin API with the following specifications:

<p><span class="commandline">const char
gres_name[]="<i>gres_name</i>"</span><br>
<p style="margin-left:.2in">
The <i>gres_name</i> should match <i>minor</i> in <i>plugin_type</i>
described below.</p>

<p><span class="commandline">const char
plugin_type[]="<i>major/minor</i>"</span><br>
<p style="margin-left:.2in">
The major type must be &quot;gres.&quot;
The minor type can be any suitable name
for the type of accounting package.</p>

<p><span class="commandline">const char plugin_name[]</span><br>
Some descriptive name for the plugin.
There is no requirement with respect to its format.</p>
<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loadeed by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p>We include samples in the Slurm distribution for
<ul>
<li><b>gpu</b> &mdash; Manage GPUs (Graphics Processing Units).
<li><b>nic</b> &mdash; Manage NICs (Network Interface Cards, this plugin does
nothing today).
</ul>

<p class="footer"><a href="#top">top</a>

<h2>API Functions</h2>
<p>All of the following functions are required. Functions which are not
implemented must be stubbed.

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">
int node_config_load(List gres_conf_list)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmd</i> daemon after the <i>slurm.conf</i>
and <i>gres.conf</i> files have been read.
It can be used to validate the configuration by testing the
actual hardware resources available or just confirm that an entry for the
resource was included in the <i>gres.conf</i> file.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">gres_conf_list</span>
(input/output) a list of configuration records generated by reading the
<i>slurm.conf</i> and <i>gres.conf</i> files<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
void job_set_env(char ***job_env_ptr, void *gres_ptr, int node_inx)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmd</i> daemon after the getting a job
credential and can be used to set environment variables for the job based
upon GRES state information in that credential.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_env_ptr</span>
(input/output) pointer to the job's environment variable structure.<br>
<span class="commandline">gres_ptr</span>
(input) pointer to the job's GRES allocation information.<br>
<span class="commandline">node_inx</span>
(input) zero origin node index, used to interpret node specific GRES data.<br>

<p class="commandline">
void step_set_env(char ***job_env_ptr, void *gres_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmd</i> daemon after the getting a job
step credential and can be used to set environment variables for the job step
based upon GRES state information in that credential.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_env_ptr</span>
(input/output) pointer to the job step's environment variable structure.<br>
<span class="commandline">gres_ptr</span>
(input) pointer to the step's GRES allocation information.<br>

<p class="commandline">
extern void send_stepd(int fd)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmd</i> daemon to send any needed
information to the <i>slurmstepd</i> step shepherd.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">fd</span>
(input) file descriptor to write information to.<br>

<p class="commandline">
extern void recv_stepd(int fd)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the <i>slurmstepd</i> step shepherd to read any
needed information from the <i>slurmd</i> daemon.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">fd</span>
(input) file descriptor to read information from.<br>

<p class="commandline">
extern int job_info(gres_job_state_t *job_gres_data, uint32_t node_inx,
enum gres_job_data_type data_type, void *data)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is used to extract plugin specific data from the job's GRES
data structure. Note that data types GRES_JOB_DATA_COUNT and
GRES_JOB_DATA_BITMAP are processed in common code rather than within the
plugin and return data types of uint32_t* and bitstr_t** respectively.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_gres_data</span>
(input) Information about the job's GRES resources.<br>
(input) Zero origin index within the job's resource allocation for which
data is desired.<br>
<span class="commandline">gres_job_data_type data_type</span>
(input) Type of information to be gathered from the data structure.<br>
<span class="commandline">data</span>
(output) Pointer to data within job_gres_data.
No data is copied or needs to be freed.
Data type depends upon the value of gres_job_data_type data_type.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
extern int step_info(gres_step_state_t *step_gres_data, uint32_t node_inx,
enum gres_step_data_type data_type, void *data)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is used to extract plugin specific data from the step's GRES
data structure. Note that data types GRES_STEP_DATA_COUNT and
GRES_STEP_DATA_BITMAP are processed in common code rather than within the
plugin and return data types of uint32_t* and bitstr_t** respectively.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">step_gres_data</span>
(input) Information about the step's GRES resources.<br>
<span class="commandline">node_inx</span>
(input) Zero origin index within the job's resource allocation for which
data is desired.<br>
<span class="commandline">gres_step_data_type data_type</span>
(input) Type of information to be gathered from the data structure.<br>
<span class="commandline">data</span>
(output) Pointer to data within step_gres_data.
No data is copied or needs to be freed.
Data type depends upon the value of gres_step_data_type data_type.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="footer"><a href="#top">top</a>

<p style="text-align:center;">Last modified 27 March 2015</p>

<!--#include virtual="footer.txt"-->
