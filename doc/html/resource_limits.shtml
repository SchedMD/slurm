<!--#include virtual="header.txt"-->

<h1>Resource Limits</h1>

<p>Familiarity with Slurm's <a href="accounting.html">Accounting</a> web page
is strongly recommended before use of this document.</p>

<h2>Hierarchy</h2>

<p>Slurm's hierarchical limits are enforced in the following order
  with Job QOS and Partition QOS order being reversible by using the QOS
  flag 'OverPartQOS':</p>
<ol>
	<li>Partition QOS limit</li>
	<li>Job QOS limit</li>
	<li>User association</li>
	<li>Account association(s), ascending the hierarchy</li>
	<li>Root/Cluster association</li>
	<li>Partition limit</li>
	<li>None</li>
</ol>

<p>Note: If limits are defined at multiple points in this hierarchy,
the point in this list where the limit is first defined will be used.
Consider the following example:</p>
<ul>
<li>MaxJobs=20 and MaxSubmitJobs is undefined in the partition QOS</li>
<li>No limits are set in the job QOS and</li>
<li>MaxJobs=4 and MaxSubmitJobs=50 in the user association</li>
</ul>
<p>The limits in effect will be MaxJobs=20 and MaxSubmitJobs=50.</p>

<p>Note: The precedence order specified above is respected except for the
following limits: Max[Time|Wall], [Min|Max]Nodes. For these limits, even
if the job is enforced with QOS and/or Association limits, it can't
go over the limit imposed at Partition level, even if it listed at the bottom.
So the default for these 3 types of limits is that they are upper bound by the
Partition one. This Partition level bound can be ignored if
the respective QOS PartitionTimeLimit and/or Partition[Max|Min]Nodes flags
are set, then the job would be enforced the limits imposed at QOS
and/or association level respecting the order above.
</p>

<h2>Configuration</h2>

<p>Scheduling policy information must be stored in a database
as specified by the <b>AccountingStorageType</b> configuration parameter
in the <b>slurm.conf</b> configuration file.
Information can be recorded in a <a href="http://www.mysql.com/">MySQL</a> or
<a href="https://mariadb.org/">MariaDB</a></li> database.
For security and performance reasons, the use of
SlurmDBD (Slurm Database Daemon) as a front-end to the
database is strongly recommended.
SlurmDBD uses a Slurm authentication plugin (e.g. MUNGE).
SlurmDBD also uses an existing Slurm accounting storage plugin
to maximize code reuse.
SlurmDBD uses data caching and prioritization of pending requests
in order to optimize performance.
While SlurmDBD relies upon existing Slurm plugins for authentication
and database use, the other Slurm commands and daemons are not required
on the host where SlurmDBD is installed.
Only the <i>slurmdbd</i> and <i>slurm-plugins</i> RPMs are required
for SlurmDBD execution.</p>

<p>Both accounting and scheduling policies are configured based upon
an <i>association</i>. An <i>association</i> is a 4-tuple consisting
of the cluster name, bank account, user and (optionally) the Slurm
partition.
In order to enforce scheduling policy, set the value of
<b>AccountingStorageEnforce</b>.
This option contains a comma separated list of options you may want to
enforce.  The valid options are:
<ul>
<li>associations - This will prevent users from running jobs if
their <i>association</i> is not in the database. This option will
prevent users from accessing invalid accounts.
</li>
<li>limits - This will enforce limits set to associations.  By setting
  this option, the 'associations' option is also set.
</li>
<li>qos - This will require all jobs to specify (either overtly or by
default) a valid qos (Quality of Service).  QOS values are defined for
each association in the database.  By setting this option, the
'associations' option is also set.
</li>
<li>safe - This will ensure a job will only be launched when using an
  association or qos that has a GrpTRESMins limit set if the job will be
  able to run to completion. Without this option set, jobs will be
  launched as long as their usage hasn't reached the cpu-minutes limit
  which can lead to jobs being launched but then killed when the limit is
  reached. By setting this option, both the 'associations' option and the
  'limits' option are set automatically.
</li>
<li>wckeys - This will prevent users from running jobs under a wckey
  that they don't have access to.  By using this option, the
  'associations' option is also set.  The 'TrackWCKey' option is also
  set to true.
</li>
</ul>

<p>NOTE: The association is a combination of cluster, account,
user names and optional partition name.
<br>
Without AccountingStorageEnforce being set (the default behavior)
jobs will be executed based upon policies configured in Slurm on each
cluster.
</p>

<h2>Tools</h2>

<p>The tool used to manage accounting policy is <i>sacctmgr</i>.
It can be used to create and delete cluster, user, bank account,
and partition records plus their combined <i>association</i> record.
See <i>man sacctmgr</i> for details on this tools and examples of
its use.</p>

<p>Changes made to the scheduling policy are uploaded to
the Slurm control daemons on the various clusters and take effect
immediately. When an association is deleted, all running or pending
jobs which belong to that association are immediately canceled.
When limits are lowered, running jobs will not be canceled to
satisfy the new limits, but the new lower limits will be enforced.</p>

<h2>Limits in both Associations and QOS</h2>
<p>When dealing with Associations, most of these limits are available
not only for a user association, but also for each cluster and account.
If a new association is created for some user and a scheduling
policy option is not specified the default will be: the option
for the cluster/account pair, and if both are not specified
then the option for the cluster, and if that also is not
specified then no limit will apply.</p>
<p><b>NOTE:</b> Unless noted, if a job request breaches a given limit
the job will pend unless the job's QOS has the DenyOnLimit
flag set, which will cause the job to be denied at submission.  When
Grp limits are considered with respect to this flag the Grp limit
is treated as a Max limit.</p>

<p><b>NOTE:</b> When modifying a TRES field with <i>sacctmgr</i>, one must
specify which TRES to modify (see <a href="tres.html">TRES</a> for complete
list) as in the following examples: </p>
  <pre>
  SET:
  sacctmgr modify user bob set GrpTRES=cpu=1500,mem=200,gres/gpu=50
  UNSET:
  sacctmgr modify user bob set GrpTRES=cpu=-1,mem=-1,gres/gpu=-1
  </pre>
</p>

<ul>
<li><b>GrpTRESMins=</b> The total number of TRES minutes that can
  possibly be used by past, present and future jobs
  running from an association and its children or QOS.  If this limit is
  reached all jobs running in this group will be killed, and no new
  jobs will be allowed to run.  This usage is decayed (at a rate of
  PriorityDecayHalfLife).  It can also be reset (according to
  PriorityUsageResetPeriod) in order to allow jobs to run against the
  association tree or QOS again.  QOS that have the NoDecay flag set
  do not decay GrpTRESMins, see <a href="qos.html#qos_other">QOS Options</a>
  for details.
  This limit only applies when using the Priority Multifactor plugin.
</li>

<li><b>GrpTRESRunMins=</b> Used to limit the combined total number of TRES
  minutes used by all jobs running with an association and its
  children or QOS.  This takes into consideration time limit of
  running jobs and consumes it, if the limit is reached no new jobs
  are started until other jobs finish to allow time to free up.
</li>

<li><b>GrpTRES=</b> The total count of TRES able to be used at any given
  time from jobs running from an association and its children or QOS.  If
  this limit is reached new jobs will be queued but only allowed to
  run after resources have been relinquished from this group.
</li>

<li><b>GrpJobs=</b> The total number of jobs able to run at any given
  time from an association and its children QOS.  If
  this limit is reached new jobs will be queued but only allowed to
  run after previous jobs complete from this group.
</li>

<li><b>GrpJobsAccrue=</b> The total number of pending jobs able to accrue age
  priority at any given time from an association and its children QOS.  If
  this limit is reached new jobs will be queued but not accrue age priority
  until after previous jobs are removed from pending in this group.
  This limit does not determine if the job can run or not, it only limits the
  age factor of the priority.
</li>

<li><b>GrpSubmitJobs=</b> The total number of jobs able to be submitted
  to the system at any given time from an association and its children
  or QOS.  If this limit is reached new submission requests will be
  denied until previous jobs complete from this group.
</li>

<li><b>GrpWall=</b> The maximum wall clock time any job submitted to
  this group can run for.  If this limit is reached submission requests
  will be denied.  This usage is decayed (at a rate of
  PriorityDecayHalfLife).  It can also be reset (according to
  PriorityUsageResetPeriod) in order to allow jobs to run against the
  association tree or QOS again.  QOS that have the NoDecay flag set
  do not decay GrpWall. See <a href="qos.html#qos_other">QOS Options</a> for
  details.
</li>

<li><b>MaxTRESMinsPerJob=</b> A limit of TRES minutes to be used by a job.
  If this limit is reached the job will be killed if not running in
  Safe mode, otherwise the job will pend until enough time is given to
  complete the job.
</li>

<li><b>MaxTRESPerJob=</b> The maximum size in TRES any given job can
  have from the association/QOS.
</li>

<li><b>MaxTRESPerNode=</b> The maximum size in TRES each node in a job
  allocation can use.
</li>

<li><b>MaxWallDurationPerJob=</b> The maximum wall clock time any individual job
  can run for in the given association/QOS.  If this limit is reached
  the job will be denied at submission.
</li>

<li><b>MinPrioThreshold=</b> Used to override bf_min_prio_reserve.
  See <a href="slurm.conf.html#OPT_bf_min_prio_reserve=#">
  bf_min_prio_reserve</a> for details.
</li>

<!-- For future use
<li><b>MaxTRESRunMinsPerJob=</b> A limit of TRES minutes to be used by jobs
  running from the given association/QOS.  If this limit is
  reached the job will be killed will be allowed to run.
</li>
-->

</ul>

<h2>Association specific scheduling policies supported</h2>

<p> These represent the scheduling policies unique to associations.
  Shared policies and limits a QOS has in common are listed above.</p>

<ul>
<li><b>Fairshare=</b> Integer value used for determining priority.
  Essentially this is the amount of claim this association and its
  children have to the above system. Can also be the string "parent",
  when used on a user this means that the parent association is used
  for fairshare.  If Fairshare=parent is set on an account, that
  account's children will be effectively re-parented for fairshare
  calculations to the first parent of their parent that is not
  Fairshare=parent.  Limits remain the same, only its fairshare value
  is affected.
</li>

<li><b>MaxJobs=</b> The total number of jobs able to run at any given
  time for the given association.  If this limit is reached, new jobs will
  be queued but only allowed to run after existing jobs in the association
  complete.
</li>

<li><b>MaxJobsAccrue=</b> The maximum number of pending jobs able to accrue age
  priority at any given time for the given association.  If this limit is
  reached, new jobs will be queued but will not accrue age priority
  until after existing jobs in the association are moved from a pending state.
  This limit does not determine if the job can run, it only limits the
  age factor of the priority.
</li>

<li><b>MaxSubmitJobs=</b> The maximum number of jobs able to be submitted
  to the system at any given time from the given association.  If
  this limit is reached, new submission requests will be denied until
  existing jobs in this association complete.
</li>

<li><b>QOS=</b> comma separated list of QOS's an association is
  able to run.
</li>

</ul>

<h2>QOS specific limits supported</h2>

<ul>
<li><b>MaxJobsAccruePerAccount=</b> The maximum number of pending jobs an
  account (or subacct) can have accruing age priority at any given time.
  This limit does not determine if the job can run, it only limits the
  age factor of the priority.
</li>

<li><b>MaxJobsAccruePerUser=</b> The maximum number of pending jobs a
  user can have accruing age priority at any given time.
  This limit does not determine if the job can run, it only limits the
  age factor of the priority.
</li>

<li><b>MaxJobsPerAccount=</b> The maximum number of jobs an account (or
  subaccount) can have running at a given time.
</li>

<li><b>MaxJobsPerUser=</b> The maximum number of jobs a user can
  have running at a given time.
</li>

<li><b>MaxSubmitJobsPerAccount=</b> The maximum number of jobs an account (or
  subaccount) can have running and pending at a given time.
</li>

<li><b>MaxSubmitJobsPerUser=</b> The maximum number of jobs a user can
  have running and pending at a given time.
</li>

<li><b>MaxTRESPerAccount=</b> The maximum number of TRES an account can
  allocate at a given time.
</li>

<li><b>MaxTRESPerUser=</b> The maximum number of TRES a user can
  allocate at a given time.
</li>

<li><b>MinTRESPerJob=</b> The minimum size in TRES any given job can
  have when using the requested QOS.
</li>

</ul>


<p>The <b>MaxNodes</b> and <b>MaxWall</b> options already exist in
Slurm's configuration on a per-partition basis, but the above options
provide the ability to impose limits on a per-user basis.  The
<b>MaxJobs</b> option provides an entirely new mechanism for Slurm to
control the workload any individual may place on a cluster in order to
achieve some balance between users.</p>

<p>Fair-share scheduling is based upon the hierarchical bank account
data maintained in the Slurm database.  More information can be found
in the <a href="priority_multifactor.html">priority/multifactor</a>
plugin description.</p>

<h3>Specific limits over GRES</h3>
<p> When a GRES has a type associated with it and a limit is applied
  over this specific type (e.g. <i>MaxTRESPerUser=gres/gpu:tesla=1</i>) if a
  user requests a generic gres, the type's limit will not be enforced. In this
  situation an additional lua job submit plugin to check the user request may
  become useful. For example, if one requests <i>--gres=gpu:2</i> having a
  limit set of <i>MaxTRESPerUser=gres/gpu:tesla=1</i>, the limit won't be
  enforced so it will still be possible to get two teslas.
</p>
<p>
  This is due to a design limitation. The only way to enforce such a limit
  is to combine the specification of the limit with a job submit plugin that
  forces the user to always request a specific type model.
</p>
<p>
  An example of basic lua job submit plugin function could be:
</p>
<pre>
function slurm_job_submit(job_desc, part_list, submit_uid)
   if (job_desc.gres ~= nil)
   then
      for g in job_desc.gres:gmatch("[^,]+")
      do
	 bad = string.match(g,'^gpu[:]*[0-9]*$')
	 if (bad ~= nil)
	 then
	    slurm.log_info("User specified gpu GRES without type: %s", bad)
	    slurm.user_msg("You must always specify a type when requesting gpu GRES")
	    return slurm.ERROR
	 end
      end
   end
end
</pre>
<p> Having this script and the limit in place will force the users to always
  specify a gpu with its type, thus enforcing the limits for each specific
  model.
</p>
<p>It is also advisable to set <b>AccountingStorageTRES</b> for both generic
  and specific gres types, otherwise requests that ask for generic only gpus
  won't be accounted for. Set this for example to:
<p/>
<p>
  <i>AccountingStorageTRES=gres/gpu,gres/gpu:tesla</i>
<p/>

<p>
  See <a href="tres.html">Trackable Resources TRES</a> for details.
</p>

<p style="text-align: center;">Last modified 8 April 2020</p>

</ul></body></html>
