<!--#include virtual="header.txt"-->

<h1><a name="top">Node Features Plugin Programmer Guide</a></h1>

<h2> Overview</h2>
<p>This document describes the node features plugin that is responsible for
managing a node's active features. This is typically used for changing a node's
characteristics at boot time. For example, an Intel Knights Landing (KNL)
processor can be booted in various MCDRAM and NUMA modes.
This document is intended as a resource to programmers wishing to write their
own node features plugin.</p>

<p><span class="commandline">const char
plugin_name[]="<i>launch&nbsp;Slurm&nbsp;plugin</i>"</span>
<p style="margin-left:.2in">

<p><span class="commandline">const char
plugin_type[]="<i>node_features/[knl_cray]</i>"</span><br>
<p style="margin-left:.2in">

<ul>
<li><b>knl_cray</b> &mdash; Use Cray's capmc command to manage an Intel KNL processor.</li>
<li><b>knl_generic</b> &mdash; Use Intel commands to manage KNL processor.</li>
</ul>

<p><span class="commandline">const uint32_t plugin_version=SLURM_VERSION_NUMBER</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loadeed by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p>The programmer is urged to study
<span class="commandline">src/plugins/node_features/knl_cray/node_features_knl_cray.c</span>
for a sample implementation of a Slurm node features plugin.
<p class="footer"><a href="#top">top</a>

<h2>API Functions</h2>

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> int fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline"> int node_features_p_reconfig(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Note that the configuration has changed, read configuration parameters again.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> uint32_t node_features_p_boot_time(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Return the estimated node reboot time in units of seconds.
  Used as a basis for optimizing scheduling decisions.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  Estimated boot time in seconds.</p>

<p class="commandline"> int node_features_p_get_node(char *node_list)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Update active and available features on specified nodes.
  Executed from the slurmctld daemon only and directly updates internal
  node data structures.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
  <span class="commandline"> node_list:</span> Regular expression identifying
  the nodes to be updated. Update information about all nodes is value is NULL.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> int node_features_p_job_valid(char *job_features)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Determine of the user's job constraint string is valid.
  This may be used to limit the type of operators supported (Slurm's active
  feature logic only supports the AND operator) and prevent illegal
  combintations of node features (e.g. multiple NUMA modes).
  Executed from the slurmctld daemon only when either the job submit or
  modify operation is invoked.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
  <span class="commandline"> job_features:</span> Job constraints specified by
  the user (-c/--constraint options).<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> char *node_features_p_job_xlate(char *job_features)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Translate a job's feature request to the node features needed at boot time.
  Job features not required by this plugin (e.g. rack number) will not be
  returned. For example, a user requested features may be "cache&quad&knl&rack1".
  Since the "knl" and "rack1" represent physical characteristics of the node
  and are not used by the node features plugin to boot the node, this function's
  return value will be "cache,quad".
  Executed from the slurmctld daemon only.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
  <span class="commandline"> job_features:</span> Job constraints specified by
  the user (-c/--constraint options).<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
  Node features used by this plugin when configuring or booting a node.
  A string with it's memory allocated by xmalloc (i.e. the return value
  must be released using Slurm's xfree function).</p>

<p class="commandline"> bool node_features_p_node_power(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Report if the PowerSave mode is required to boot nodes.
  Executed from the slurmctld daemon only.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  True if the plugin requires PowerSave mode for booting nodes.

<p class="commandline"> void node_features_p_node_state(char **avail_modes, char **current_mode)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Get this node's available and current features (e.g. MCDRAM and NUMA
  settings from BIOS for a KNL processor, for example
  avail_modes="cache,flat,equal,a2a,quad,hemi,snc2,snc4" and
  current_mode="cache,quad").
  Executed from the slurmd daemon only.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
  <span class="commandline"> avail_modes:</span> Nodes state features which are
  available. Value is allocated or appended to as appropriate with xmalloc functions.<br>
  <span class="commandline"> current_modes:</span> Nodes state features which
  are currently in effect. Value is allocated or appended to as appropriate
  with xmalloc functions.</p>

<p class="commandline"> char *node_features_p_node_xlate(char *new_features, char *orig_features)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Translate a node's new feature specification as needed to preserve any
  original features (i.e. features outside of the domain of this plugin).
  For example, a node's new features may be "cache,quad", while it's original
  features may have been "flat,hemi,knl,rack1".
  The available features with respect to this plugin are "flat,hemi", while
  features outside of the domain of this plugin are "knl,rack1".
  In this case, this function's return value will be "cache,quad,knl,rack1".
  Executed from the slurmctld daemon only.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
  <span class="commandline"> new_features:</span> Node's reported features.<br>
  <span class="commandline"> orig_features:</span> Node's previous feature state.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
  Node's currently features value
  A string with it's memory allocated by xmalloc (i.e. the return value
  must be released using Slurm's xfree function).</p>

<p class="commandline"> void node_features_p_step_config(bool mem_sort, bitstr_t *numa_bitmap)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Perform any desired initialization operations prior to launching a job step.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
  <span class="commandline"> mem_sort:</span> If true, run zonesort before launching a job step.<br>
  <span class="commandline"> numa_bitmap:</span> Identify NUMA nodes on which to execute zonesort.
  If NULL, then execute zonesort on all NUMA nodes</p>

<p class="commandline"> char *node_features_p_user_update(uid_t uid)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Determine if the specified user can modify the currently available node
  features.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
  <span class="commandline"> uid:</span> User ID of user making request.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
  True if user can change node active features to other available features.</p>

<p class="footer"><a href="#top">top</a>

<p style="text-align:center;">Last modified 13 January 2017</p>

<!--#include virtual="footer.txt"-->
