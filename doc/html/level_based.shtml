<!--#include virtual="header.txt"-->

<!--

LEVEL_BASED contributed by Brigham Young University
Authors: Ryan Cox and Levi Morrison

 -->

<h1>LEVEL_BASED Multifactor</h1>

<h2>Contents</h2>
<ul>
<li><a href="#intro">Introduction</a></li>
<li><a href="#algorithm">Algorithm</a></li>
<li><a href="#fairshare">Fair share factor calculation</a></li>
<li><a href="#bitwise">Bitwise operations at each level</a></li>
<li><a href="#ranking">Ranking</a></li>
<li><a href="#sshare">sshare</a></li>
<li><a href="#config">Configuration</a></li>
<li><a href="#notes">Important notes</a></li>
</ul>

<h2><a name="intro">Introduction</a></h2>

<p>PriorityFlags=LEVEL_BASED results in changes to several fair share
calculations. The algorithm prioritizes users such that users in an under-served
account will always have a higher fair share factor than users in an over-served
account.</p>

<p>Some of the benefits include:</p>
<ul>
	<li>
		All users from a higher priority account receive a higher fair
		share factor than all users from a lower priority account.
	</li>
	<li>
		Users are sorted and ranked to prevent errors due to precision
		loss.
	</li>
	<li>
		Account coordinators cannot accidentally harm the priority of
		their users relative to users in other accounts.
	</li>
	<li>
		Users are extremely unlikely to have exactly the same fair share
		factor as another user due to loss of precision in calculations.
	</li>
	<li>
		New jobs are immediately assigned a priority.
	</li>
</ul>

<h2><a name="algorithm">Algorithm</a></h2>

<p>The algorithm uses a 64-bit unsigned integer, <i>priority_fs_raw</i>, to
store priority calculations on associations at each level. LEVEL_BASED
recursively descends through the association hierarchy starting at the root.
It will descend up to <i>PriorityLevels</i> levels below the root for
calculation purposes. Any child associations that are deeper than
<i>PriorityLevels</i> will have their fair share priority set to their
parent's value.</p>

<p><i>priority_fs_raw</i> is subdivided into &quot;buckets&quot; to store the
fair share priority at each level.  The following variables are used:</p>
<pre>
bucket_width_in_bits = 64 / priority_levels
unused_bucket_bits = 64 % priority_levels
bucket_max = UINT64_MAX &gt;&gt; (64 - bucket_width_in_bits)
</pre>

<h2><a name="fairshare">Fair share factor calculation</a></h2>

<p>As LEVEL_BASED descends through the association hierarchy, it calculates
fair share in a similar way to the traditional multifactor method except that
it does so at each level in the hierarchy and normalizes <i>S</i> beforehand.
<pre>
F = 2**(-U/S)
</pre>

<dl>
<dt> F</dt>
<dd> is the association's fair share factor at the current level</dd>
<dt> U</dt>
<dd> also known as Usage Effective, U is the association's normalized usage at
the current level</dd>
<dt> S</dt>
<dd> is the association's normalized shares at the current level</dd>
</dl>

<p>All values above are between zero and one.</p>

<p>See the original <a href="priority_multifactor.html">multifactor plugin</a>
for more information on this calculation.</p>


<h2>Normalization of shares before fair share calculation</h2>

<p>One major modification to the calculation of <i>F</i> is that LEVEL_BASED
normalizes the <i>S</i> value between 0.1 and 1.0 prior to the fair share
calculation. This is done because a low <i>S</i> value can result in an
<i>F</i> value that is approximately 0, even when <i>U</i> is small. An example
of this behavior can be visualized by comparing an unnormalized <i>S</i> value
between
<a href="http://www.wolframalpha.com/input/?i=2%5E-%28u%2Fs%29%2C+u+from+0+to+1%2C+s+from+0+to+1">
0.0 and 1.0</a> to a normalized <i>S</i> value between
<a href="http://www.wolframalpha.com/input/?i=2%5E-%28u%2Fs%29%2C+u+from+0+to+1%2C+s+from+.1+to+1">
0.1 and 1.0</a>.</p>

<p>Assuming 150 associations at the same level and with equal Fairshare values
set in sacctmgr, <i>S</i> is 0.0067. When plugged into the equation, <i>F</i>
values are often indistinguishable from each other when <i>U</i> is high.
Compare the unnormalized
<a href="http://www.wolframalpha.com/input/?i=2%5E-%28u%2F0.0067%29%2C+u+from+0+to+1">
S=0.0067</a> to a worst case
<a href="http://www.wolframalpha.com/input/?i=2%5E-%28u%2F.1%29%2C+u+from+0+to+1">
S=0.1</a> when the value is normalized before <i>F</i> is calculated.</p>

<p>The general formula used is a linear interpolation, which maps x in range
a..b to range A..B, represented by <code>interpolate</code> below.</p>

<pre>interpolate(x, a, b, A, B) =  (x - a) / (b - a) * (B - A) + A</pre>


<h2><a name="bitwise">Bitwise operations at each level</a></h2>

<p>After the final <i>F</i> calculation for the given level (<i>assoc_level
</i>), the value is normalized between 0 and <i>bucket_max</i> and stored in a
temporary variable called <i>level_fs</i>. It is then shifted as follows:</p>

<pre>level_fs &lt;&lt;= (
                (priority_levels - assoc_level - 1)
                * bucket_width_in_bits
                + unused_bucket_bits
        )
</pre>

<p>As the code recurses deeper into the tree, assoc_level is incremented. The
result is a steadily decreasing shift value. <i>level_fs</i> is then
bitwise OR'd with the parent's <i>priority_fs_raw</i> and stored in its own
<i>priority_fs_raw</i> field. This fences off the effect of
each level's calculation since there is no overlap.</p>


<h3><a name="example">Example</a></h3>

<p>For example, consider a four-tiered structure with colleges, departments,
faculty, and users (faculty member himself/herself plus students).
<i>PriorityLevels=4</i> (<i>priority_levels</i> internally) should be set.
<i>priority_fs_raw</i> is divided into four 16-bit buckets:</p>
<pre>
bucket_width_in_bits = 16
unused_bucket_bits = 0
bucket_max = 65535
</pre>

<p>This results in the following example calculation:</p>

<pre>
    root
     ||
     \/
Life Sciences    level_fs = 0xAAAA000000000000, priority_fs_raw = 0xAAAA000000000000
     ||
     \/
   Biology       level_fs = 0x0000123400000000, priority_fs_raw = 0xAAAA123400000000
     ||
     \/
   Dr. Bob       level_fs = 0x0000000077770000, priority_fs_raw = 0xAAAA123477770000
     ||
     \/
 Grad Student    level_fs = 0x000000000000CCCC, priority_fs_raw = 0xAAAA12347777CCCC
</pre>

<p>The final value for Grad Student is 0xAAAA12347777CCCC.  This represents:</p>
<pre>
 College |  Dept   | Faculty  | User
  AAAA      1234      7777      CCCC
</pre>

<p>The <i>priority_fs_raw</i> values are visible as Fairshare Raw in the output
of <i>sshare -l</i>.

<h2><a name="ranking">Ranking</a></h2>

<p>After setting priority_fs_raw on all associations, all users are then
sorted by their priority_fs_raw to obtain a ranking. This rank is then used
to calculate the final fair share factor. Since this final number is stored at
the association level, new jobs can be immediately assigned a priority. Note
that all users, whether active or not, are included in calculations and
ranked.</p>

<p>This step is desirable because the final fair share factor must be
normalized to a floating point number between 0.0 and 1.0 that is multipled by
PriorityWeightFairshare, an integer. Depending on the normalization and the
value of PriorityWeightFairshare, precision loss can result in poor fair share
results; users may end up with the same priorities despite widely varying
usage. LEVEL_BASED solves this by sorting users then using the normalized rank
as the fair share factor. Users with the same fair share factor as other users
before the ranking will have the same priority as each other afterwards.</p>

<h2><a name="sshare">sshare</a></h2>

<p>sshare was modified to show the <i>priority_fs_raw</i> value as <i>Fairshare
Raw</i> when the <i>-l</i> (long) parameter is specified.  The field shows the
hexadecimal value of <i>priority_fs_raw</i> for each association, thus allowing
users to see the results of the fair share calculation at each level.</p>
<p>Note: Norm Usage is not used by LEVEL_BASED but is still displayed.</p>

<h2><a name="config">Configuration</a></h2>

<p> The following slurm.conf (SLURM_CONFIG_FILE) parameters are used to
configure the LEVEL_BASED prioritization mechanism.  See slurm.conf(5) man
page for more details.</p>

<dl>
<dt>PriorityFlags</dt>
<dd>Set to "LEVEL_BASED".</dd>
<dt>PriorityType</dt>
<dd>Set this value to "priority/multifactor".
The default value for this variable is "priority/basic"
which enables simple FIFO scheduling.</dd>
<dt>PriorityLevels</dt>
<dd>PriorityLevels determines how many levels of associations below the root
are considered for priority purposes. Associations deeper than this number
will inherit their parents' fair share priority. The number of levels must be
between 1 and 16.</dd>
<dt>PriorityCalcPeriod</dt>
<dd>PriorityCalcPeriod is the frequency in minutes that job half-life decay
and LEVEL_BASED calculations are performed.</dd>
</dl>

<h2><a name="notes">Important Notes</a></h2>
<ul>
<li>As the LEVEL_BASED algorithm ranks all users, active or not, the
administrator must carefully consider how to apply other priority weights
in the priority/multifactor plugin. It is worth mentioning that the
<i>PriorityWeightFairshare</i> can be usefully set to a much smaller value than
usual, possibly as low as 1 or 2 times the number of user associations.
</li>
<li>LEVEL_BASED requires the <a href="accounting.html">SLURM Accounting
Database</a> to provide the assigned shares and the consumed,
computing resources described below.
</li>
<li><i>scontrol reconfigure</i> does not cause the LEVEL_BASED algorithm to
run immediately, even if switching from a different algorithm. You may have to
wait until the next iteration as defined by <i>PriorityCalcPeriod</i>.
</li>
</ul>


<!-- -------------------------------------------------------------------- -->
<p style="text-align:center;">Last modified 20 June 2014</p>

<!--#include virtual="footer.txt"-->
