<!--#include virtual="header.txt"-->

<h1><a name="top">Slurm Preemption Plugin API</a></h1>

<h2> Overview</h2>
<p> This document describes Slurm preemption plugins and the API that defines
them. It is intended as a resource to programmers wishing to write their own
Slurm preemption plugins.</p>

<p>Slurm preemption plugins are Slurm plugins that identify which jobs
can be preempted by a pending job. They must conform to the Slurm Plugin
API with the following specifications:</p>

<p><span class="commandline">const char
plugin_type[]="<i>major/minor</i>"</span><br>
The major type must be &quot;preempt.&quot; The minor type can be any
recognizable abbreviation for the type of preemption.
We recommend, for example:</p>

<ul>
<li><b>none</b> &mdash; This plugin prevents any job preemption.</li>
<li><b>partition_prio</b> &mdash; This plugin permit pending jobs from one
partition to preempt jobs from a lower priority partition.</li>
<li><b>qos</b> &mdash; This plugin permits jobs to preempt others based
upon their Quality Of Service values as defined in the Slurm database.</li>
</ul>

<p><span class="commandline">const char plugin_name[]</span><br>
Some descriptive name for the plugin.
There is no requirement with respect to its format.</p>
<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loaded by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p>The programmer is urged to study
<span class="commandline">src/plugins/preempt/partition_prio/preempt_partition_prio.c</span>
for an example implementation of a Slurm preemption plugin.</p>


<h2>API Functions</h2>
<p>The following functions must appear. Functions which are not implemented
should be stubbed.</p>

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">List find_preemptable_jobs(job_record_t *job_ptr)</p>
<p style="margin-left:.2in"><b>Description</b>: Identifies the jobs
which can be preempted by a specific pending job.</p>
<p style="margin-left:.2in"><b>Arguments</b>:<br>
<span class="commandline">job_ptr</span> (input) a pointer to the
pending job which is attempting to be started</p>
<p style="margin-left:.2in"><b>Returns</b>: A list of pointers to
jobs which may be preempted.
The list should be be released using the <i>list_destroy</i> function when
no longer required.
This list should be sorted in order from most attractive to
preempt to least attractive to preempt (e.g. lowest to highest priority).
For example, even within a given partition or QOS one might want to
smaller jobs first.</p>

<p class="commandline">uint16_t job_preempt_mode(job_record_t *job_ptr)</p>
<p style="margin-left:.2in"><b>Description</b>: Identifies the mechanism
used to preempt the specified job.</p>
<p style="margin-left:.2in"><b>Arguments</b>:<br>
<span class="commandline">job_ptr</span> (input) a pointer to the
running job to be preempted</p>
<p style="margin-left:.2in"><b>Returns</b>: PREEMPT_MODE as defined in
the slurm/slurm.h file</p>

<p class="commandline">bool preemption_enabled(void)</p>
<p style="margin-left:.2in"><b>Description</b>: Report whether or not job
preemption is enabled.</p>
<p style="margin-left:.2in"><b>Returns</b>: true if running jobs may be
preempted, otherwise false</p>


<p style="text-align:center;">Last modified 23 October 2019</p>

<!--#include virtual="footer.txt"-->
