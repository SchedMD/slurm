<!--#include virtual="header.txt"-->

<h1><a name="top">Slurm Priority Plugin API</a></h1>

<h2> Overview</h2>
<p> This document describes Slurm priority plugins and the API that defines
them. It is intended as a resource to programmers wishing to write their own
Slurm priority plugins.</p>

<p>Slurm priority plugins are Slurm plugins that implement the Slurm priority
API described herein. They must conform to the Slurm Plugin API with the
following specifications:</p>

<p><span class="commandline">const char
plugin_type[]="<i>major/minor</i>"</span><br>
The major type must be &quot;priority.&quot; The minor type can be any
recognizable abbreviation for the type of priority.
We recommend, for example:</p>

<ul>
<li><b>basic</b> &mdash; A plugin that implements the API and provides basic FIFO
job priority.</li>
<li><b>multifactor</b> &mdash; The multi-factor job priority plugin.</li>
</ul>

<p><span class="commandline">const char plugin_name[]</span><br>
Some descriptive name for the plugin.
There is no requirement with respect to its format.</p>
<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loaded by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p>The programmer is urged to study
<span class="commandline">src/plugins/priority/basic/priority_basic.c</span>
for an example implementation of a Slurm priority plugin.</p>


<h2>Data Objects</h2>
<p>The implementation must maintain (though not necessarily directly export) an
enumerated <b>errno</b> to allow Slurm to discover as practically as possible
the reason for any failed API call.  Plugin-specific enumerated integer values
may be used when appropriate.</p>

<p>These values must not be used as return values in integer-valued functions
in the API. The proper error return value from integer-valued functions is
SLURM_ERROR. The implementation should endeavor to provide useful and pertinent
information by whatever means is practical. Successful API calls are not
required to reset any errno to a known value. However, the initial value of any
errno, prior to any error condition arising, should be SLURM_SUCCESS. </p>

<p class="commandline"> job_record</p>
<p style="margin-left:.2in"><b>Description</b>: A slurmctld structure that
contains details about a job.</p>

<p class="commandline"> acct_assoc_rec_t</p>
<p style="margin-left:.2in"><b>Description</b>: A slurm_accounting_storage
structure that contains details about an association.</p>

<p class="commandline"> priority_factors_object_t</p>
<p style="margin-left:.2in"><b>Description</b>: A structure that contains a
job's priority factors.</p>

<p class="commandline"> priority_factors_request_msg_t</p>
<p style="margin-left:.2in"><b>Description</b>: Used to request job priority
factors.  Contains a list of specific job and user ids of the jobs the user
wants to see.</p>

<p class="commandline"> priority_factors_response_msg_t</p>
<p style="margin-left:.2in"><b>Description</b>: Used to return the list of
priority_factors_object_t's containing the job priority factors the user has
asked to see.</p>


<h2>API Functions</h2>
<p>The following functions must appear. Functions which are not implemented should
be stubbed.</p>

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">uint32_t priority_p_set(uint32_t last_prio, job_record_t *job_ptr)</p>
<p style="margin-left:.2in"><b>Description</b>: Sets the priority of the job.</p>
<p style="margin-left:.2in"><b>Arguments</b>:<br>
<span class="commandline">last_prio</span> (input) the priority assigned to the
last job<br>
<span class="commandline">job_ptr</span> (input) pointer to the job record.</p>
<p style="margin-left:.2in"><b>Returns</b>: the priority assigned to the job</p>

<p class="commandline">void priority_p_reconfig(bool assoc_clear)</p>
<p style="margin-left:.2in"><b>Description</b>: Refresh the plugin's
configuration. Called whenever slurmctld is reconfigured.</p>
<p style="margin-left:.2in"><b>Arguments</b>:
<span class="commandline">assoc_clear</span> (input) true if association
and QOS used_cpu_run_secs field has been reset. This should be set to true
when Slurm is reconfigured, but false if an RPC is used to change only the
debug level of debug flags.</p>
<p style="margin-left:.2in"><b>Returns</b>: void</p>

<p class="commandline">void priority_p_set_assoc_usage(acct_assoc_rec_t *assoc)</p>
<p style="margin-left:.2in"><b>Description</b>: Set the normalized and
effective usage for an association.</p>
<p style="margin-left:.2in"><b>Arguments</b>:
<span class="commandline">assoc</span> (input/output) pointer to the association.</p>
<p style="margin-left:.2in"><b>Returns</b>: void</p>

<p class="commandline">List priority_p_get_priority_factors_list(priority_factors_request_msg_t *req_msg)</p>
<p style="margin-left:.2in"><b>Description</b>: Retrieves the priority factors
for all or specified jobs.</p>
<p style="margin-left:.2in"><b>Arguments</b>:
<span class="commandline">req_msg</span> (input) pointer to the message request
that contains the specific jobs or users of interest (of any).</p>
<p style="margin-left:.2in"><b>Returns</b>: a list of priority_factors_object_t's
containing the requested job priority factors</p>

<p class="commandline">void priority_p_job_end(job_record_t *job_ptr)</p>
<p style="margin-left:.2in"><b>Description</b>: Handle ending of job
  with decayable limits.</p>
<p style="margin-left:.2in"><b>Arguments</b>:
<span class="commandline">job_ptr</span> (input) pointer to the job record.</p>
<p style="margin-left:.2in"><b>Returns</b>: void</p>


<p style="text-align:center;">Last modified 23 October 2019</p>

<!--#include virtual="footer.txt"-->
