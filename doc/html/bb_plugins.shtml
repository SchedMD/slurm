<!--#include virtual="header.txt"-->

<h1><a name="top">Burst Buffer Plugin Programmer Guide</a></h1>

<h2> Overview</h2>
<p> This document describes the Slurm burst buffer plugins and the
APIs that defines them. It is intended as a resource to programmers
wishing to write their own Slurm burst buffer plugin.

<p>Slurm burst buffer plugins must conform to the
Slurm Plugin API with the following specifications:

<p><span class="commandline">const char
plugin_name[]="<i>full&nbsp;text&nbsp;name</i>"</span>
<p style="margin-left:.2in">
A free-formatted ASCII text string that identifies the plugin.

<p><span class="commandline">const char
plugin_type[]="<i>major/minor</i>"</span><br>
<p style="margin-left:.2in">

The major type must be &quot;burst_buffer&quot;.
The minor type can be any suitable name for the type of burst buffer
package.
The following burst buffer plugins are included in the Slurm distribution
<ul>
<li><b>cray</b> &mdash; Use Cray APIs to provide burst buffer.</li>
<li><b>generic</b> &mdash; Use generic burst buffer plugin.</li>
</ul>

<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loaded by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<h2>API Functions</h2>
<p>All of the following functions are required. Functions which are not
implemented must be stubbed.

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
Called when the plugin is loaded, before any other functions are
called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">
int bb_p_load_state(bool init_config)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function loads the current state of the burst buffer.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">init_config</span>
(input) true if called as part of slurmctld initialization.
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno

<p class="commandline">
int bb_p_state_pack(uid_t uid, Buf buffer, uint16_t protocol_version)
<p style="margin-left:.2in"><b>Description</b>:<br>
Pack current burst buffer state information for network transmission.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">uid</span>
(input) Owning user ID.<br>
<span class="commandline">buffer</span>
(input) buffer that will be packed.<br>
<span class="commandline">protocol_version</span>
(input) Version number of the data packing mechanism.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno

<p class="commandline">
int bb_p_reconfig(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
Reread the burst buffer config file when it is updated.
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno

<p class="commandline">
uint64_t bb_p_get_system_size(char *name)
<p style="margin-left:.2in"><b>Description</b>:<br>
Get the total burst buffer size in MB of a given plugin name.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">name</span>
(input) Plugin name of the burst buffer. If name is NULL, return the total
space of all burst buffer plugins.
<p style="margin-left:.2in"><b>Returns</b>: <br>
The size of the burst buffer in MB.

<p class="commandline">
int bb_p_job_validate(struct job_descriptor *job_desc, uid_t submit_uid)
<p style="margin-left:.2in"><b>Description</b>:<br>
Validation of a job submit request with respect to burst buffer option.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_desc</span>
(input) Job submission request.<br>
<span class="commandline">submit_uid</span>
(input) ID of the user submitting the job.
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno.

<p class="commandline">
int bb_p_job_validate2(struct job_record *job_ptr, char **err_msg)
<p style="margin-left:.2in"><b>Description</b>:<br>
Validation of a job submit request with respect to burst buffer option.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Job record for the job request with respect to burst buffer.<br>
<span class="commandline">err_msg</span>
(output) Error message, sent directlt to job submission command<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno.

<p class="commandline">
void bb_p_job_set_tres_cnt(struct job_record *job_ptr,
uint64_t *tres_cnt, bool locked);
<p style="margin-left:.2in"><b>Description</b>:<br>
Set the tres count in the job recored.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Job record to be set.<br>
<span class="commandline">tres_cnt</span>
(input/output) Fill in this already allocated array with tres_cnts<br>
<span class="commandline">locked</span>
(input) If tres read lock is locked or not.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
None

<p class="commandline">
time_t bb_p_job_get_est_start(struct job_record *job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Get an estimation of when a job can start.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Start time of this job.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
Estimated start time of job_ptr.

<p class="commandline">
int bb_p_job_try_stage_in(void)
<p style="margin-left:.2in"><b>Description</b>:<br>
Allocate burst buffers to jobs expected to start soonest.
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno

<p class="commandline">
int bb_p_job_test_stage_in(struct job_record *job_ptr, bool test_only)
<p style="margin-left:.2in"><b>Description</b>:<br>
Determine if a job's burst buffer stage-in is complete.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Job record to test.<br>
<span class="commandline">test_only</span>
(input) If false, then attempt to load burst buffer if possible.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
0 stage-in is underway<br>
1 stage-in complete<br>
-1 state-in not started or burst buffer in some unexpeced state.

<p class="commandline">
int bb_p_job_begin(struct job_record *job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Attempt to claim burst buffer resources.<br>
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Job record to test.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno

<p class="commandline">
int bb_p_job_revoke_alloc(struct job_record *job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Revoke allocation, but do not release resources.
Executed after bb_g_job_begin if there was an allocation failure.
Does not release previously allocated resources.<br>
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Job record to test.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno

<p class="commandline">
int bb_p_job_start_stage_out(struct job_record *job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Trigger a job's burst buffer stage out to begin.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Job to stage out.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno

<p class="commandline">
int bb_p_job_test_post_run(struct job_record *job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Determine of jobs's post run operation is complete.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Job to check if post run operation is complete.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
0 - post run operation is underway<br>
1 - post run operation complete<br>
-1 - fatal error

<p class="commandline">
int bb_p_job_test_stage_out(struct job_record *job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Determine of jobs's stage out is complete.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Job to check if stage out is complete.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
0 - stage-out is underway<br>
1 - stage-out complete<br>
-1 - fatal error

<p class="commandline">
int bb_p_job_cancel(struct job_record *job_ptr)
<p style="margin-left:.2in"><b>Description</b>:<br>
Terminate any file staging and release burst buffer resources.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span>
(input) Job to cancel.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
A Slurm errno

<p class="commandline">
char *bb_p_xlate_bb_2_tres_str(char *burst_buffer)
<p style="margin-left:.2in"><b>Description</b>:<br>
Translate burst buffer string to TRES string.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">burst_buffer</span>
(input) Burst buffer to translate to TRES string<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
The TRES string of the given burst buffer (Note: User must xfree the
return value).

<p class="footer"><a href="#top">top</a>

<p style="text-align:center;">Last modified 15 May 2017</p>

<!--#include virtual="footer.txt"-->
