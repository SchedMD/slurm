<!--#include virtual="header.txt"-->

<h1><a name="top">Core Specialization Plugin Programmer Guide</a></h1>

<h2> Overview</h2>
<p> This document describes the Slurm core specialization plugins and the APIs
that defines them. It is intended as a resource to programmers wishing to write
their own Slurm core specialization plugin. This is version 100 of the API.

<p>Slurm core specialization plugins must conform to the
Slurm Plugin API with the following specifications:

<p><span class="commandline">const char
plugin_name[]="<i>full&nbsp;text&nbsp;name</i>"</span>
<p style="margin-left:.2in">
A free-formatted ASCII text string that identifies the plugin.

<p><span class="commandline">const char
plugin_type[]="<i>major/minor</i>"</span><br>
<p style="margin-left:.2in">
The major type must be &quot;core_spec&quot;.
The minor type can be any suitable name for the type of core specialization
package.
The following core specialization plugins are included in the Slurm distribution
<ul>
<li><b>cray_aries</b> &mdash; Use Cray XC APIs to enforce core specialization.</li>
<li><b>none</b> &mdash; Can be configured to log calls to its functions, but
otherwise does nothing.</li>
</ul>
<p>Slurm can be configured to use multiple core specialization plugins if desired.</p>

<p><span class="commandline">const uint32_t plugin_version</span><br>
If specified, identifies the version of Slurm used to build this plugin and
any attempt to load the plugin from a different version of Slurm will result
in an error.
If not specified, then the plugin may be loaded by Slurm commands and
daemons from any version, however this may result in difficult to diagnose
failures due to changes in the arguments to plugin functions or changes
in other Slurm functions used by the plugin.</p>

<p><b>NOTE:</b> These functions all accept as an argument the job step's
container ID (as set by the proctrack plugin).
Each job step will have a different container ID.
Since a job may execute multiple job steps sequentially and/or in parallel;
these functions will be called once for each job step on each compute node.</p>


<h2>API Functions</h2>
<p>All of the following functions are required. Functions which are not
implemented must be stubbed.

<p class="commandline"> int init (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is loaded, before any other functions are
  called. Put global initialization here.
<p style="margin-left:.2in"><b>Returns</b>: <br>
  <span class="commandline">SLURM_SUCCESS</span> on success, or<br>
  <span class="commandline">SLURM_ERROR</span> on failure.</p>

<p class="commandline"> void fini (void)
<p style="margin-left:.2in"><b>Description</b>:<br>
  Called when the plugin is removed. Clear any allocated storage here.
<p style="margin-left:.2in"><b>Returns</b>: None.</p>

<p><b>Note</b>: These init and fini functions are not the same as those
described in the <span class="commandline">dlopen (3)</span> system library.
The C run-time system co-opts those symbols for its own initialization.
The system <span class="commandline">_init()</span> is called before the Slurm
<span class="commandline">init()</span>, and the Slurm
<span class="commandline">fini()</span> is called before the system's
<span class="commandline">_fini()</span>.</p>

<p class="commandline">
int core_spec_p_set(uint64_t cont_id, uint16_t core_count)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the slurmstepd daemon after the job step's tasks
have been forked and exec'ed, and immediately before they are released from
a held state.
Note that each job step will have a different container ID.
Note that since a job may execute multiple job steps sequentially and/or in
parallel; this function will be called once for each job step on each compute
node.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">cont_id</span>
(input) the job step's container ID as set by the proctrack plugin.<br>
<span class="commandline">core_count</span>
(input) number of specialized cores to be reserved for the job.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int core_spec_p_clear(uint64_t cont_id)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the slurmstepd daemon after the job step's tasks
have all exited.
Note that each job step will have a different container ID.
Note that since a job may execute multiple job steps sequentially and/or in
parallel; this function will be called once for each job step on each compute
node.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">cont_id</span>
(input) the job step's container ID as set by the proctrack plugin.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int core_spec_p_suspend(uint64_t cont_id, uint16_t core_count)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the slurmstepd daemon immediately after the job
step's tasks have all been sent a SIGSTOP signal.
Note that each job step will have a different container ID.
Note that since a job may execute multiple job steps sequentially and/or in
parallel; this function will be called once for each job step on each compute
node.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">cont_id</span>
(input) the job step's container ID as set by the proctrack plugin.<br>
<span class="commandline">core_count</span>
(input) number of specialized cores to be reserved for the job.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int core_spec_p_resume(uint64_t cont_id, uint16_t core_count)
<p style="margin-left:.2in"><b>Description</b>:<br>
This function is called by the slurmstepd daemon immediately before the job
step's tasks will all be sent a SIGCONT signal.
Note that each job step will have a different container ID.
Note that since a job may execute multiple job steps sequentially and/or in
parallel; this function will be called once for each job step on each compute
node.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">cont_id</span>
(input) the job step's container ID as set by the proctrack plugin.<br>
<span class="commandline">core_count</span>
(input) number of specialized cores to be reserved for the job.<br>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.


<p style="text-align:center;">Last modified 27 March 2015</p>

<!--#include virtual="footer.txt"-->
